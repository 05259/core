php build/composer.phar install --dev
make -C build/integration OC_TEST_ALT_HOME= OC_TEST_ENCRYPTION_ENABLED=
make[1]: Entering directory '/var/www/core/build/integration'
php composer.phar install
OC_TEST_ALT_HOME= OC_TEST_ENCRYPTION_ENABLED= ./run.sh
8080
31160
8180
31161
Console has to be executed with the user that owns the file config/config.php
Current user: root
Owner of config.php: www-data
Try adding 'sudo -u www-data ' to the beginning of the command (without the single quotes)
Console has to be executed with the user that owns the file config/config.php
Current user: root
Owner of config.php: www-data
Try adding 'sudo -u www-data ' to the beginning of the command (without the single quotes)
Console has to be executed with the user that owns the file config/config.php
Current user: root
Owner of config.php: www-data
Try adding 'sudo -u www-data ' to the beginning of the command (without the single quotes)
Feature: auth

  Background:                        # /var/www/core/build/integration/features/auth.feature:3
    Given user "user0" exists        # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    Given a new client token is used # FeatureContext::aNewClientTokenIsUsed()

  Scenario: access files app anonymously               # /var/www/core/build/integration/features/auth.feature:10
    When requesting "/index.php/apps/files" with "GET" # FeatureContext::requestingWith()
    Then the HTTP status code should be "401"          # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: access files app with basic auth                            # /var/www/core/build/integration/features/auth.feature:14
    Given user "user0" exists                                           # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When requesting "/index.php/apps/files" with "GET" using basic auth # FeatureContext::requestingWithBasicAuth()
    Then the HTTP status code should be "200"                           # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: access files app with basic token auth                            # /var/www/core/build/integration/features/auth.feature:18
    Given user "user0" exists                                                 # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When requesting "/index.php/apps/files" with "GET" using basic token auth # FeatureContext::requestingWithBasicTokenAuth()
    Then the HTTP status code should be "200"                                 # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: access files app with a client token                            # /var/www/core/build/integration/features/auth.feature:22
    Given user "user0" exists                                               # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When requesting "/index.php/apps/files" with "GET" using a client token # FeatureContext::requestingWithUsingAClientToken()
    Then the HTTP status code should be "200"                               # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: access files app with browser session                            # /var/www/core/build/integration/features/auth.feature:26
    Given user "user0" exists                                                # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    Given a new browser session is started                                   # FeatureContext::aNewBrowserSessionIsStarted()
    When requesting "/index.php/apps/files" with "GET" using browser session # FeatureContext::requestingWithBrowserSession()
    Then the HTTP status code should be "200"                                # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: using WebDAV anonymously                     # /var/www/core/build/integration/features/auth.feature:34
    Given user "user0" exists                            # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When requesting "/remote.php/webdav" with "PROPFIND" # FeatureContext::requestingWith()
    Then the HTTP status code should be "401"            # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: using WebDAV with basic auth                                  # /var/www/core/build/integration/features/auth.feature:38
    Given user "user0" exists                                             # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When requesting "/remote.php/webdav" with "PROPFIND" using basic auth # FeatureContext::requestingWithBasicAuth()
    Then the HTTP status code should be "207"                             # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: using WebDAV with token auth                                        # /var/www/core/build/integration/features/auth.feature:42
    Given user "user0" exists                                                   # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When requesting "/remote.php/webdav" with "PROPFIND" using basic token auth # FeatureContext::requestingWithBasicTokenAuth()
    Then the HTTP status code should be "207"                                   # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: using WebDAV with browser session                                  # /var/www/core/build/integration/features/auth.feature:51
    Given user "user0" exists                                                  # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    Given a new browser session is started                                     # FeatureContext::aNewBrowserSessionIsStarted()
    When requesting "/remote.php/webdav" with "PROPFIND" using browser session # FeatureContext::requestingWithBrowserSession()
    Then the HTTP status code should be "207"                                  # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: using OCS anonymously                                                    # /var/www/core/build/integration/features/auth.feature:59
    Given user "user0" exists                                                        # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When requesting "/ocs/v1.php/apps/files_sharing/api/v1/remote_shares" with "GET" # FeatureContext::requestingWith()
    Then the OCS status code should be "997"                                         # FeatureContext::theOCSStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: using OCS with basic auth                                                                 # /var/www/core/build/integration/features/auth.feature:63
    Given user "user0" exists                                                                         # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When requesting "/ocs/v1.php/apps/files_sharing/api/v1/remote_shares" with "GET" using basic auth # FeatureContext::requestingWithBasicAuth()
    Then the OCS status code should be "100"                                                          # FeatureContext::theOCSStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: using OCS with token auth                                                                       # /var/www/core/build/integration/features/auth.feature:67
    Given user "user0" exists                                                                               # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When requesting "/ocs/v1.php/apps/files_sharing/api/v1/remote_shares" with "GET" using basic token auth # FeatureContext::requestingWithBasicTokenAuth()
    Then the OCS status code should be "100"                                                                # FeatureContext::theOCSStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: using OCS with client token                                                                   # /var/www/core/build/integration/features/auth.feature:71
    Given user "user0" exists                                                                             # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When requesting "/ocs/v1.php/apps/files_sharing/api/v1/remote_shares" with "GET" using a client token # FeatureContext::requestingWithUsingAClientToken()
    Then the OCS status code should be "100"                                                              # FeatureContext::theOCSStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: using OCS with browser session                                                                 # /var/www/core/build/integration/features/auth.feature:75
    Given user "user0" exists                                                                              # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    Given a new browser session is started                                                                 # FeatureContext::aNewBrowserSessionIsStarted()
    When requesting "/ocs/v1.php/apps/files_sharing/api/v1/remote_shares" with "GET" using browser session # FeatureContext::requestingWithBrowserSession()
    Then the OCS status code should be "100"                                                               # FeatureContext::theOCSStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

Feature: caldav

  Scenario: Accessing a not existing calendar of another user                 # /var/www/core/build/integration/features/caldav.feature:2
    Given user "user0" exists                                                 # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When "admin" requests calendar "user0/MyCalendar"                         # CalDavContext::requestsCalendar()
    Then The CalDAV HTTP status code should be "404"                          # CalDavContext::theCaldavHttpStatusCodeShouldBe()
    And The exception is "Sabre\DAV\Exception\NotFound"                       # CalDavContext::theExceptionIs()
    And The error message is "Node with name 'MyCalendar' could not be found" # CalDavContext::theErrorMessageIs()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Accessing a not existing calendar of myself                       # /var/www/core/build/integration/features/caldav.feature:19
    Given user "user0" exists                                                 # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When "user0" requests calendar "admin/MyCalendar"                         # CalDavContext::requestsCalendar()
    Then The CalDAV HTTP status code should be "404"                          # CalDavContext::theCaldavHttpStatusCodeShouldBe()
    And The exception is "Sabre\DAV\Exception\NotFound"                       # CalDavContext::theExceptionIs()
    And The error message is "Node with name 'MyCalendar' could not be found" # CalDavContext::theErrorMessageIs()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

Feature: carddav

  Scenario: Accessing a not existing addressbook of another user                                # /var/www/core/build/integration/features/carddav.feature:2
    Given user "user0" exists                                                                   # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When "admin" requests addressbook "user0/MyAddressbook" with statuscode "404"               # CardDavContext::requestsAddressbookWithStatuscode()
    And The CardDAV exception is "Sabre\DAV\Exception\NotFound"                                 # CardDavContext::theCarddavExceptionIs()
    And The CardDAV error message is "Addressbook with name 'MyAddressbook' could not be found" # CardDavContext::theCarddavErrorMessageIs()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Accessing a not shared addressbook of another user                                  # /var/www/core/build/integration/features/carddav.feature:8
    Given user "user0" exists                                                                   # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    Given "admin" creates an addressbook named "MyAddressbook" with statuscode "201"            # CardDavContext::createsAnAddressbookNamedWithStatuscode()
    When "user0" requests addressbook "admin/MyAddressbook" with statuscode "404"               # CardDavContext::requestsAddressbookWithStatuscode()
    And The CardDAV exception is "Sabre\DAV\Exception\NotFound"                                 # CardDavContext::theCarddavExceptionIs()
    And The CardDAV error message is "Addressbook with name 'MyAddressbook' could not be found" # CardDavContext::theCarddavErrorMessageIs()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Accessing a not existing addressbook of myself                                      # /var/www/core/build/integration/features/carddav.feature:15
    Given user "user0" exists                                                                   # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When "user0" requests addressbook "admin/MyAddressbook" with statuscode "404"               # CardDavContext::requestsAddressbookWithStatuscode()
    And The CardDAV exception is "Sabre\DAV\Exception\NotFound"                                 # CardDavContext::theCarddavExceptionIs()
    And The CardDAV error message is "Addressbook with name 'MyAddressbook' could not be found" # CardDavContext::theCarddavErrorMessageIs()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Creating a new addressbook                                              # /var/www/core/build/integration/features/carddav.feature:21
    When "admin" creates an addressbook named "MyAddressbook" with statuscode "201" # CardDavContext::createsAnAddressbookNamedWithStatuscode()
      Client error response [url] http://localhost:8080/remote.php/dav/addressbooks/users/admin/MyAddressbook [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    Then "admin" requests addressbook "admin/MyAddressbook" with statuscode "200"   # CardDavContext::requestsAddressbookWithStatuscode()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

Feature: checksums

  Scenario: Uploading a file with checksum should work                                                                               # /var/www/core/build/integration/features/checksums.feature:3
    Given user "user0" exists                                                                                                        # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When user "user0" uploads file "data/textfile.txt" to "/myChecksumFile.txt" with checksum "MD5:d70b40f177b14b470d1756a3c12b963a" # ChecksumsContext::userUploadsFileToWithChecksum()
    Then The webdav response should have a status code "201"                                                                         # ChecksumsContext::theWebdavResponseShouldHaveAStatusCode()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Uploading a file with checksum should return the checksum in the propfind                                               # /var/www/core/build/integration/features/checksums.feature:8
    Given user "user0" exists                                                                                                       # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user0" uploads file "data/textfile.txt" to "/myChecksumFile.txt" with checksum "MD5:d70b40f177b14b470d1756a3c12b963a" # ChecksumsContext::userUploadsFileToWithChecksum()
    When user "user0" request the checksum of "/myChecksumFile.txt" via propfind                                                    # ChecksumsContext::userRequestTheChecksumOfViaPropfind()
    Then The webdav checksum should match "MD5:d70b40f177b14b470d1756a3c12b963a"                                                    # ChecksumsContext::theWebdavChecksumShouldMatch()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Uploading a file with checksum should return the checksum in the download header                                        # /var/www/core/build/integration/features/checksums.feature:14
    Given user "user0" exists                                                                                                       # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user0" uploads file "data/textfile.txt" to "/myChecksumFile.txt" with checksum "MD5:d70b40f177b14b470d1756a3c12b963a" # ChecksumsContext::userUploadsFileToWithChecksum()
    When user "user0" downloads the file "/myChecksumFile.txt"                                                                      # ChecksumsContext::userDownloadsTheFile()
    Then The header checksum should match "MD5:d70b40f177b14b470d1756a3c12b963a"                                                    # ChecksumsContext::theHeaderChecksumShouldMatch()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Moving a file with checksum should return the checksum in the propfind                                                  # /var/www/core/build/integration/features/checksums.feature:20
    Given user "user0" exists                                                                                                       # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user0" uploads file "data/textfile.txt" to "/myChecksumFile.txt" with checksum "MD5:d70b40f177b14b470d1756a3c12b963a" # ChecksumsContext::userUploadsFileToWithChecksum()
    When User "user0" moved file "/myChecksumFile.txt" to "/myMovedChecksumFile.txt"                                                # FeatureContext::userMovedFile()
    And user "user0" request the checksum of "/myMovedChecksumFile.txt" via propfind                                                # ChecksumsContext::userRequestTheChecksumOfViaPropfind()
    Then The webdav checksum should match "MD5:d70b40f177b14b470d1756a3c12b963a"                                                    # ChecksumsContext::theWebdavChecksumShouldMatch()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Moving file with checksum should return the checksum in the download header                                             # /var/www/core/build/integration/features/checksums.feature:27
    Given user "user0" exists                                                                                                       # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user0" uploads file "data/textfile.txt" to "/myChecksumFile.txt" with checksum "MD5:d70b40f177b14b470d1756a3c12b963a" # ChecksumsContext::userUploadsFileToWithChecksum()
    When User "user0" moved file "/myChecksumFile.txt" to "/myMovedChecksumFile.txt"                                                # FeatureContext::userMovedFile()
    And user "user0" downloads the file "/myMovedChecksumFile.txt"                                                                  # ChecksumsContext::userDownloadsTheFile()
    Then The header checksum should match "MD5:d70b40f177b14b470d1756a3c12b963a"                                                    # ChecksumsContext::theHeaderChecksumShouldMatch()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Copying a file with checksum should return the checksum in the propfind                                                 # /var/www/core/build/integration/features/checksums.feature:34
    Given user "user0" exists                                                                                                       # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user0" uploads file "data/textfile.txt" to "/myChecksumFile.txt" with checksum "MD5:d70b40f177b14b470d1756a3c12b963a" # ChecksumsContext::userUploadsFileToWithChecksum()
    When User "user0" copied file "/myChecksumFile.txt" to "/myChecksumFileCopy.txt"                                                # ChecksumsContext::userCopiedFileTo()
    And user "user0" request the checksum of "/myChecksumFileCopy.txt" via propfind                                                 # ChecksumsContext::userRequestTheChecksumOfViaPropfind()
    Then The webdav checksum should match "MD5:d70b40f177b14b470d1756a3c12b963a"                                                    # ChecksumsContext::theWebdavChecksumShouldMatch()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Copying file with checksum should return the checksum in the download header                                            # /var/www/core/build/integration/features/checksums.feature:41
    Given user "user0" exists                                                                                                       # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user0" uploads file "data/textfile.txt" to "/myChecksumFile.txt" with checksum "MD5:d70b40f177b14b470d1756a3c12b963a" # ChecksumsContext::userUploadsFileToWithChecksum()
    When User "user0" copied file "/myChecksumFile.txt" to "/myChecksumFileCopy.txt"                                                # ChecksumsContext::userCopiedFileTo()
    And user "user0" downloads the file "/myChecksumFileCopy.txt"                                                                   # ChecksumsContext::userDownloadsTheFile()
    Then The header checksum should match "MD5:d70b40f177b14b470d1756a3c12b963a"                                                    # ChecksumsContext::theHeaderChecksumShouldMatch()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Overwriting a file with checksum should remove the checksum and not return it in the propfind                           # /var/www/core/build/integration/features/checksums.feature:48
    Given user "user0" exists                                                                                                       # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user0" uploads file "data/textfile.txt" to "/myChecksumFile.txt" with checksum "MD5:d70b40f177b14b470d1756a3c12b963a" # ChecksumsContext::userUploadsFileToWithChecksum()
    When user "user0" uploads file "data/textfile.txt" to "/myChecksumFile.txt"                                                     # FeatureContext::userUploadsAFileTo()
    And user "user0" request the checksum of "/myChecksumFile.txt" via propfind                                                     # ChecksumsContext::userRequestTheChecksumOfViaPropfind()
    Then The webdav checksum should be empty                                                                                        # ChecksumsContext::theWebdavChecksumShouldBeEmpty()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Overwriting a file with checksum should remove the checksum and not return it in the download header                    # /var/www/core/build/integration/features/checksums.feature:55
    Given user "user0" exists                                                                                                       # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user0" uploads file "data/textfile.txt" to "/myChecksumFile.txt" with checksum "MD5:d70b40f177b14b470d1756a3c12b963a" # ChecksumsContext::userUploadsFileToWithChecksum()
    When user "user0" uploads file "data/textfile.txt" to "/myChecksumFile.txt"                                                     # FeatureContext::userUploadsAFileTo()
    And user "user0" downloads the file "/myChecksumFile.txt"                                                                       # ChecksumsContext::userDownloadsTheFile()
    Then The OC-Checksum header should not be there                                                                                 # ChecksumsContext::theOcChecksumHeaderShouldNotBeThere()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Uploading a chunked file with checksum should return the checksum in the propfind                                                 # /var/www/core/build/integration/features/checksums.feature:62
    Given user "user0" exists                                                                                                                 # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user0" uploads chunk file "1" of "3" with "AAAAA" to "/myChecksumFile.txt" with checksum "MD5:e892fdd61a74bc89cd05673cc2e22f88" # ChecksumsContext::userUploadsChunkFileOfWithToWithChecksum()
    And user "user0" uploads chunk file "2" of "3" with "BBBBB" to "/myChecksumFile.txt" with checksum "MD5:e892fdd61a74bc89cd05673cc2e22f88" # ChecksumsContext::userUploadsChunkFileOfWithToWithChecksum()
    And user "user0" uploads chunk file "3" of "3" with "CCCCC" to "/myChecksumFile.txt" with checksum "MD5:e892fdd61a74bc89cd05673cc2e22f88" # ChecksumsContext::userUploadsChunkFileOfWithToWithChecksum()
    When user "user0" request the checksum of "/myChecksumFile.txt" via propfind                                                              # ChecksumsContext::userRequestTheChecksumOfViaPropfind()
    Then The webdav checksum should match "MD5:e892fdd61a74bc89cd05673cc2e22f88"                                                              # ChecksumsContext::theWebdavChecksumShouldMatch()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Uploading a chunked file with checksum should return the checksum in the download header                                          # /var/www/core/build/integration/features/checksums.feature:70
    Given user "user0" exists                                                                                                                 # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user0" uploads chunk file "1" of "3" with "AAAAA" to "/myChecksumFile.txt" with checksum "MD5:e892fdd61a74bc89cd05673cc2e22f88" # ChecksumsContext::userUploadsChunkFileOfWithToWithChecksum()
    And user "user0" uploads chunk file "2" of "3" with "BBBBB" to "/myChecksumFile.txt" with checksum "MD5:e892fdd61a74bc89cd05673cc2e22f88" # ChecksumsContext::userUploadsChunkFileOfWithToWithChecksum()
    And user "user0" uploads chunk file "3" of "3" with "CCCCC" to "/myChecksumFile.txt" with checksum "MD5:e892fdd61a74bc89cd05673cc2e22f88" # ChecksumsContext::userUploadsChunkFileOfWithToWithChecksum()
    When user "user0" downloads the file "/myChecksumFile.txt"                                                                                # ChecksumsContext::userDownloadsTheFile()
    Then The header checksum should match "MD5:e892fdd61a74bc89cd05673cc2e22f88"                                                              # ChecksumsContext::theHeaderChecksumShouldMatch()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

Feature: comments

  Scenario: Creating a comment on a file belonging to myself                                                                     # /var/www/core/build/integration/features/comments.feature:2
    Given user "user0" exists                                                                                                    # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    Given As an "user0"                                                                                                          # FeatureContext::asAn()
    Given User "user0" uploads file "data/textfile.txt" to "/myFileToComment.txt"                                                # FeatureContext::userUploadsAFileTo()
    When "user0" posts a comment with content "My first comment" on the file named "/myFileToComment.txt" it should return "201" # CommentsContext::postsACommentWithContentOnTheFileNamedItShouldReturn()
    Then As "user0" load all the comments of the file named "/myFileToComment.txt" it should return "207"                        # CommentsContext::asLoadloadAllTheCommentsOfTheFileNamedItShouldReturn()
    And the response should contain a property "oc:parentId" with value "0"                                                      # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:childrenCount" with value "0"                                                 # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:verb" with value "comment"                                                    # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:actorType" with value "users"                                                 # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:objectType" with value "files"                                                # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:message" with value "My first comment"                                        # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:actorDisplayName" with value "user0"                                          # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain only "1" comments                                                                            # CommentsContext::theResponseShouldContainOnlyComments()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Creating a comment on a shared file belonging to another user                                                                   # /var/www/core/build/integration/features/comments.feature:17
    Given user "user0" exists                                                                                                               # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    Given user "user1" exists                                                                                                               # FeatureContext::assureUserExists()
    Given User "user0" uploads file "data/textfile.txt" to "/myFileToComment.txt"                                                           # FeatureContext::userUploadsAFileTo()
    Given As "user0" sending "POST" to "/apps/files_sharing/api/v1/shares" with                                                             # CommentsContext::asUserSendingToWith()
      | path      | myFileToComment.txt |
      | shareWith | user1               |
      | shareType | 0                   |
    When "user1" posts a comment with content "A comment from another user" on the file named "/myFileToComment.txt" it should return "201" # CommentsContext::postsACommentWithContentOnTheFileNamedItShouldReturn()
    Then As "user1" load all the comments of the file named "/myFileToComment.txt" it should return "207"                                   # CommentsContext::asLoadloadAllTheCommentsOfTheFileNamedItShouldReturn()
    And the response should contain a property "oc:parentId" with value "0"                                                                 # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:childrenCount" with value "0"                                                            # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:verb" with value "comment"                                                               # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:actorType" with value "users"                                                            # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:objectType" with value "files"                                                           # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:message" with value "A comment from another user"                                        # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:actorDisplayName" with value "user1"                                                     # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain only "1" comments                                                                                       # CommentsContext::theResponseShouldContainOnlyComments()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Creating a comment on a non-shared file belonging to another user                                                    # /var/www/core/build/integration/features/comments.feature:36
    Given user "user0" exists                                                                                                    # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    Given user "user1" exists                                                                                                    # FeatureContext::assureUserExists()
    Given User "user0" uploads file "data/textfile.txt" to "/myFileToComment.txt"                                                # FeatureContext::userUploadsAFileTo()
    Then "user1" posts a comment with content "My first comment" on the file named "/myFileToComment.txt" it should return "404" # CommentsContext::postsACommentWithContentOnTheFileNamedItShouldReturn()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Reading comments on a non-shared file belonging to another user                               # /var/www/core/build/integration/features/comments.feature:42
    Given user "user0" exists                                                                             # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    Given user "user1" exists                                                                             # FeatureContext::assureUserExists()
    Given User "user0" uploads file "data/textfile.txt" to "/myFileToComment.txt"                         # FeatureContext::userUploadsAFileTo()
    Then As "user1" load all the comments of the file named "/myFileToComment.txt" it should return "404" # CommentsContext::asLoadloadAllTheCommentsOfTheFileNamedItShouldReturn()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Deleting my own comments on a file belonging to myself                                                                # /var/www/core/build/integration/features/comments.feature:48
    Given user "user0" exists                                                                                                     # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    Given As an "user0"                                                                                                           # FeatureContext::asAn()
    Given User "user0" uploads file "data/textfile.txt" to "/myFileToComment.txt"                                                 # FeatureContext::userUploadsAFileTo()
    Given "user0" posts a comment with content "My first comment" on the file named "/myFileToComment.txt" it should return "201" # CommentsContext::postsACommentWithContentOnTheFileNamedItShouldReturn()
    When As "user0" load all the comments of the file named "/myFileToComment.txt" it should return "207"                         # CommentsContext::asLoadloadAllTheCommentsOfTheFileNamedItShouldReturn()
    Then the response should contain a property "oc:parentId" with value "0"                                                      # CommentsContext::theResponseShouldContainAPropertyWithValue()
    Then the response should contain a property "oc:childrenCount" with value "0"                                                 # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:verb" with value "comment"                                                     # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:actorType" with value "users"                                                  # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:objectType" with value "files"                                                 # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:message" with value "My first comment"                                         # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:actorDisplayName" with value "user0"                                           # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain only "1" comments                                                                             # CommentsContext::theResponseShouldContainOnlyComments()
    And As "user0" delete the created comment it should return "204"                                                              # CommentsContext::asDeleteTheCreatedCommentItShouldReturn()
    And As "user0" load all the comments of the file named "/myFileToComment.txt" it should return "207"                          # CommentsContext::asLoadloadAllTheCommentsOfTheFileNamedItShouldReturn()
    And the response should contain only "0" comments                                                                             # CommentsContext::theResponseShouldContainOnlyComments()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Deleting my own comments on a file shared by somebody else                                                            # /var/www/core/build/integration/features/comments.feature:66
    Given user "user0" exists                                                                                                     # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    Given user "user1" exists                                                                                                     # FeatureContext::assureUserExists()
    Given As an "user0"                                                                                                           # FeatureContext::asAn()
    Given User "user0" uploads file "data/textfile.txt" to "/myFileToComment.txt"                                                 # FeatureContext::userUploadsAFileTo()
    Given As "user0" sending "POST" to "/apps/files_sharing/api/v1/shares" with                                                   # CommentsContext::asUserSendingToWith()
      | path      | myFileToComment.txt |
      | shareWith | user1               |
      | shareType | 0                   |
    Given "user1" posts a comment with content "My first comment" on the file named "/myFileToComment.txt" it should return "201" # CommentsContext::postsACommentWithContentOnTheFileNamedItShouldReturn()
    When As "user1" load all the comments of the file named "/myFileToComment.txt" it should return "207"                         # CommentsContext::asLoadloadAllTheCommentsOfTheFileNamedItShouldReturn()
    Then the response should contain a property "oc:parentId" with value "0"                                                      # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:childrenCount" with value "0"                                                  # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:verb" with value "comment"                                                     # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:actorType" with value "users"                                                  # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:objectType" with value "files"                                                 # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:message" with value "My first comment"                                         # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:actorDisplayName" with value "user1"                                           # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain only "1" comments                                                                             # CommentsContext::theResponseShouldContainOnlyComments()
    And As "user1" delete the created comment it should return "204"                                                              # CommentsContext::asDeleteTheCreatedCommentItShouldReturn()
    And As "user1" load all the comments of the file named "/myFileToComment.txt" it should return "207"                          # CommentsContext::asLoadloadAllTheCommentsOfTheFileNamedItShouldReturn()
    And the response should contain only "0" comments                                                                             # CommentsContext::theResponseShouldContainOnlyComments()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Deleting my own comments on a file unshared by someone else                                                           # /var/www/core/build/integration/features/comments.feature:89
    Given user "user0" exists                                                                                                     # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    Given user "user1" exists                                                                                                     # FeatureContext::assureUserExists()
    Given User "user0" uploads file "data/textfile.txt" to "/myFileToComment.txt"                                                 # FeatureContext::userUploadsAFileTo()
    Given As "user0" sending "POST" to "/apps/files_sharing/api/v1/shares" with                                                   # CommentsContext::asUserSendingToWith()
      | path      | myFileToComment.txt |
      | shareWith | user1               |
      | shareType | 0                   |
    Given "user1" posts a comment with content "My first comment" on the file named "/myFileToComment.txt" it should return "201" # CommentsContext::postsACommentWithContentOnTheFileNamedItShouldReturn()
    When As "user1" load all the comments of the file named "/myFileToComment.txt" it should return "207"                         # CommentsContext::asLoadloadAllTheCommentsOfTheFileNamedItShouldReturn()
    Then the response should contain a property "oc:parentId" with value "0"                                                      # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:childrenCount" with value "0"                                                  # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:verb" with value "comment"                                                     # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:actorType" with value "users"                                                  # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:objectType" with value "files"                                                 # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:message" with value "My first comment"                                         # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:actorDisplayName" with value "user1"                                           # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain only "1" comments                                                                             # CommentsContext::theResponseShouldContainOnlyComments()
    And As "user0" remove all shares from the file named "/myFileToComment.txt"                                                   # FeatureContext::asRemoveAllSharesFromTheFileNamed()
    And As "user1" delete the created comment it should return "404"                                                              # CommentsContext::asDeleteTheCreatedCommentItShouldReturn()
    And As "user1" load all the comments of the file named "/myFileToComment.txt" it should return "404"                          # CommentsContext::asLoadloadAllTheCommentsOfTheFileNamedItShouldReturn()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Edit my own comments on a file belonging to myself                                                                    # /var/www/core/build/integration/features/comments.feature:111
    Given user "user0" exists                                                                                                     # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    Given User "user0" uploads file "data/textfile.txt" to "/myFileToComment.txt"                                                 # FeatureContext::userUploadsAFileTo()
    Given "user0" posts a comment with content "My first comment" on the file named "/myFileToComment.txt" it should return "201" # CommentsContext::postsACommentWithContentOnTheFileNamedItShouldReturn()
    When As "user0" load all the comments of the file named "/myFileToComment.txt" it should return "207"                         # CommentsContext::asLoadloadAllTheCommentsOfTheFileNamedItShouldReturn()
    Then the response should contain a property "oc:parentId" with value "0"                                                      # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:childrenCount" with value "0"                                                  # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:verb" with value "comment"                                                     # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:actorType" with value "users"                                                  # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:objectType" with value "files"                                                 # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:message" with value "My first comment"                                         # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:actorDisplayName" with value "user0"                                           # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain only "1" comments                                                                             # CommentsContext::theResponseShouldContainOnlyComments()
    When As "user0" edit the last created comment and set text to "My edited comment" it should return "207"                      # CommentsContext::asEditTheLastCreatedCommentAndSetTextToItShouldReturn()
    Then As "user0" load all the comments of the file named "/myFileToComment.txt" it should return "207"                         # CommentsContext::asLoadloadAllTheCommentsOfTheFileNamedItShouldReturn()
    And the response should contain a property "oc:parentId" with value "0"                                                       # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:childrenCount" with value "0"                                                  # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:verb" with value "comment"                                                     # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:actorType" with value "users"                                                  # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:objectType" with value "files"                                                 # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:message" with value "My edited comment"                                        # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:actorDisplayName" with value "user0"                                           # CommentsContext::theResponseShouldContainAPropertyWithValue()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Edit my own comments on a file shared by someone with me                                                              # /var/www/core/build/integration/features/comments.feature:134
    Given user "user0" exists                                                                                                     # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    Given user "user1" exists                                                                                                     # FeatureContext::assureUserExists()
    Given User "user0" uploads file "data/textfile.txt" to "/myFileToComment.txt"                                                 # FeatureContext::userUploadsAFileTo()
    Given As "user0" sending "POST" to "/apps/files_sharing/api/v1/shares" with                                                   # CommentsContext::asUserSendingToWith()
      | path      | myFileToComment.txt |
      | shareWith | user1               |
      | shareType | 0                   |
    Given "user1" posts a comment with content "My first comment" on the file named "/myFileToComment.txt" it should return "201" # CommentsContext::postsACommentWithContentOnTheFileNamedItShouldReturn()
    When As "user0" load all the comments of the file named "/myFileToComment.txt" it should return "207"                         # CommentsContext::asLoadloadAllTheCommentsOfTheFileNamedItShouldReturn()
    Then the response should contain a property "oc:parentId" with value "0"                                                      # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:childrenCount" with value "0"                                                  # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:verb" with value "comment"                                                     # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:actorType" with value "users"                                                  # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:objectType" with value "files"                                                 # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:message" with value "My first comment"                                         # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:actorDisplayName" with value "user1"                                           # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain only "1" comments                                                                             # CommentsContext::theResponseShouldContainOnlyComments()
    Given As "user1" edit the last created comment and set text to "My edited comment" it should return "207"                     # CommentsContext::asEditTheLastCreatedCommentAndSetTextToItShouldReturn()
    Then As "user1" load all the comments of the file named "/myFileToComment.txt" it should return "207"                         # CommentsContext::asLoadloadAllTheCommentsOfTheFileNamedItShouldReturn()
    And the response should contain a property "oc:parentId" with value "0"                                                       # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:childrenCount" with value "0"                                                  # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:verb" with value "comment"                                                     # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:actorType" with value "users"                                                  # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:objectType" with value "files"                                                 # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:message" with value "My edited comment"                                        # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:actorDisplayName" with value "user1"                                           # CommentsContext::theResponseShouldContainAPropertyWithValue()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Edit my own comments on a file unshared by someone with me                                                           # /var/www/core/build/integration/features/comments.feature:162
    Given user "user0" exists                                                                                                    # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    Given user "user1" exists                                                                                                    # FeatureContext::assureUserExists()
    Given User "user0" uploads file "data/textfile.txt" to "/myFileToComment.txt"                                                # FeatureContext::userUploadsAFileTo()
    Given As "user0" sending "POST" to "/apps/files_sharing/api/v1/shares" with                                                  # CommentsContext::asUserSendingToWith()
      | path      | myFileToComment.txt |
      | shareWith | user1               |
      | shareType | 0                   |
    When "user1" posts a comment with content "My first comment" on the file named "/myFileToComment.txt" it should return "201" # CommentsContext::postsACommentWithContentOnTheFileNamedItShouldReturn()
    Then As "user0" load all the comments of the file named "/myFileToComment.txt" it should return "207"                        # CommentsContext::asLoadloadAllTheCommentsOfTheFileNamedItShouldReturn()
    And the response should contain a property "oc:parentId" with value "0"                                                      # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:childrenCount" with value "0"                                                 # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:verb" with value "comment"                                                    # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:actorType" with value "users"                                                 # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:objectType" with value "files"                                                # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:message" with value "My first comment"                                        # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:actorDisplayName" with value "user1"                                          # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain only "1" comments                                                                            # CommentsContext::theResponseShouldContainOnlyComments()
    And As "user0" remove all shares from the file named "/myFileToComment.txt"                                                  # FeatureContext::asRemoveAllSharesFromTheFileNamed()
    When As "user1" edit the last created comment and set text to "My edited comment" it should return "404"                     # CommentsContext::asEditTheLastCreatedCommentAndSetTextToItShouldReturn()
    Then As "user0" load all the comments of the file named "/myFileToComment.txt" it should return "207"                        # CommentsContext::asLoadloadAllTheCommentsOfTheFileNamedItShouldReturn()
    And the response should contain a property "oc:parentId" with value "0"                                                      # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:childrenCount" with value "0"                                                 # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:verb" with value "comment"                                                    # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:actorType" with value "users"                                                 # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:objectType" with value "files"                                                # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:message" with value "My first comment"                                        # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:actorDisplayName" with value "user1"                                          # CommentsContext::theResponseShouldContainAPropertyWithValue()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Edit comments of other users should not be possible                                                                   # /var/www/core/build/integration/features/comments.feature:191
    Given user "user0" exists                                                                                                     # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    Given user "user1" exists                                                                                                     # FeatureContext::assureUserExists()
    Given User "user0" uploads file "data/textfile.txt" to "/myFileToComment.txt"                                                 # FeatureContext::userUploadsAFileTo()
    Given As "user0" sending "POST" to "/apps/files_sharing/api/v1/shares" with                                                   # CommentsContext::asUserSendingToWith()
      | path      | myFileToComment.txt |
      | shareWith | user1               |
      | shareType | 0                   |
    Given "user1" posts a comment with content "My first comment" on the file named "/myFileToComment.txt" it should return "201" # CommentsContext::postsACommentWithContentOnTheFileNamedItShouldReturn()
    When As "user0" load all the comments of the file named "/myFileToComment.txt" it should return "207"                         # CommentsContext::asLoadloadAllTheCommentsOfTheFileNamedItShouldReturn()
    Then the response should contain a property "oc:parentId" with value "0"                                                      # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:childrenCount" with value "0"                                                  # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:verb" with value "comment"                                                     # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:actorType" with value "users"                                                  # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:objectType" with value "files"                                                 # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:message" with value "My first comment"                                         # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain a property "oc:actorDisplayName" with value "user1"                                           # CommentsContext::theResponseShouldContainAPropertyWithValue()
    And the response should contain only "1" comments                                                                             # CommentsContext::theResponseShouldContainOnlyComments()
    Then As "user0" edit the last created comment and set text to "My edited comment" it should return "403"                      # CommentsContext::asEditTheLastCreatedCommentAndSetTextToItShouldReturn()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

Feature: dav-v2

  Background:                   # /var/www/core/build/integration/features/dav-v2.feature:2
    Given using api version "1" # FeatureContext::usingApiVersion()

  Scenario: moving a file new endpoint way                                   # /var/www/core/build/integration/features/dav-v2.feature:5
    Given using new dav path                                                 # FeatureContext::usingNewDavPath()
    And As an "admin"                                                        # FeatureContext::asAn()
    And user "user0" exists                                                  # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When User "user0" moves file "/textfile0.txt" to "/FOLDER/textfile0.txt" # FeatureContext::userMovesFile()
    Then the HTTP status code should be "201"                                # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: download a file with range using new endpoint           # /var/www/core/build/integration/features/dav-v2.feature:12
    Given using new dav path                                        # FeatureContext::usingNewDavPath()
    And As an "admin"                                               # FeatureContext::asAn()
    And user "user0" exists                                         # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And As an "user0"                                               # FeatureContext::asAn()
    When Downloading file "/welcome.txt" with range "bytes=51-77"   # FeatureContext::downloadFileWithRange()
    Then Downloaded content should be "example file for developers" # FeatureContext::downloadedContentShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Downloading a file on the new endpoint should serve security headers # /var/www/core/build/integration/features/dav-v2.feature:20
    Given using new dav path                                                     # FeatureContext::usingNewDavPath()
    And As an "admin"                                                            # FeatureContext::asAn()
    When Downloading file "/welcome.txt"                                         # FeatureContext::downloadingFile()
    Then The following headers should be set                                     # FeatureContext::theFollowingHeadersShouldBeSet()
      | Content-Disposition               | attachment; filename*=UTF-8''welcome.txt; filename="welcome.txt" |
      | Content-Security-Policy           | default-src 'none';                                              |
      | X-Content-Type-Options            | nosniff                                                          |
      | X-Download-Options                | noopen                                                           |
      | X-Frame-Options                   | Sameorigin                                                       |
      | X-Permitted-Cross-Domain-Policies | none                                                             |
      | X-Robots-Tag                      | none                                                             |
      | X-XSS-Protection                  | 1; mode=block                                                    |
      Expected value 'attachment; filename*=UTF-8''welcome.txt; filename="welcome.txt"' for header 'Content-Disposition', got '' (Exception)
    And Downloaded content should start with "Welcome to your ownCloud account!" # FeatureContext::downloadedContentShouldStartWith()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Doing a GET with a web login should work without CSRF token on the new backend # /var/www/core/build/integration/features/dav-v2.feature:35
    Given Logging in using web as "admin"                                                  # FeatureContext::loggingInUsingWebAs()
      Client error response [url] http://localhost:8080/login [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When Sending a "GET" to "/remote.php/dav/files/admin/welcome.txt" without requesttoken # FeatureContext::sendingAToWithoutRequesttoken()
    Then Downloaded content should start with "Welcome to your ownCloud account!"          # FeatureContext::downloadedContentShouldStartWith()
    Then the HTTP status code should be "200"                                              # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Doing a GET with a web login should work with CSRF token on the new backend # /var/www/core/build/integration/features/dav-v2.feature:41
    Given Logging in using web as "admin"                                               # FeatureContext::loggingInUsingWebAs()
      Client error response [url] http://localhost:8080/login [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When Sending a "GET" to "/remote.php/dav/files/admin/welcome.txt" with requesttoken # FeatureContext::sendingAToWithRequesttoken()
    Then Downloaded content should start with "Welcome to your ownCloud account!"       # FeatureContext::downloadedContentShouldStartWith()
    Then the HTTP status code should be "200"                                           # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Doing a PROPFIND with a web login should not work without CSRF token on the new backend # /var/www/core/build/integration/features/dav-v2.feature:47
    Given Logging in using web as "admin"                                                           # FeatureContext::loggingInUsingWebAs()
      Client error response [url] http://localhost:8080/login [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When Sending a "PROPFIND" to "/remote.php/dav/files/admin/welcome.txt" without requesttoken     # FeatureContext::sendingAToWithoutRequesttoken()
    Then the HTTP status code should be "401"                                                       # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Doing a PROPFIND with a web login should work with CSRF token on the new backend # /var/www/core/build/integration/features/dav-v2.feature:52
    Given Logging in using web as "admin"                                                    # FeatureContext::loggingInUsingWebAs()
      Client error response [url] http://localhost:8080/login [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When Sending a "PROPFIND" to "/remote.php/dav/files/admin/welcome.txt" with requesttoken # FeatureContext::sendingAToWithRequesttoken()
    Then the HTTP status code should be "207"                                                # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Uploading a file having 0B as quota                       # /var/www/core/build/integration/features/dav-v2.feature:57
    Given using new dav path                                          # FeatureContext::usingNewDavPath()
    And As an "admin"                                                 # FeatureContext::asAn()
    And user "user0" exists                                           # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user0" has a quota of "0 B"                             # FeatureContext::userHasAQuotaOf()
    And As an "user0"                                                 # FeatureContext::asAn()
    When User "user0" uploads file "data/textfile.txt" to "/asdf.txt" # FeatureContext::userUploadsAFileTo()
    Then the HTTP status code should be "507"                         # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Uploading a file as recipient using webdav new endpoint having quota # /var/www/core/build/integration/features/dav-v2.feature:66
    Given using new dav path                                                     # FeatureContext::usingNewDavPath()
    And As an "admin"                                                            # FeatureContext::asAn()
    And user "user0" exists                                                      # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                      # FeatureContext::assureUserExists()
    And user "user0" has a quota of "10 MB"                                      # FeatureContext::userHasAQuotaOf()
    And user "user1" has a quota of "10 MB"                                      # FeatureContext::userHasAQuotaOf()
    And As an "user1"                                                            # FeatureContext::asAn()
    And user "user1" created a folder "/testquota"                               # FeatureContext::userCreatedAFolder()
    And as "user1" creating a share with                                         # FeatureContext::asCreatingAShareWith()
      | path        | testquota |
      | shareType   | 0         |
      | permissions | 31        |
      | shareWith   | user0     |
    And As an "user0"                                                            # FeatureContext::asAn()
    When User "user0" uploads file "data/textfile.txt" to "/testquota/asdf.txt"  # FeatureContext::userUploadsAFileTo()
    Then the HTTP status code should be "201"                                    # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

Feature: external-storage

  Background:                   # /var/www/core/build/integration/features/external-storage.feature:2
    Given using api version "1" # FeatureContext::usingApiVersion()
    Given using old dav path    # FeatureContext::usingOldDavPath()

  @local_storage @no_encryption
  Scenario: Share by link a file inside a local external storage                       # /var/www/core/build/integration/features/external-storage.feature:8
    Given user "user0" exists                                                          # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                            # FeatureContext::assureUserExists()
    And As an "user0"                                                                  # FeatureContext::asAn()
    And user "user0" created a folder "/local_storage/foo"                             # FeatureContext::userCreatedAFolder()
    And User "user0" moved file "/textfile0.txt" to "/local_storage/foo/textfile0.txt" # FeatureContext::userMovedFile()
    And folder "/local_storage/foo" of user "user0" is shared with user "user1"        # FeatureContext::assureFileIsShared()
    And As an "user1"                                                                  # FeatureContext::asAn()
    When creating a share with                                                         # FeatureContext::creatingShare()
      | path      | foo |
      | shareType | 3   |
    Then the OCS status code should be "100"                                           # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                           # FeatureContext::theHTTPStatusCodeShouldBe()
    And Share fields of last share match with                                          # FeatureContext::checkShareFields()
      | id       | A_NUMBER             |
      | url      | AN_URL               |
      | token    | A_TOKEN              |
      | mimetype | httpd/unix-directory |
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  @local_storage @no_encryption
  Scenario: Move a file into storage works                                               # /var/www/core/build/integration/features/external-storage.feature:29
    Given user "user0" exists                                                            # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                              # FeatureContext::assureUserExists()
    And As an "user0"                                                                    # FeatureContext::asAn()
    And user "user0" created a folder "/local_storage/foo1"                              # FeatureContext::userCreatedAFolder()
    When User "user0" moved file "/textfile0.txt" to "/local_storage/foo1/textfile0.txt" # FeatureContext::userMovedFile()
    Then as "user1" the file "/local_storage/foo1/textfile0.txt" exists                  # FeatureContext::asTheFileOrFolderExists()
    And as "user0" the file "/local_storage/foo1/textfile0.txt" exists                   # FeatureContext::asTheFileOrFolderExists()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  @local_storage @no_encryption
  Scenario: Move a file out of the storage works                                        # /var/www/core/build/integration/features/external-storage.feature:40
    Given user "user0" exists                                                           # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                             # FeatureContext::assureUserExists()
    And As an "user0"                                                                   # FeatureContext::asAn()
    And user "user0" created a folder "/local_storage/foo2"                             # FeatureContext::userCreatedAFolder()
    And User "user0" moved file "/textfile0.txt" to "/local_storage/foo2/textfile0.txt" # FeatureContext::userMovedFile()
    When User "user1" moved file "/local_storage/foo2/textfile0.txt" to "/local.txt"    # FeatureContext::userMovedFile()
    Then as "user1" the file "/local_storage/foo2/textfile0.txt" does not exist         # FeatureContext::asTheFileOrFolderDoesNotExist()
    And as "user0" the file "/local_storage/foo2/textfile0.txt" does not exist          # FeatureContext::asTheFileOrFolderDoesNotExist()
    And as "user1" the file "/local.txt" exists                                         # FeatureContext::asTheFileOrFolderExists()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

Feature: favorite

  Background:                   # /var/www/core/build/integration/features/favorites.feature:2
    Given using api version "1" # FeatureContext::usingApiVersion()

  Scenario: Favorite a folder                                                                           # /var/www/core/build/integration/features/favorites.feature:5
    Given using old dav path                                                                            # FeatureContext::usingOldDavPath()
    And As an "admin"                                                                                   # FeatureContext::asAn()
    And user "user0" exists                                                                             # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When user "user0" favorites element "/FOLDER"                                                       # FeatureContext::userFavoritesElement()
    Then as "user0" gets properties of folder "/FOLDER" with                                            # FeatureContext::asGetsPropertiesOfFolderWith()
      | {http://owncloud.org/ns}favorite |
    And the single response should contain a property "{http://owncloud.org/ns}favorite" with value "1" # FeatureContext::theSingleResponseShouldContainAPropertyWithValue()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Favorite and unfavorite a folder                                                            # /var/www/core/build/integration/features/favorites.feature:14
    Given using old dav path                                                                            # FeatureContext::usingOldDavPath()
    And As an "admin"                                                                                   # FeatureContext::asAn()
    And user "user0" exists                                                                             # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When user "user0" favorites element "/FOLDER"                                                       # FeatureContext::userFavoritesElement()
    And user "user0" unfavorites element "/FOLDER"                                                      # FeatureContext::userUnfavoritesElement()
    Then as "user0" gets properties of folder "/FOLDER" with                                            # FeatureContext::asGetsPropertiesOfFolderWith()
      | {http://owncloud.org/ns}favorite |
    And the single response should contain a property "{http://owncloud.org/ns}favorite" with value "0" # FeatureContext::theSingleResponseShouldContainAPropertyWithValue()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Favorite a file                                                                             # /var/www/core/build/integration/features/favorites.feature:24
    Given using old dav path                                                                            # FeatureContext::usingOldDavPath()
    And As an "admin"                                                                                   # FeatureContext::asAn()
    And user "user0" exists                                                                             # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When user "user0" favorites element "/textfile0.txt"                                                # FeatureContext::userFavoritesElement()
    Then as "user0" gets properties of file "/textfile0.txt" with                                       # FeatureContext::asGetsPropertiesOfFolderWith()
      | {http://owncloud.org/ns}favorite |
    And the single response should contain a property "{http://owncloud.org/ns}favorite" with value "1" # FeatureContext::theSingleResponseShouldContainAPropertyWithValue()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Favorite and unfavorite a file                                                              # /var/www/core/build/integration/features/favorites.feature:33
    Given using old dav path                                                                            # FeatureContext::usingOldDavPath()
    And As an "admin"                                                                                   # FeatureContext::asAn()
    And user "user0" exists                                                                             # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When user "user0" favorites element "/textfile0.txt"                                                # FeatureContext::userFavoritesElement()
    And user "user0" unfavorites element "/textfile0.txt"                                               # FeatureContext::userUnfavoritesElement()
    Then as "user0" gets properties of file "/textfile0.txt" with                                       # FeatureContext::asGetsPropertiesOfFolderWith()
      | {http://owncloud.org/ns}favorite |
    And the single response should contain a property "{http://owncloud.org/ns}favorite" with value "0" # FeatureContext::theSingleResponseShouldContainAPropertyWithValue()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Favorite a folder new endpoint                                                              # /var/www/core/build/integration/features/favorites.feature:43
    Given using new dav path                                                                            # FeatureContext::usingNewDavPath()
    And As an "admin"                                                                                   # FeatureContext::asAn()
    And user "user0" exists                                                                             # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When user "user0" favorites element "/FOLDER"                                                       # FeatureContext::userFavoritesElement()
    Then as "user0" gets properties of folder "/FOLDER" with                                            # FeatureContext::asGetsPropertiesOfFolderWith()
      | {http://owncloud.org/ns}favorite |
    And the single response should contain a property "{http://owncloud.org/ns}favorite" with value "1" # FeatureContext::theSingleResponseShouldContainAPropertyWithValue()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Favorite and unfavorite a folder new endpoint                                               # /var/www/core/build/integration/features/favorites.feature:52
    Given using new dav path                                                                            # FeatureContext::usingNewDavPath()
    And As an "admin"                                                                                   # FeatureContext::asAn()
    And user "user0" exists                                                                             # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When user "user0" favorites element "/FOLDER"                                                       # FeatureContext::userFavoritesElement()
    And user "user0" unfavorites element "/FOLDER"                                                      # FeatureContext::userUnfavoritesElement()
    Then as "user0" gets properties of folder "/FOLDER" with                                            # FeatureContext::asGetsPropertiesOfFolderWith()
      | {http://owncloud.org/ns}favorite |
    And the single response should contain a property "{http://owncloud.org/ns}favorite" with value "0" # FeatureContext::theSingleResponseShouldContainAPropertyWithValue()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Favorite a file new endpoint                                                                # /var/www/core/build/integration/features/favorites.feature:62
    Given using new dav path                                                                            # FeatureContext::usingNewDavPath()
    And As an "admin"                                                                                   # FeatureContext::asAn()
    And user "user0" exists                                                                             # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When user "user0" favorites element "/textfile0.txt"                                                # FeatureContext::userFavoritesElement()
    Then as "user0" gets properties of file "/textfile0.txt" with                                       # FeatureContext::asGetsPropertiesOfFolderWith()
      | {http://owncloud.org/ns}favorite |
    And the single response should contain a property "{http://owncloud.org/ns}favorite" with value "1" # FeatureContext::theSingleResponseShouldContainAPropertyWithValue()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Favorite and unfavorite a file new endpoint                                                 # /var/www/core/build/integration/features/favorites.feature:71
    Given using new dav path                                                                            # FeatureContext::usingNewDavPath()
    And As an "admin"                                                                                   # FeatureContext::asAn()
    And user "user0" exists                                                                             # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When user "user0" favorites element "/textfile0.txt"                                                # FeatureContext::userFavoritesElement()
    And user "user0" unfavorites element "/textfile0.txt"                                               # FeatureContext::userUnfavoritesElement()
    Then as "user0" gets properties of file "/textfile0.txt" with                                       # FeatureContext::asGetsPropertiesOfFolderWith()
      | {http://owncloud.org/ns}favorite |
    And the single response should contain a property "{http://owncloud.org/ns}favorite" with value "0" # FeatureContext::theSingleResponseShouldContainAPropertyWithValue()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Get favorited elements of a folder                                   # /var/www/core/build/integration/features/favorites.feature:81
    Given using old dav path                                                     # FeatureContext::usingOldDavPath()
    And As an "admin"                                                            # FeatureContext::asAn()
    And user "user0" exists                                                      # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When user "user0" favorites element "/FOLDER"                                # FeatureContext::userFavoritesElement()
    And user "user0" favorites element "/textfile0.txt"                          # FeatureContext::userFavoritesElement()
    And user "user0" favorites element "/textfile1.txt"                          # FeatureContext::userFavoritesElement()
    Then user "user0" in folder "/" should have favorited the following elements # FeatureContext::checkFavoritedElements()
      | /FOLDER        |
      | /textfile0.txt |
      | /textfile1.txt |
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Get favorited elements of a folder using new path                    # /var/www/core/build/integration/features/favorites.feature:93
    Given using new dav path                                                     # FeatureContext::usingNewDavPath()
    And As an "admin"                                                            # FeatureContext::asAn()
    And user "user0" exists                                                      # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When user "user0" favorites element "/FOLDER"                                # FeatureContext::userFavoritesElement()
    And user "user0" favorites element "/textfile0.txt"                          # FeatureContext::userFavoritesElement()
    And user "user0" favorites element "/textfile1.txt"                          # FeatureContext::userFavoritesElement()
    Then user "user0" in folder "/" should have favorited the following elements # FeatureContext::checkFavoritedElements()
      | /FOLDER        |
      | /textfile0.txt |
      | /textfile1.txt |
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Get favorited elements of a subfolder                                         # /var/www/core/build/integration/features/favorites.feature:105
    Given using old dav path                                                              # FeatureContext::usingOldDavPath()
    And As an "admin"                                                                     # FeatureContext::asAn()
    And user "user0" exists                                                               # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user0" created a folder "/subfolder"                                        # FeatureContext::userCreatedAFolder()
    And User "user0" moves file "/textfile0.txt" to "/subfolder/textfile0.txt"            # FeatureContext::userMovesFile()
    And User "user0" moves file "/textfile1.txt" to "/subfolder/textfile1.txt"            # FeatureContext::userMovesFile()
    And User "user0" moves file "/textfile2.txt" to "/subfolder/textfile2.txt"            # FeatureContext::userMovesFile()
    When user "user0" favorites element "/subfolder/textfile0.txt"                        # FeatureContext::userFavoritesElement()
    And user "user0" favorites element "/subfolder/textfile1.txt"                         # FeatureContext::userFavoritesElement()
    And user "user0" favorites element "/subfolder/textfile2.txt"                         # FeatureContext::userFavoritesElement()
    And user "user0" unfavorites element "/subfolder/textfile1.txt"                       # FeatureContext::userUnfavoritesElement()
    Then user "user0" in folder "/subfolder" should have favorited the following elements # FeatureContext::checkFavoritedElements()
      | /subfolder/textfile0.txt |
      | /subfolder/textfile2.txt |
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Get favorited elements of a subfolder using new path                          # /var/www/core/build/integration/features/favorites.feature:121
    Given using old dav path                                                              # FeatureContext::usingOldDavPath()
    And As an "admin"                                                                     # FeatureContext::asAn()
    And user "user0" exists                                                               # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user0" created a folder "/subfolder"                                        # FeatureContext::userCreatedAFolder()
    And User "user0" moves file "/textfile0.txt" to "/subfolder/textfile0.txt"            # FeatureContext::userMovesFile()
    And User "user0" moves file "/textfile1.txt" to "/subfolder/textfile1.txt"            # FeatureContext::userMovesFile()
    And User "user0" moves file "/textfile2.txt" to "/subfolder/textfile2.txt"            # FeatureContext::userMovesFile()
    When user "user0" favorites element "/subfolder/textfile0.txt"                        # FeatureContext::userFavoritesElement()
    And user "user0" favorites element "/subfolder/textfile1.txt"                         # FeatureContext::userFavoritesElement()
    And user "user0" favorites element "/subfolder/textfile2.txt"                         # FeatureContext::userFavoritesElement()
    And user "user0" unfavorites element "/subfolder/textfile1.txt"                       # FeatureContext::userUnfavoritesElement()
    Then user "user0" in folder "/subfolder" should have favorited the following elements # FeatureContext::checkFavoritedElements()
      | /subfolder/textfile0.txt |
      | /subfolder/textfile2.txt |
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: moving a favorite file out of a share keeps favorite state           # /var/www/core/build/integration/features/favorites.feature:137
    Given using old dav path                                                     # FeatureContext::usingOldDavPath()
    And As an "admin"                                                            # FeatureContext::asAn()
    And user "user0" exists                                                      # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                      # FeatureContext::assureUserExists()
    And user "user0" created a folder "/shared"                                  # FeatureContext::userCreatedAFolder()
    And User "user0" moved file "/textfile0.txt" to "/shared/shared_file.txt"    # FeatureContext::userMovedFile()
    And folder "/shared" of user "user0" is shared with user "user1"             # FeatureContext::assureFileIsShared()
    And user "user1" favorites element "/shared/shared_file.txt"                 # FeatureContext::userFavoritesElement()
    When User "user1" moved file "/shared/shared_file.txt" to "/taken_out.txt"   # FeatureContext::userMovedFile()
    Then user "user1" in folder "/" should have favorited the following elements # FeatureContext::checkFavoritedElements()
      | /taken_out.txt |
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

Feature: provisioning

  Background:                   # /var/www/core/build/integration/features/provisioning-v1.feature:2
    Given using api version "1" # FeatureContext::usingApiVersion()

  Scenario: Getting an not existing user      # /var/www/core/build/integration/features/provisioning-v1.feature:5
    Given As an "admin"                       # FeatureContext::asAn()
    When sending "GET" to "/cloud/users/test" # FeatureContext::sendingTo()
    Then the OCS status code should be "998"  # FeatureContext::theOCSStatusCodeShouldBe()
      Unable to parse response body into XML: String could not be parsed as XML (GuzzleHttp\Exception\XmlParseException)
    And the HTTP status code should be "200"  # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Listing all users                # /var/www/core/build/integration/features/provisioning-v1.feature:11
    Given As an "admin"                      # FeatureContext::asAn()
    When sending "GET" to "/cloud/users"     # FeatureContext::sendingTo()
    Then the OCS status code should be "100" # FeatureContext::theOCSStatusCodeShouldBe()
      Unable to parse response body into XML: String could not be parsed as XML (GuzzleHttp\Exception\XmlParseException)
    And the HTTP status code should be "200" # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Create a user                      # /var/www/core/build/integration/features/provisioning-v1.feature:17
    Given As an "admin"                        # FeatureContext::asAn()
    And user "brand-new-user" does not exist   # FeatureContext::userDoesNotExist()
      Failed asserting that 403 matches expected 404.
    When sending "POST" to "/cloud/users" with # FeatureContext::sendingToWith()
      | userid   | brand-new-user |
      | password | 123456         |
    Then the OCS status code should be "100"   # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"   # FeatureContext::theHTTPStatusCodeShouldBe()
    And user "brand-new-user" exists           # FeatureContext::assureUserExists()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Create an existing user            # /var/www/core/build/integration/features/provisioning-v1.feature:27
    Given As an "admin"                        # FeatureContext::asAn()
    And user "brand-new-user" exists           # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When sending "POST" to "/cloud/users" with # FeatureContext::sendingToWith()
      | userid   | brand-new-user |
      | password | 123456         |
    Then the OCS status code should be "102"   # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"   # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Get an existing user                        # /var/www/core/build/integration/features/provisioning-v1.feature:36
    Given As an "admin"                                 # FeatureContext::asAn()
    When sending "GET" to "/cloud/users/brand-new-user" # FeatureContext::sendingTo()
    Then the OCS status code should be "100"            # FeatureContext::theOCSStatusCodeShouldBe()
      Unable to parse response body into XML: String could not be parsed as XML (GuzzleHttp\Exception\XmlParseException)
    And the HTTP status code should be "200"            # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Getting all users            # /var/www/core/build/integration/features/provisioning-v1.feature:42
    Given As an "admin"                  # FeatureContext::asAn()
    And user "brand-new-user" exists     # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "admin" exists              # FeatureContext::assureUserExists()
    When sending "GET" to "/cloud/users" # FeatureContext::sendingTo()
    Then users returned are              # FeatureContext::theUsersShouldBe()
      | brand-new-user |
      | admin          |
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Edit a user                                      # /var/www/core/build/integration/features/provisioning-v1.feature:51
    Given As an "admin"                                      # FeatureContext::asAn()
    And user "brand-new-user" exists                         # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When sending "PUT" to "/cloud/users/brand-new-user" with # FeatureContext::sendingToWith()
      | key   | quota                    |
      | value | 12MB                     |
      | key   | email                    |
      | value | brand-new-user@gmail.com |
    Then the OCS status code should be "100"                 # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                 # FeatureContext::theHTTPStatusCodeShouldBe()
    And user "brand-new-user" exists                         # FeatureContext::assureUserExists()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Create a group                      # /var/www/core/build/integration/features/provisioning-v1.feature:63
    Given As an "admin"                         # FeatureContext::asAn()
    And group "new-group" does not exist        # FeatureContext::groupDoesNotExist()
      Failed asserting that 403 matches expected 404.
    When sending "POST" to "/cloud/groups" with # FeatureContext::sendingToWith()
      | groupid  | new-group |
      | password | 123456    |
    Then the OCS status code should be "100"    # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"    # FeatureContext::theHTTPStatusCodeShouldBe()
    And group "new-group" exists                # FeatureContext::assureGroupExists()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Create a group with special characters # /var/www/core/build/integration/features/provisioning-v1.feature:73
    Given As an "admin"                            # FeatureContext::asAn()
    And group "España" does not exist              # FeatureContext::groupDoesNotExist()
      Failed asserting that 403 matches expected 404.
    When sending "POST" to "/cloud/groups" with    # FeatureContext::sendingToWith()
      | groupid  | España |
      | password | 123456 |
    Then the OCS status code should be "100"       # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"       # FeatureContext::theHTTPStatusCodeShouldBe()
    And group "España" exists                      # FeatureContext::assureGroupExists()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: adding user to a group without sending the group         # /var/www/core/build/integration/features/provisioning-v1.feature:83
    Given As an "admin"                                              # FeatureContext::asAn()
    And user "brand-new-user" exists                                 # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When sending "POST" to "/cloud/users/brand-new-user/groups" with # FeatureContext::sendingToWith()
      | groupid |  |
    Then the OCS status code should be "101"                         # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                         # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: adding user to a group which doesn't exist               # /var/www/core/build/integration/features/provisioning-v1.feature:91
    Given As an "admin"                                              # FeatureContext::asAn()
    And user "brand-new-user" exists                                 # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And group "not-group" does not exist                             # FeatureContext::groupDoesNotExist()
    When sending "POST" to "/cloud/users/brand-new-user/groups" with # FeatureContext::sendingToWith()
      | groupid | not-group |
    Then the OCS status code should be "102"                         # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                         # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: adding user to a group without privileges                # /var/www/core/build/integration/features/provisioning-v1.feature:100
    Given As an "brand-new-user"                                     # FeatureContext::asAn()
    When sending "POST" to "/cloud/users/brand-new-user/groups" with # FeatureContext::sendingToWith()
      | groupid | new-group |
    Then the OCS status code should be "997"                         # FeatureContext::theOCSStatusCodeShouldBe()
      Unable to parse response body into XML: String could not be parsed as XML (GuzzleHttp\Exception\XmlParseException)
    And the HTTP status code should be "401"                         # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: adding user to a group                                   # /var/www/core/build/integration/features/provisioning-v1.feature:107
    Given As an "admin"                                              # FeatureContext::asAn()
    And user "brand-new-user" exists                                 # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And group "new-group" exists                                     # FeatureContext::assureGroupExists()
    When sending "POST" to "/cloud/users/brand-new-user/groups" with # FeatureContext::sendingToWith()
      | groupid | new-group |
    Then the OCS status code should be "100"                         # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                         # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: getting groups of an user                          # /var/www/core/build/integration/features/provisioning-v1.feature:116
    Given As an "admin"                                        # FeatureContext::asAn()
    And user "brand-new-user" exists                           # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And group "new-group" exists                               # FeatureContext::assureGroupExists()
    When sending "GET" to "/cloud/users/brand-new-user/groups" # FeatureContext::sendingTo()
    Then groups returned are                                   # FeatureContext::theGroupsShouldBe()
      | new-group |
    And the OCS status code should be "100"                    # FeatureContext::theOCSStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: adding a user which doesn't exist to a group       # /var/www/core/build/integration/features/provisioning-v1.feature:125
    Given As an "admin"                                        # FeatureContext::asAn()
    And user "not-user" does not exist                         # FeatureContext::userDoesNotExist()
      Failed asserting that 403 matches expected 404.
    And group "new-group" exists                               # FeatureContext::assureGroupExists()
    When sending "POST" to "/cloud/users/not-user/groups" with # FeatureContext::sendingToWith()
      | groupid | new-group |
    Then the OCS status code should be "103"                   # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                   # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: getting a group                         # /var/www/core/build/integration/features/provisioning-v1.feature:134
    Given As an "admin"                             # FeatureContext::asAn()
    And group "new-group" exists                    # FeatureContext::assureGroupExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/groups [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When sending "GET" to "/cloud/groups/new-group" # FeatureContext::sendingTo()
    Then the OCS status code should be "100"        # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"        # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Getting all groups            # /var/www/core/build/integration/features/provisioning-v1.feature:141
    Given As an "admin"                   # FeatureContext::asAn()
    And group "new-group" exists          # FeatureContext::assureGroupExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/groups [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And group "admin" exists              # FeatureContext::assureGroupExists()
    When sending "GET" to "/cloud/groups" # FeatureContext::sendingTo()
    Then groups returned are              # FeatureContext::theGroupsShouldBe()
      | España    |
      | admin     |
      | new-group |
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: create a subadmin                                           # /var/www/core/build/integration/features/provisioning-v1.feature:151
    Given As an "admin"                                                 # FeatureContext::asAn()
    And user "brand-new-user" exists                                    # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And group "new-group" exists                                        # FeatureContext::assureGroupExists()
    When sending "POST" to "/cloud/users/brand-new-user/subadmins" with # FeatureContext::sendingToWith()
      | groupid | new-group |
    Then the OCS status code should be "100"                            # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                            # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: get users using a subadmin                         # /var/www/core/build/integration/features/provisioning-v1.feature:160
    Given As an "admin"                                        # FeatureContext::asAn()
    And user "brand-new-user" exists                           # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And group "new-group" exists                               # FeatureContext::assureGroupExists()
    And user "brand-new-user" belongs to group "new-group"     # FeatureContext::assureUserBelongsToGroup()
    And user "brand-new-user" is subadmin of group "new-group" # FeatureContext::userIsSubadminOfGroup()
    And As an "brand-new-user"                                 # FeatureContext::asAn()
    When sending "GET" to "/cloud/users"                       # FeatureContext::sendingTo()
    Then users returned are                                    # FeatureContext::theUsersShouldBe()
      | brand-new-user |
    And the OCS status code should be "100"                    # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                   # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: removing a user from a group which doesn't exists          # /var/www/core/build/integration/features/provisioning-v1.feature:173
    Given As an "admin"                                                # FeatureContext::asAn()
    And user "brand-new-user" exists                                   # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And group "not-group" does not exist                               # FeatureContext::groupDoesNotExist()
    When sending "DELETE" to "/cloud/users/brand-new-user/groups" with # FeatureContext::sendingToWith()
      | groupid | not-group |
    Then the OCS status code should be "102"                           # FeatureContext::theOCSStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: removing a user from a group                               # /var/www/core/build/integration/features/provisioning-v1.feature:181
    Given As an "admin"                                                # FeatureContext::asAn()
    And user "brand-new-user" exists                                   # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And group "new-group" exists                                       # FeatureContext::assureGroupExists()
    And user "brand-new-user" belongs to group "new-group"             # FeatureContext::assureUserBelongsToGroup()
    When sending "DELETE" to "/cloud/users/brand-new-user/groups" with # FeatureContext::sendingToWith()
      | groupid | new-group |
    Then the OCS status code should be "100"                           # FeatureContext::theOCSStatusCodeShouldBe()
    And user "brand-new-user" does not belong to group "new-group"     # FeatureContext::userDoesNotBelongToGroup()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: create a subadmin using a user which not exist        # /var/www/core/build/integration/features/provisioning-v1.feature:191
    Given As an "admin"                                           # FeatureContext::asAn()
    And user "not-user" does not exist                            # FeatureContext::userDoesNotExist()
      Failed asserting that 403 matches expected 404.
    And group "new-group" exists                                  # FeatureContext::assureGroupExists()
    When sending "POST" to "/cloud/users/not-user/subadmins" with # FeatureContext::sendingToWith()
      | groupid | new-group |
    Then the OCS status code should be "101"                      # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                      # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: create a subadmin using a group which not exist             # /var/www/core/build/integration/features/provisioning-v1.feature:200
    Given As an "admin"                                                 # FeatureContext::asAn()
    And user "brand-new-user" exists                                    # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And group "not-group" does not exist                                # FeatureContext::groupDoesNotExist()
    When sending "POST" to "/cloud/users/brand-new-user/subadmins" with # FeatureContext::sendingToWith()
      | groupid | not-group |
    Then the OCS status code should be "102"                            # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                            # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Getting subadmin groups                               # /var/www/core/build/integration/features/provisioning-v1.feature:209
    Given As an "admin"                                           # FeatureContext::asAn()
    And user "brand-new-user" exists                              # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And group "new-group" exists                                  # FeatureContext::assureGroupExists()
    When sending "GET" to "/cloud/users/brand-new-user/subadmins" # FeatureContext::sendingTo()
    Then subadmin groups returned are                             # FeatureContext::theSubadminGroupsShouldBe()
      | new-group |
    Then the OCS status code should be "100"                      # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                      # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Getting subadmin groups of a user which not exist # /var/www/core/build/integration/features/provisioning-v1.feature:219
    Given As an "admin"                                       # FeatureContext::asAn()
    And user "not-user" does not exist                        # FeatureContext::userDoesNotExist()
      Failed asserting that 403 matches expected 404.
    And group "new-group" exists                              # FeatureContext::assureGroupExists()
    When sending "GET" to "/cloud/users/not-user/subadmins"   # FeatureContext::sendingTo()
    Then the OCS status code should be "101"                  # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                  # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Getting subadmin users of a group                 # /var/www/core/build/integration/features/provisioning-v1.feature:227
    Given As an "admin"                                       # FeatureContext::asAn()
    And user "brand-new-user" exists                          # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And group "new-group" exists                              # FeatureContext::assureGroupExists()
    When sending "GET" to "/cloud/groups/new-group/subadmins" # FeatureContext::sendingTo()
    Then subadmin users returned are                          # FeatureContext::theSubadminUsersShouldBe()
      | brand-new-user |
    And the OCS status code should be "100"                   # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                  # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Getting subadmin users of a group which doesn't exist # /var/www/core/build/integration/features/provisioning-v1.feature:237
    Given As an "admin"                                           # FeatureContext::asAn()
    And user "brand-new-user" exists                              # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And group "not-group" does not exist                          # FeatureContext::groupDoesNotExist()
    When sending "GET" to "/cloud/groups/not-group/subadmins"     # FeatureContext::sendingTo()
    Then the OCS status code should be "101"                      # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                      # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Removing subadmin from a group                                # /var/www/core/build/integration/features/provisioning-v1.feature:245
    Given As an "admin"                                                   # FeatureContext::asAn()
    And user "brand-new-user" exists                                      # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And group "new-group" exists                                          # FeatureContext::assureGroupExists()
    And user "brand-new-user" is subadmin of group "new-group"            # FeatureContext::userIsSubadminOfGroup()
    When sending "DELETE" to "/cloud/users/brand-new-user/subadmins" with # FeatureContext::sendingToWith()
      | groupid | new-group |
    And the OCS status code should be "100"                               # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                              # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Delete a user                                  # /var/www/core/build/integration/features/provisioning-v1.feature:255
    Given As an "admin"                                    # FeatureContext::asAn()
    And user "brand-new-user" exists                       # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When sending "DELETE" to "/cloud/users/brand-new-user" # FeatureContext::sendingTo()
    Then the OCS status code should be "100"               # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"               # FeatureContext::theHTTPStatusCodeShouldBe()
    And user "brand-new-user" does not exist               # FeatureContext::userDoesNotExist()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Delete a group                             # /var/www/core/build/integration/features/provisioning-v1.feature:263
    Given As an "admin"                                # FeatureContext::asAn()
    And group "new-group" exists                       # FeatureContext::assureGroupExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/groups [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When sending "DELETE" to "/cloud/groups/new-group" # FeatureContext::sendingTo()
    Then the OCS status code should be "100"           # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"           # FeatureContext::theHTTPStatusCodeShouldBe()
    And group "new-group" does not exist               # FeatureContext::groupDoesNotExist()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Delete a group with special characters  # /var/www/core/build/integration/features/provisioning-v1.feature:271
    Given As an "admin"                             # FeatureContext::asAn()
    And group "España" exists                       # FeatureContext::assureGroupExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/groups [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When sending "DELETE" to "/cloud/groups/España" # FeatureContext::sendingTo()
    Then the OCS status code should be "100"        # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"        # FeatureContext::theHTTPStatusCodeShouldBe()
    And group "España" does not exist               # FeatureContext::groupDoesNotExist()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  @no_encryption
  Scenario: get enabled apps                           # /var/www/core/build/integration/features/provisioning-v1.feature:280
    Given As an "admin"                                # FeatureContext::asAn()
    When sending "GET" to "/cloud/apps?filter=enabled" # FeatureContext::sendingTo()
    Then the OCS status code should be "100"           # FeatureContext::theOCSStatusCodeShouldBe()
      Unable to parse response body into XML: String could not be parsed as XML (GuzzleHttp\Exception\XmlParseException)
    And the HTTP status code should be "200"           # FeatureContext::theHTTPStatusCodeShouldBe()
    And apps returned are                              # FeatureContext::theAppsShouldBe()
      | comments             |
      | dav                  |
      | federatedfilesharing |
      | federation           |
      | files                |
      | files_sharing        |
      | files_trashbin       |
      | files_versions       |
      | provisioning_api     |
      | systemtags           |
      | updatenotification   |
      | files_external       |
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: get app info                      # /var/www/core/build/integration/features/provisioning-v1.feature:299
    Given As an "admin"                       # FeatureContext::asAn()
    When sending "GET" to "/cloud/apps/files" # FeatureContext::sendingTo()
    Then the OCS status code should be "100"  # FeatureContext::theOCSStatusCodeShouldBe()
      Unable to parse response body into XML: String could not be parsed as XML (GuzzleHttp\Exception\XmlParseException)
    And the HTTP status code should be "200"  # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: disable an user                            # /var/www/core/build/integration/features/provisioning-v1.feature:321
    Given As an "admin"                                # FeatureContext::asAn()
    And user "user1" exists                            # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When sending "PUT" to "/cloud/users/user1/disable" # FeatureContext::sendingTo()
    Then the OCS status code should be "100"           # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"           # FeatureContext::theHTTPStatusCodeShouldBe()
    And user "user1" is disabled                       # FeatureContext::userIsDisabled()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: enable an user                            # /var/www/core/build/integration/features/provisioning-v1.feature:329
    Given As an "admin"                               # FeatureContext::asAn()
    And user "user1" exists                           # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And assure user "user1" is disabled               # FeatureContext::assureUserIsDisabled()
    When sending "PUT" to "/cloud/users/user1/enable" # FeatureContext::sendingTo()
    Then the OCS status code should be "100"          # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"          # FeatureContext::theHTTPStatusCodeShouldBe()
    And user "user1" is enabled                       # FeatureContext::userIsEnabled()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Subadmin should be able to enable or disable an user in their group # /var/www/core/build/integration/features/provisioning-v1.feature:338
    Given As an "admin"                                                         # FeatureContext::asAn()
    And user "subadmin" exists                                                  # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                     # FeatureContext::assureUserExists()
    And group "new-group" exists                                                # FeatureContext::assureGroupExists()
    And user "subadmin" belongs to group "new-group"                            # FeatureContext::assureUserBelongsToGroup()
    And user "user1" belongs to group "new-group"                               # FeatureContext::assureUserBelongsToGroup()
    And Assure user "subadmin" is subadmin of group "new-group"                 # FeatureContext::assureUserIsSubadminOfGroup()
    And As an "subadmin"                                                        # FeatureContext::asAn()
    When sending "PUT" to "/cloud/users/user1/disable"                          # FeatureContext::sendingTo()
    Then the OCS status code should be "100"                                    # FeatureContext::theOCSStatusCodeShouldBe()
    Then the HTTP status code should be "200"                                   # FeatureContext::theHTTPStatusCodeShouldBe()
    And As an "admin"                                                           # FeatureContext::asAn()
    And user "user1" is disabled                                                # FeatureContext::userIsDisabled()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Subadmin should not be able to enable or disable an user not in their group # /var/www/core/build/integration/features/provisioning-v1.feature:353
    Given As an "admin"                                                                 # FeatureContext::asAn()
    And user "subadmin" exists                                                          # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                             # FeatureContext::assureUserExists()
    And group "new-group" exists                                                        # FeatureContext::assureGroupExists()
    And group "another-group" exists                                                    # FeatureContext::assureGroupExists()
    And user "subadmin" belongs to group "new-group"                                    # FeatureContext::assureUserBelongsToGroup()
    And user "user1" belongs to group "another-group"                                   # FeatureContext::assureUserBelongsToGroup()
    And Assure user "subadmin" is subadmin of group "new-group"                         # FeatureContext::assureUserIsSubadminOfGroup()
    And As an "subadmin"                                                                # FeatureContext::asAn()
    When sending "PUT" to "/cloud/users/user1/disable"                                  # FeatureContext::sendingTo()
    Then the OCS status code should be "997"                                            # FeatureContext::theOCSStatusCodeShouldBe()
    Then the HTTP status code should be "401"                                           # FeatureContext::theHTTPStatusCodeShouldBe()
    And As an "admin"                                                                   # FeatureContext::asAn()
    And user "user1" is enabled                                                         # FeatureContext::userIsEnabled()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Subadmins should not be able to disable users that have admin permissions in their group # /var/www/core/build/integration/features/provisioning-v1.feature:369
    Given As an "admin"                                                                              # FeatureContext::asAn()
    And user "another-admin" exists                                                                  # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "subadmin" exists                                                                       # FeatureContext::assureUserExists()
    And group "new-group" exists                                                                     # FeatureContext::assureGroupExists()
    And user "another-admin" belongs to group "admin"                                                # FeatureContext::assureUserBelongsToGroup()
    And user "subadmin" belongs to group "new-group"                                                 # FeatureContext::assureUserBelongsToGroup()
    And user "another-admin" belongs to group "new-group"                                            # FeatureContext::assureUserBelongsToGroup()
    And Assure user "subadmin" is subadmin of group "new-group"                                      # FeatureContext::assureUserIsSubadminOfGroup()
    And As an "subadmin"                                                                             # FeatureContext::asAn()
    When sending "PUT" to "/cloud/users/another-admin/disable"                                       # FeatureContext::sendingTo()
    Then the OCS status code should be "997"                                                         # FeatureContext::theOCSStatusCodeShouldBe()
    Then the HTTP status code should be "401"                                                        # FeatureContext::theHTTPStatusCodeShouldBe()
    And As an "admin"                                                                                # FeatureContext::asAn()
    And user "another-admin" is enabled                                                              # FeatureContext::userIsEnabled()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Admin can disable another admin user               # /var/www/core/build/integration/features/provisioning-v1.feature:385
    Given As an "admin"                                        # FeatureContext::asAn()
    And user "another-admin" exists                            # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "another-admin" belongs to group "admin"          # FeatureContext::assureUserBelongsToGroup()
    When sending "PUT" to "/cloud/users/another-admin/disable" # FeatureContext::sendingTo()
    Then the OCS status code should be "100"                   # FeatureContext::theOCSStatusCodeShouldBe()
    Then the HTTP status code should be "200"                  # FeatureContext::theHTTPStatusCodeShouldBe()
    And user "another-admin" is disabled                       # FeatureContext::userIsDisabled()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Admin can enable another admin user               # /var/www/core/build/integration/features/provisioning-v1.feature:394
    Given As an "admin"                                       # FeatureContext::asAn()
    And user "another-admin" exists                           # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "another-admin" belongs to group "admin"         # FeatureContext::assureUserBelongsToGroup()
    And assure user "another-admin" is disabled               # FeatureContext::assureUserIsDisabled()
    When sending "PUT" to "/cloud/users/another-admin/enable" # FeatureContext::sendingTo()
    Then the OCS status code should be "100"                  # FeatureContext::theOCSStatusCodeShouldBe()
    Then the HTTP status code should be "200"                 # FeatureContext::theHTTPStatusCodeShouldBe()
    And user "another-admin" is enabled                       # FeatureContext::userIsEnabled()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Admin can disable subadmins in the same group       # /var/www/core/build/integration/features/provisioning-v1.feature:404
    Given As an "admin"                                         # FeatureContext::asAn()
    And user "subadmin" exists                                  # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And group "new-group" exists                                # FeatureContext::assureGroupExists()
    And user "subadmin" belongs to group "new-group"            # FeatureContext::assureUserBelongsToGroup()
    And user "admin" belongs to group "new-group"               # FeatureContext::assureUserBelongsToGroup()
    And Assure user "subadmin" is subadmin of group "new-group" # FeatureContext::assureUserIsSubadminOfGroup()
    When sending "PUT" to "/cloud/users/subadmin/disable"       # FeatureContext::sendingTo()
    Then the OCS status code should be "100"                    # FeatureContext::theOCSStatusCodeShouldBe()
    Then the HTTP status code should be "200"                   # FeatureContext::theHTTPStatusCodeShouldBe()
    And user "subadmin" is disabled                             # FeatureContext::userIsDisabled()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Admin can enable subadmins in the same group        # /var/www/core/build/integration/features/provisioning-v1.feature:416
    Given As an "admin"                                         # FeatureContext::asAn()
    And user "subadmin" exists                                  # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And group "new-group" exists                                # FeatureContext::assureGroupExists()
    And user "subadmin" belongs to group "new-group"            # FeatureContext::assureUserBelongsToGroup()
    And user "admin" belongs to group "new-group"               # FeatureContext::assureUserBelongsToGroup()
    And Assure user "subadmin" is subadmin of group "new-group" # FeatureContext::assureUserIsSubadminOfGroup()
    And assure user "another-admin" is disabled                 # FeatureContext::assureUserIsDisabled()
    When sending "PUT" to "/cloud/users/subadmin/disable"       # FeatureContext::sendingTo()
    Then the OCS status code should be "100"                    # FeatureContext::theOCSStatusCodeShouldBe()
    Then the HTTP status code should be "200"                   # FeatureContext::theHTTPStatusCodeShouldBe()
    And user "subadmin" is disabled                             # FeatureContext::userIsDisabled()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Admin user cannot disable himself                  # /var/www/core/build/integration/features/provisioning-v1.feature:429
    Given As an "admin"                                        # FeatureContext::asAn()
    And user "another-admin" exists                            # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "another-admin" belongs to group "admin"          # FeatureContext::assureUserBelongsToGroup()
    And As an "another-admin"                                  # FeatureContext::asAn()
    When sending "PUT" to "/cloud/users/another-admin/disable" # FeatureContext::sendingTo()
    Then the OCS status code should be "101"                   # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                   # FeatureContext::theHTTPStatusCodeShouldBe()
    And As an "admin"                                          # FeatureContext::asAn()
    And user "another-admin" is enabled                        # FeatureContext::userIsEnabled()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Admin user cannot enable himself                  # /var/www/core/build/integration/features/provisioning-v1.feature:440
    Given As an "admin"                                       # FeatureContext::asAn()
    And user "another-admin" exists                           # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "another-admin" belongs to group "admin"         # FeatureContext::assureUserBelongsToGroup()
    And assure user "another-admin" is disabled               # FeatureContext::assureUserIsDisabled()
    And As an "another-admin"                                 # FeatureContext::asAn()
    When sending "PUT" to "/cloud/users/another-admin/enable" # FeatureContext::sendingTo()
    And As an "admin"                                         # FeatureContext::asAn()
    Then user "another-admin" is disabled                     # FeatureContext::userIsDisabled()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: disable an user with a regular user        # /var/www/core/build/integration/features/provisioning-v1.feature:450
    Given As an "admin"                                # FeatureContext::asAn()
    And user "user1" exists                            # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user2" exists                            # FeatureContext::assureUserExists()
    And As an "user1"                                  # FeatureContext::asAn()
    When sending "PUT" to "/cloud/users/user2/disable" # FeatureContext::sendingTo()
    Then the OCS status code should be "997"           # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "401"           # FeatureContext::theHTTPStatusCodeShouldBe()
    And As an "admin"                                  # FeatureContext::asAn()
    And user "user2" is enabled                        # FeatureContext::userIsEnabled()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: enable an user with a regular user        # /var/www/core/build/integration/features/provisioning-v1.feature:461
    Given As an "admin"                               # FeatureContext::asAn()
    And user "user1" exists                           # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user2" exists                           # FeatureContext::assureUserExists()
    And assure user "user2" is disabled               # FeatureContext::assureUserIsDisabled()
    And As an "user1"                                 # FeatureContext::asAn()
    When sending "PUT" to "/cloud/users/user2/enable" # FeatureContext::sendingTo()
    Then the OCS status code should be "997"          # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "401"          # FeatureContext::theHTTPStatusCodeShouldBe()
    And As an "admin"                                 # FeatureContext::asAn()
    And user "user2" is disabled                      # FeatureContext::userIsDisabled()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Subadmin should not be able to disable himself      # /var/www/core/build/integration/features/provisioning-v1.feature:473
    Given As an "admin"                                         # FeatureContext::asAn()
    And user "subadmin" exists                                  # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And group "new-group" exists                                # FeatureContext::assureGroupExists()
    And user "subadmin" belongs to group "new-group"            # FeatureContext::assureUserBelongsToGroup()
    And Assure user "subadmin" is subadmin of group "new-group" # FeatureContext::assureUserIsSubadminOfGroup()
    And As an "subadmin"                                        # FeatureContext::asAn()
    When sending "PUT" to "/cloud/users/subadmin/disable"       # FeatureContext::sendingTo()
    Then the OCS status code should be "101"                    # FeatureContext::theOCSStatusCodeShouldBe()
    Then the HTTP status code should be "200"                   # FeatureContext::theHTTPStatusCodeShouldBe()
    And As an "admin"                                           # FeatureContext::asAn()
    And user "subadmin" is enabled                              # FeatureContext::userIsEnabled()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Subadmin should not be able to enable himself       # /var/www/core/build/integration/features/provisioning-v1.feature:486
    Given As an "admin"                                         # FeatureContext::asAn()
    And user "subadmin" exists                                  # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And group "new-group" exists                                # FeatureContext::assureGroupExists()
    And user "subadmin" belongs to group "new-group"            # FeatureContext::assureUserBelongsToGroup()
    And Assure user "subadmin" is subadmin of group "new-group" # FeatureContext::assureUserIsSubadminOfGroup()
    And assure user "subadmin" is disabled                      # FeatureContext::assureUserIsDisabled()
    And As an "subadmin"                                        # FeatureContext::asAn()
    When sending "PUT" to "/cloud/users/subadmin/enabled"       # FeatureContext::sendingTo()
    And As an "admin"                                           # FeatureContext::asAn()
    And user "subadmin" is disabled                             # FeatureContext::userIsDisabled()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: a subadmin can add users to groups the subadmin is responsible for # /var/www/core/build/integration/features/provisioning-v1.feature:498
    Given As an "admin"                                                        # FeatureContext::asAn()
    And user "subadmin" exists                                                 # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "brand-new-user" exists                                           # FeatureContext::assureUserExists()
    And group "new-group" exists                                               # FeatureContext::assureGroupExists()
    And Assure user "subadmin" is subadmin of group "new-group"                # FeatureContext::assureUserIsSubadminOfGroup()
    And As an "subadmin"                                                       # FeatureContext::asAn()
    When sending "POST" to "/cloud/users/brand-new-user/groups" with           # FeatureContext::sendingToWith()
      | groupid | new-group |
    Then the OCS status code should be "100"                                   # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                   # FeatureContext::theHTTPStatusCodeShouldBe()
    And As an "admin"                                                          # FeatureContext::asAn()
    And check that user "brand-new-user" belongs to group "new-group"          # FeatureContext::checkThatUserBelongsToGroup()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: a subadmin cannot add users to groups the subadmin is not responsible for # /var/www/core/build/integration/features/provisioning-v1.feature:512
    Given As an "admin"                                                               # FeatureContext::asAn()
    And user "other-subadmin" exists                                                  # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "brand-new-user" exists                                                  # FeatureContext::assureUserExists()
    And group "new-group" exists                                                      # FeatureContext::assureGroupExists()
    And group "other-group" exists                                                    # FeatureContext::assureGroupExists()
    And Assure user "other-subadmin" is subadmin of group "other-group"               # FeatureContext::assureUserIsSubadminOfGroup()
    And As an "other-subadmin"                                                        # FeatureContext::asAn()
    When sending "POST" to "/cloud/users/brand-new-user/groups" with                  # FeatureContext::sendingToWith()
      | groupid | new-group |
    Then the OCS status code should be "104"                                          # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                          # FeatureContext::theHTTPStatusCodeShouldBe()
    And As an "admin"                                                                 # FeatureContext::asAn()
    And check that user "brand-new-user" does not belong to group "new-group"         # FeatureContext::checkThatUserDoesNotBelongToGroup()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: a subadmin can remove users to groups the subadmin is responsible for # /var/www/core/build/integration/features/provisioning-v1.feature:527
    Given As an "admin"                                                           # FeatureContext::asAn()
    And user "subadmin" exists                                                    # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "brand-new-user" exists                                              # FeatureContext::assureUserExists()
    And group "new-group" exists                                                  # FeatureContext::assureGroupExists()
    And user "brand-new-user" belongs to group "new-group"                        # FeatureContext::assureUserBelongsToGroup()
    And Assure user "subadmin" is subadmin of group "new-group"                   # FeatureContext::assureUserIsSubadminOfGroup()
    And As an "subadmin"                                                          # FeatureContext::asAn()
    When sending "DELETE" to "/cloud/users/brand-new-user/groups" with            # FeatureContext::sendingToWith()
      | groupid | new-group |
    Then the OCS status code should be "100"                                      # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                      # FeatureContext::theHTTPStatusCodeShouldBe()
    And As an "admin"                                                             # FeatureContext::asAn()
    And check that user "brand-new-user" does not belong to group "new-group"     # FeatureContext::checkThatUserDoesNotBelongToGroup()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: a subadmin cannot remove users to groups the subadmin is not responsible for # /var/www/core/build/integration/features/provisioning-v1.feature:542
    Given As an "admin"                                                                  # FeatureContext::asAn()
    And user "other-subadmin" exists                                                     # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "brand-new-user" exists                                                     # FeatureContext::assureUserExists()
    And group "new-group" exists                                                         # FeatureContext::assureGroupExists()
    And group "other-group" exists                                                       # FeatureContext::assureGroupExists()
    And user "brand-new-user" belongs to group "new-group"                               # FeatureContext::assureUserBelongsToGroup()
    And Assure user "other-subadmin" is subadmin of group "other-group"                  # FeatureContext::assureUserIsSubadminOfGroup()
    And As an "other-subadmin"                                                           # FeatureContext::asAn()
    When sending "DELETE" to "/cloud/users/brand-new-user/groups" with                   # FeatureContext::sendingToWith()
      | groupid | new-group |
    Then the OCS status code should be "104"                                             # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                             # FeatureContext::theHTTPStatusCodeShouldBe()
    And As an "admin"                                                                    # FeatureContext::asAn()
    And check that user "brand-new-user" belongs to group "new-group"                    # FeatureContext::checkThatUserBelongsToGroup()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Making a web request with an enabled user            # /var/www/core/build/integration/features/provisioning-v1.feature:558
    Given As an "admin"                                          # FeatureContext::asAn()
    And user "user0" exists                                      # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And As an "user0"                                            # FeatureContext::asAn()
    When sending "GET" with exact url to "/index.php/apps/files" # FeatureContext::sendingToDirectUrl()
    Then the HTTP status code should be "200"                    # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Making a web request with a disabled user            # /var/www/core/build/integration/features/provisioning-v1.feature:565
    Given As an "admin"                                          # FeatureContext::asAn()
    And user "user0" exists                                      # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And assure user "user0" is disabled                          # FeatureContext::assureUserIsDisabled()
    And As an "user0"                                            # FeatureContext::asAn()
    When sending "GET" with exact url to "/index.php/apps/files" # FeatureContext::sendingToDirectUrl()
    And the HTTP status code should be "403"                     # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

Feature: provisioning

  Background:                   # /var/www/core/build/integration/features/provisioning-v2.feature:2
    Given using api version "2" # FeatureContext::usingApiVersion()

  Scenario: Getting an not existing user      # /var/www/core/build/integration/features/provisioning-v2.feature:5
    Given As an "admin"                       # FeatureContext::asAn()
    When sending "GET" to "/cloud/users/test" # FeatureContext::sendingTo()
    Then the HTTP status code should be "404" # FeatureContext::theHTTPStatusCodeShouldBe()
      Failed asserting that 403 matches expected '404'.
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

Feature: sharing

  Background:                   # /var/www/core/build/integration/features/sharing-v1.feature:2
    Given using api version "1" # FeatureContext::usingApiVersion()
    Given using old dav path    # FeatureContext::usingOldDavPath()

  Scenario: Creating a new share with user                          # /var/www/core/build/integration/features/sharing-v1.feature:6
    Given user "user0" exists                                       # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                         # FeatureContext::assureUserExists()
    And As an "user0"                                               # FeatureContext::asAn()
    When sending "POST" to "/apps/files_sharing/api/v1/shares" with # FeatureContext::sendingToWith()
      | path      | welcome.txt |
      | shareWith | user1       |
      | shareType | 0           |
    Then the OCS status code should be "100"                        # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                        # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Creating a share with a group                           # /var/www/core/build/integration/features/sharing-v1.feature:17
    Given user "user0" exists                                       # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                         # FeatureContext::assureUserExists()
    And group "sharing-group" exists                                # FeatureContext::assureGroupExists()
    And As an "user0"                                               # FeatureContext::asAn()
    When sending "POST" to "/apps/files_sharing/api/v1/shares" with # FeatureContext::sendingToWith()
      | path      | welcome.txt   |
      | shareWith | sharing-group |
      | shareType | 1             |
    Then the OCS status code should be "100"                        # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                        # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Creating a new share with user who already received a share through their group # /var/www/core/build/integration/features/sharing-v1.feature:29
    Given As an "admin"                                                                     # FeatureContext::asAn()
    And user "user0" exists                                                                 # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                                 # FeatureContext::assureUserExists()
    And group "sharing-group" exists                                                        # FeatureContext::assureGroupExists()
    And user "user1" belongs to group "sharing-group"                                       # FeatureContext::assureUserBelongsToGroup()
    And file "welcome.txt" of user "user0" is shared with group "sharing-group"             # FeatureContext::assureFileIsSharedWithGroup()
    And As an "user0"                                                                       # FeatureContext::asAn()
    Then sending "POST" to "/apps/files_sharing/api/v1/shares" with                         # FeatureContext::sendingToWith()
      | path      | welcome.txt |
      | shareWith | user1       |
      | shareType | 0           |
    Then the OCS status code should be "100"                                                # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                                # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Creating a new public share                    # /var/www/core/build/integration/features/sharing-v1.feature:44
    Given user "user0" exists                              # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And As an "user0"                                      # FeatureContext::asAn()
    When creating a share with                             # FeatureContext::creatingShare()
      | path      | welcome.txt |
      | shareType | 3           |
    Then the OCS status code should be "100"               # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"               # FeatureContext::theHTTPStatusCodeShouldBe()
    And Public shared file "welcome.txt" can be downloaded # FeatureContext::checkPublicSharedFile()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Creating a new public share with password                               # /var/www/core/build/integration/features/sharing-v1.feature:54
    Given user "user0" exists                                                       # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And As an "user0"                                                               # FeatureContext::asAn()
    When creating a share with                                                      # FeatureContext::creatingShare()
      | path      | welcome.txt |
      | shareType | 3           |
      | password  | publicpw    |
    Then the OCS status code should be "100"                                        # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                        # FeatureContext::theHTTPStatusCodeShouldBe()
    And Public shared file "welcome.txt" with password "publicpw" can be downloaded # FeatureContext::checkPublicSharedFileWithPassword()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Creating a new public share of a folder # /var/www/core/build/integration/features/sharing-v1.feature:65
    Given user "user0" exists                       # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And As an "user0"                               # FeatureContext::asAn()
    When creating a share with                      # FeatureContext::creatingShare()
      | path         | FOLDER   |
      | shareType    | 3        |
      | password     | publicpw |
      | expireDate   | +3 days  |
      | publicUpload | true     |
      | permissions  | 7        |
    Then the OCS status code should be "100"        # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"        # FeatureContext::theHTTPStatusCodeShouldBe()
    And Share fields of last share match with       # FeatureContext::checkShareFields()
      | id          | A_NUMBER             |
      | permissions | 15                   |
      | expiration  | +3 days              |
      | url         | AN_URL               |
      | token       | A_TOKEN              |
      | mimetype    | httpd/unix-directory |
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Creating a new public share with password and adding an expiration date # /var/www/core/build/integration/features/sharing-v1.feature:85
    Given user "user0" exists                                                       # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And As an "user0"                                                               # FeatureContext::asAn()
    When creating a share with                                                      # FeatureContext::creatingShare()
      | path      | welcome.txt |
      | shareType | 3           |
      | password  | publicpw    |
    And Updating last share with                                                    # FeatureContext::updatingLastShare()
      | expireDate | +3 days |
    Then the OCS status code should be "100"                                        # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                        # FeatureContext::theHTTPStatusCodeShouldBe()
    And Public shared file "welcome.txt" with password "publicpw" can be downloaded # FeatureContext::checkPublicSharedFileWithPassword()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Creating a new public share, updating its expiration date and getting its info # /var/www/core/build/integration/features/sharing-v1.feature:98
    Given user "user0" exists                                                              # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And As an "user0"                                                                      # FeatureContext::asAn()
    When creating a share with                                                             # FeatureContext::creatingShare()
      | path      | FOLDER |
      | shareType | 3      |
    And Updating last share with                                                           # FeatureContext::updatingLastShare()
      | expireDate | +3 days |
    And Getting info of last share                                                         # FeatureContext::gettingInfoOfLastShare()
    Then the OCS status code should be "100"                                               # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                               # FeatureContext::theHTTPStatusCodeShouldBe()
    And Share fields of last share match with                                              # FeatureContext::checkShareFields()
      | id                | A_NUMBER             |
      | item_type         | folder               |
      | item_source       | A_NUMBER             |
      | share_type        | 3                    |
      | file_source       | A_NUMBER             |
      | file_target       | /FOLDER              |
      | permissions       | 1                    |
      | stime             | A_NUMBER             |
      | expiration        | +3 days              |
      | token             | A_TOKEN              |
      | storage           | A_NUMBER             |
      | mail_send         | 0                    |
      | uid_owner         | user0                |
      | storage_id        | home::user0          |
      | file_parent       | A_NUMBER             |
      | displayname_owner | user0                |
      | url               | AN_URL               |
      | mimetype          | httpd/unix-directory |
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Creating a new public share, updating its password and getting its info # /var/www/core/build/integration/features/sharing-v1.feature:129
    Given user "user0" exists                                                       # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And As an "user0"                                                               # FeatureContext::asAn()
    When creating a share with                                                      # FeatureContext::creatingShare()
      | path      | FOLDER |
      | shareType | 3      |
    And Updating last share with                                                    # FeatureContext::updatingLastShare()
      | password | publicpw |
    And Getting info of last share                                                  # FeatureContext::gettingInfoOfLastShare()
    Then the OCS status code should be "100"                                        # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                        # FeatureContext::theHTTPStatusCodeShouldBe()
    And Share fields of last share match with                                       # FeatureContext::checkShareFields()
      | id                | A_NUMBER             |
      | item_type         | folder               |
      | item_source       | A_NUMBER             |
      | share_type        | 3                    |
      | file_source       | A_NUMBER             |
      | file_target       | /FOLDER              |
      | permissions       | 1                    |
      | stime             | A_NUMBER             |
      | token             | A_TOKEN              |
      | storage           | A_NUMBER             |
      | mail_send         | 0                    |
      | uid_owner         | user0                |
      | storage_id        | home::user0          |
      | file_parent       | A_NUMBER             |
      | displayname_owner | user0                |
      | url               | AN_URL               |
      | mimetype          | httpd/unix-directory |
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Creating a new public share, updating its permissions and getting its info # /var/www/core/build/integration/features/sharing-v1.feature:159
    Given user "user0" exists                                                          # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And As an "user0"                                                                  # FeatureContext::asAn()
    When creating a share with                                                         # FeatureContext::creatingShare()
      | path      | FOLDER |
      | shareType | 3      |
    And Updating last share with                                                       # FeatureContext::updatingLastShare()
      | permissions | 7 |
    And Getting info of last share                                                     # FeatureContext::gettingInfoOfLastShare()
    Then the OCS status code should be "100"                                           # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                           # FeatureContext::theHTTPStatusCodeShouldBe()
    And Share fields of last share match with                                          # FeatureContext::checkShareFields()
      | id                | A_NUMBER             |
      | item_type         | folder               |
      | item_source       | A_NUMBER             |
      | share_type        | 3                    |
      | file_source       | A_NUMBER             |
      | file_target       | /FOLDER              |
      | permissions       | 15                   |
      | stime             | A_NUMBER             |
      | token             | A_TOKEN              |
      | storage           | A_NUMBER             |
      | mail_send         | 0                    |
      | uid_owner         | user0                |
      | storage_id        | home::user0          |
      | file_parent       | A_NUMBER             |
      | displayname_owner | user0                |
      | url               | AN_URL               |
      | mimetype          | httpd/unix-directory |
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Creating a new public share, updating publicUpload option and getting its info # /var/www/core/build/integration/features/sharing-v1.feature:189
    Given user "user0" exists                                                              # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And As an "user0"                                                                      # FeatureContext::asAn()
    When creating a share with                                                             # FeatureContext::creatingShare()
      | path      | FOLDER |
      | shareType | 3      |
    And Updating last share with                                                           # FeatureContext::updatingLastShare()
      | publicUpload | true |
    And Getting info of last share                                                         # FeatureContext::gettingInfoOfLastShare()
    Then the OCS status code should be "100"                                               # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                               # FeatureContext::theHTTPStatusCodeShouldBe()
    And Share fields of last share match with                                              # FeatureContext::checkShareFields()
      | id                | A_NUMBER             |
      | item_type         | folder               |
      | item_source       | A_NUMBER             |
      | share_type        | 3                    |
      | file_source       | A_NUMBER             |
      | file_target       | /FOLDER              |
      | permissions       | 15                   |
      | stime             | A_NUMBER             |
      | token             | A_TOKEN              |
      | storage           | A_NUMBER             |
      | mail_send         | 0                    |
      | uid_owner         | user0                |
      | storage_id        | home::user0          |
      | file_parent       | A_NUMBER             |
      | displayname_owner | user0                |
      | url               | AN_URL               |
      | mimetype          | httpd/unix-directory |
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: getting all shares of a user using that user                     # /var/www/core/build/integration/features/sharing-v1.feature:219
    Given user "user0" exists                                                # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                  # FeatureContext::assureUserExists()
    And User "user0" moved file "/textfile0.txt" to "/file_to_share.txt"     # FeatureContext::userMovedFile()
    And file "file_to_share.txt" of user "user0" is shared with user "user1" # FeatureContext::assureFileIsShared()
    And As an "user0"                                                        # FeatureContext::asAn()
    When sending "GET" to "/apps/files_sharing/api/v1/shares"                # FeatureContext::sendingTo()
    Then the OCS status code should be "100"                                 # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                 # FeatureContext::theHTTPStatusCodeShouldBe()
    And File "file_to_share.txt" should be included in the response          # FeatureContext::checkSharedFileInResponse()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: getting all shares of a user using another user              # /var/www/core/build/integration/features/sharing-v1.feature:230
    Given user "user0" exists                                            # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                              # FeatureContext::assureUserExists()
    And file "textfile0.txt" of user "user0" is shared with user "user1" # FeatureContext::assureFileIsShared()
    And As an "admin"                                                    # FeatureContext::asAn()
    When sending "GET" to "/apps/files_sharing/api/v1/shares"            # FeatureContext::sendingTo()
    Then the OCS status code should be "100"                             # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                             # FeatureContext::theHTTPStatusCodeShouldBe()
    And File "textfile0.txt" should not be included in the response      # FeatureContext::checkSharedFileNotInResponse()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: getting all shares of a file                                         # /var/www/core/build/integration/features/sharing-v1.feature:240
    Given user "user0" exists                                                    # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                      # FeatureContext::assureUserExists()
    And user "user2" exists                                                      # FeatureContext::assureUserExists()
    And user "user3" exists                                                      # FeatureContext::assureUserExists()
    And file "textfile0.txt" of user "user0" is shared with user "user1"         # FeatureContext::assureFileIsShared()
    And file "textfile0.txt" of user "user0" is shared with user "user2"         # FeatureContext::assureFileIsShared()
    And As an "user0"                                                            # FeatureContext::asAn()
    When sending "GET" to "/apps/files_sharing/api/v1/shares?path=textfile0.txt" # FeatureContext::sendingTo()
    Then the OCS status code should be "100"                                     # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                     # FeatureContext::theHTTPStatusCodeShouldBe()
    And User "user1" should be included in the response                          # FeatureContext::checkSharedUserInResponse()
    And User "user2" should be included in the response                          # FeatureContext::checkSharedUserInResponse()
    And User "user3" should not be included in the response                      # FeatureContext::checkSharedUserNotInResponse()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: getting all shares of a file with reshares                                         # /var/www/core/build/integration/features/sharing-v1.feature:255
    Given user "user0" exists                                                                  # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                                    # FeatureContext::assureUserExists()
    And user "user2" exists                                                                    # FeatureContext::assureUserExists()
    And user "user3" exists                                                                    # FeatureContext::assureUserExists()
    And file "textfile0.txt" of user "user0" is shared with user "user1"                       # FeatureContext::assureFileIsShared()
    And file "textfile0 (2).txt" of user "user1" is shared with user "user2"                   # FeatureContext::assureFileIsShared()
    And As an "user0"                                                                          # FeatureContext::asAn()
    When sending "GET" to "/apps/files_sharing/api/v1/shares?reshares=true&path=textfile0.txt" # FeatureContext::sendingTo()
    Then the OCS status code should be "100"                                                   # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                                   # FeatureContext::theHTTPStatusCodeShouldBe()
    And User "user1" should be included in the response                                        # FeatureContext::checkSharedUserInResponse()
    And User "user2" should be included in the response                                        # FeatureContext::checkSharedUserInResponse()
    And User "user3" should not be included in the response                                    # FeatureContext::checkSharedUserNotInResponse()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Reshared files can be still accessed if a user in the middle removes it. # /var/www/core/build/integration/features/sharing-v1.feature:270
    Given user "user0" exists                                                        # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                          # FeatureContext::assureUserExists()
    And user "user2" exists                                                          # FeatureContext::assureUserExists()
    And user "user3" exists                                                          # FeatureContext::assureUserExists()
    And file "textfile0.txt" of user "user0" is shared with user "user1"             # FeatureContext::assureFileIsShared()
    And User "user1" moved file "/textfile0 (2).txt" to "/textfile0_shared.txt"      # FeatureContext::userMovedFile()
    And file "textfile0_shared.txt" of user "user1" is shared with user "user2"      # FeatureContext::assureFileIsShared()
    And file "textfile0_shared.txt" of user "user2" is shared with user "user3"      # FeatureContext::assureFileIsShared()
    And As an "user1"                                                                # FeatureContext::asAn()
    When User "user1" deletes file "/textfile0_shared.txt"                           # FeatureContext::userDeletesFile()
    And As an "user3"                                                                # FeatureContext::asAn()
    And Downloading file "/textfile0_shared.txt" with range "bytes=1-7"              # FeatureContext::downloadFileWithRange()
    Then Downloaded content should be "wnCloud"                                      # FeatureContext::downloadedContentShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: getting share info of a share                                    # /var/www/core/build/integration/features/sharing-v1.feature:285
    Given user "user0" exists                                                # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                  # FeatureContext::assureUserExists()
    And User "user0" moved file "/textfile0.txt" to "/file_to_share.txt"     # FeatureContext::userMovedFile()
    And file "file_to_share.txt" of user "user0" is shared with user "user1" # FeatureContext::assureFileIsShared()
    And As an "user0"                                                        # FeatureContext::asAn()
    When Getting info of last share                                          # FeatureContext::gettingInfoOfLastShare()
    Then the OCS status code should be "100"                                 # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                 # FeatureContext::theHTTPStatusCodeShouldBe()
    And Share fields of last share match with                                # FeatureContext::checkShareFields()
      | id                     | A_NUMBER           |
      | item_type              | file               |
      | item_source            | A_NUMBER           |
      | share_type             | 0                  |
      | share_with             | user1              |
      | file_source            | A_NUMBER           |
      | file_target            | /file_to_share.txt |
      | path                   | /file_to_share.txt |
      | permissions            | 19                 |
      | stime                  | A_NUMBER           |
      | storage                | A_NUMBER           |
      | mail_send              | 0                  |
      | uid_owner              | user0              |
      | storage_id             | home::user0        |
      | file_parent            | A_NUMBER           |
      | share_with_displayname | user1              |
      | displayname_owner      | user0              |
      | mimetype               | text/plain         |
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: keep group permissions in sync                                  # /var/www/core/build/integration/features/sharing-v1.feature:314
    Given As an "admin"                                                     # FeatureContext::asAn()
    Given user "user0" exists                                               # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                 # FeatureContext::assureUserExists()
    And group "group1" exists                                               # FeatureContext::assureGroupExists()
    And user "user1" belongs to group "group1"                              # FeatureContext::assureUserBelongsToGroup()
    And file "textfile0.txt" of user "user0" is shared with group "group1"  # FeatureContext::assureFileIsSharedWithGroup()
    And User "user1" moved file "/textfile0.txt" to "/FOLDER/textfile0.txt" # FeatureContext::userMovedFile()
    And As an "user0"                                                       # FeatureContext::asAn()
    When Updating last share with                                           # FeatureContext::updatingLastShare()
      | permissions | 1 |
    And Getting info of last share                                          # FeatureContext::gettingInfoOfLastShare()
    Then the OCS status code should be "100"                                # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                # FeatureContext::theHTTPStatusCodeShouldBe()
    And Share fields of last share match with                               # FeatureContext::checkShareFields()
      | id                | A_NUMBER       |
      | item_type         | file           |
      | item_source       | A_NUMBER       |
      | share_type        | 1              |
      | file_source       | A_NUMBER       |
      | file_target       | /textfile0.txt |
      | permissions       | 1              |
      | stime             | A_NUMBER       |
      | storage           | A_NUMBER       |
      | mail_send         | 0              |
      | uid_owner         | user0          |
      | storage_id        | home::user0    |
      | file_parent       | A_NUMBER       |
      | displayname_owner | user0          |
      | mimetype          | text/plain     |
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Sharee can see the share                                              # /var/www/core/build/integration/features/sharing-v1.feature:345
    Given user "user0" exists                                                     # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                       # FeatureContext::assureUserExists()
    And file "textfile0.txt" of user "user0" is shared with user "user1"          # FeatureContext::assureFileIsShared()
    And As an "user1"                                                             # FeatureContext::asAn()
    When sending "GET" to "/apps/files_sharing/api/v1/shares?shared_with_me=true" # FeatureContext::sendingTo()
    Then the OCS status code should be "100"                                      # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                      # FeatureContext::theHTTPStatusCodeShouldBe()
    And last share_id is included in the answer                                   # FeatureContext::checkingLastShareIDIsIncluded()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Sharee can see the filtered share                                                            # /var/www/core/build/integration/features/sharing-v1.feature:355
    Given user "user0" exists                                                                            # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                                              # FeatureContext::assureUserExists()
    And file "textfile0.txt" of user "user0" is shared with user "user1"                                 # FeatureContext::assureFileIsShared()
    And file "textfile1.txt" of user "user0" is shared with user "user1"                                 # FeatureContext::assureFileIsShared()
    And As an "user1"                                                                                    # FeatureContext::asAn()
    When sending "GET" to "/apps/files_sharing/api/v1/shares?shared_with_me=true&path=textfile1 (2).txt" # FeatureContext::sendingTo()
    Then the OCS status code should be "100"                                                             # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                                             # FeatureContext::theHTTPStatusCodeShouldBe()
    And last share_id is included in the answer                                                          # FeatureContext::checkingLastShareIDIsIncluded()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Sharee can't see the share that is filtered out                                              # /var/www/core/build/integration/features/sharing-v1.feature:366
    Given user "user0" exists                                                                            # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                                              # FeatureContext::assureUserExists()
    And file "textfile0.txt" of user "user0" is shared with user "user1"                                 # FeatureContext::assureFileIsShared()
    And file "textfile1.txt" of user "user0" is shared with user "user1"                                 # FeatureContext::assureFileIsShared()
    And As an "user1"                                                                                    # FeatureContext::asAn()
    When sending "GET" to "/apps/files_sharing/api/v1/shares?shared_with_me=true&path=textfile0 (2).txt" # FeatureContext::sendingTo()
    Then the OCS status code should be "100"                                                             # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                                             # FeatureContext::theHTTPStatusCodeShouldBe()
    And last share_id is not included in the answer                                                      # FeatureContext::checkingLastShareIDIsNotIncluded()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Sharee can see the group share                                        # /var/www/core/build/integration/features/sharing-v1.feature:377
    Given As an "admin"                                                           # FeatureContext::asAn()
    And user "user0" exists                                                       # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                       # FeatureContext::assureUserExists()
    And group "group0" exists                                                     # FeatureContext::assureGroupExists()
    And user "user1" belongs to group "group0"                                    # FeatureContext::assureUserBelongsToGroup()
    And file "textfile0.txt" of user "user0" is shared with group "group0"        # FeatureContext::assureFileIsSharedWithGroup()
    And As an "user1"                                                             # FeatureContext::asAn()
    When sending "GET" to "/apps/files_sharing/api/v1/shares?shared_with_me=true" # FeatureContext::sendingTo()
    Then the OCS status code should be "100"                                      # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                      # FeatureContext::theHTTPStatusCodeShouldBe()
    And last share_id is included in the answer                                   # FeatureContext::checkingLastShareIDIsIncluded()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: User is not allowed to reshare file # /var/www/core/build/integration/features/sharing-v1.feature:390
    As an "admin"
    Given user "user0" exists                   # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                     # FeatureContext::assureUserExists()
    And user "user2" exists                     # FeatureContext::assureUserExists()
    And As an "user0"                           # FeatureContext::asAn()
    And creating a share with                   # FeatureContext::creatingShare()
      | path        | /textfile0.txt |
      | shareType   | 0              |
      | shareWith   | user1          |
      | permissions | 8              |
    And As an "user1"                           # FeatureContext::asAn()
    When creating a share with                  # FeatureContext::creatingShare()
      | path        | /textfile0 (2).txt |
      | shareType   | 0                  |
      | shareWith   | user2              |
      | permissions | 31                 |
    Then the OCS status code should be "404"    # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"    # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: User is not allowed to reshare file with more permissions # /var/www/core/build/integration/features/sharing-v1.feature:410
    As an "admin"
    Given user "user0" exists                                         # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                           # FeatureContext::assureUserExists()
    And user "user2" exists                                           # FeatureContext::assureUserExists()
    And As an "user0"                                                 # FeatureContext::asAn()
    And creating a share with                                         # FeatureContext::creatingShare()
      | path        | /textfile0.txt |
      | shareType   | 0              |
      | shareWith   | user1          |
      | permissions | 16             |
    And As an "user1"                                                 # FeatureContext::asAn()
    When creating a share with                                        # FeatureContext::creatingShare()
      | path        | /textfile0 (2).txt |
      | shareType   | 0                  |
      | shareWith   | user2              |
      | permissions | 31                 |
    Then the OCS status code should be "404"                          # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                          # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Get a share with a user which didn't received the share      # /var/www/core/build/integration/features/sharing-v1.feature:430
    Given user "user0" exists                                            # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                              # FeatureContext::assureUserExists()
    And user "user2" exists                                              # FeatureContext::assureUserExists()
    And file "textfile0.txt" of user "user0" is shared with user "user1" # FeatureContext::assureFileIsShared()
    And As an "user2"                                                    # FeatureContext::asAn()
    When Getting info of last share                                      # FeatureContext::gettingInfoOfLastShare()
    Then the OCS status code should be "404"                             # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                             # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Share of folder and sub-folder to same user - core#20645        # /var/www/core/build/integration/features/sharing-v1.feature:440
    Given As an "admin"                                                     # FeatureContext::asAn()
    And user "user0" exists                                                 # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                 # FeatureContext::assureUserExists()
    And group "group0" exists                                               # FeatureContext::assureGroupExists()
    And user "user1" belongs to group "group0"                              # FeatureContext::assureUserBelongsToGroup()
    And file "/PARENT" of user "user0" is shared with user "user1"          # FeatureContext::assureFileIsShared()
    When file "/PARENT/CHILD" of user "user0" is shared with group "group0" # FeatureContext::assureFileIsSharedWithGroup()
    Then user "user1" should see following elements                         # FeatureContext::checkElementList()
      | /FOLDER/           |
      | /PARENT/           |
      | /CHILD/            |
      | /PARENT/parent.txt |
      | /CHILD/child.txt   |
    And the HTTP status code should be "200"                                # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Share a file by multiple channels                                                                   # /var/www/core/build/integration/features/sharing-v1.feature:456
    Given As an "admin"                                                                                         # FeatureContext::asAn()
    And user "user0" exists                                                                                     # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                                                     # FeatureContext::assureUserExists()
    And user "user2" exists                                                                                     # FeatureContext::assureUserExists()
    And group "group0" exists                                                                                   # FeatureContext::assureGroupExists()
    And user "user1" belongs to group "group0"                                                                  # FeatureContext::assureUserBelongsToGroup()
    And user "user2" belongs to group "group0"                                                                  # FeatureContext::assureUserBelongsToGroup()
    And user "user0" created a folder "/common"                                                                 # FeatureContext::userCreatedAFolder()
    And user "user0" created a folder "/common/sub"                                                             # FeatureContext::userCreatedAFolder()
    And file "common" of user "user0" is shared with group "group0"                                             # FeatureContext::assureFileIsSharedWithGroup()
    And file "textfile0.txt" of user "user1" is shared with user "user2"                                        # FeatureContext::assureFileIsShared()
    And User "user1" moved file "/textfile0.txt" to "/common/textfile0.txt"                                     # FeatureContext::userMovedFile()
    And User "user1" moved file "/common/textfile0.txt" to "/common/sub/textfile0.txt"                          # FeatureContext::userMovedFile()
    And As an "user2"                                                                                           # FeatureContext::asAn()
    When Downloading file "/common/sub/textfile0.txt" with range "bytes=9-17"                                   # FeatureContext::downloadFileWithRange()
    Then Downloaded content should be "test text"                                                               # FeatureContext::downloadedContentShouldBe()
    And Downloaded content when downloading file "/textfile0.txt" with range "bytes=9-17" should be "test text" # FeatureContext::downloadedContentWhenDownloadindShouldBe()
    And user "user2" should see following elements                                                              # FeatureContext::checkElementList()
      | /common/sub/textfile0.txt |
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Share a file by multiple channels                                          # /var/www/core/build/integration/features/sharing-v1.feature:477
    Given As an "admin"                                                                # FeatureContext::asAn()
    And user "user0" exists                                                            # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                            # FeatureContext::assureUserExists()
    And user "user2" exists                                                            # FeatureContext::assureUserExists()
    And group "group0" exists                                                          # FeatureContext::assureGroupExists()
    And user "user1" belongs to group "group0"                                         # FeatureContext::assureUserBelongsToGroup()
    And user "user2" belongs to group "group0"                                         # FeatureContext::assureUserBelongsToGroup()
    And user "user0" created a folder "/common"                                        # FeatureContext::userCreatedAFolder()
    And user "user0" created a folder "/common/sub"                                    # FeatureContext::userCreatedAFolder()
    And file "common" of user "user0" is shared with group "group0"                    # FeatureContext::assureFileIsSharedWithGroup()
    And file "textfile0.txt" of user "user1" is shared with user "user2"               # FeatureContext::assureFileIsShared()
    And User "user1" moved file "/textfile0.txt" to "/common/textfile0.txt"            # FeatureContext::userMovedFile()
    And User "user1" moved file "/common/textfile0.txt" to "/common/sub/textfile0.txt" # FeatureContext::userMovedFile()
    And As an "user2"                                                                  # FeatureContext::asAn()
    When Downloading file "/textfile0.txt" with range "bytes=9-17"                     # FeatureContext::downloadFileWithRange()
    Then Downloaded content should be "test text"                                      # FeatureContext::downloadedContentShouldBe()
    And user "user2" should see following elements                                     # FeatureContext::checkElementList()
      | /common/sub/textfile0.txt |
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Delete all group shares                                               # /var/www/core/build/integration/features/sharing-v1.feature:497
    Given As an "admin"                                                           # FeatureContext::asAn()
    And user "user0" exists                                                       # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                       # FeatureContext::assureUserExists()
    And group "group1" exists                                                     # FeatureContext::assureGroupExists()
    And user "user1" belongs to group "group1"                                    # FeatureContext::assureUserBelongsToGroup()
    And file "textfile0.txt" of user "user0" is shared with group "group1"        # FeatureContext::assureFileIsSharedWithGroup()
    And User "user1" moved file "/textfile0.txt" to "/FOLDER/textfile0.txt"       # FeatureContext::userMovedFile()
    And As an "user0"                                                             # FeatureContext::asAn()
    And Deleting last share                                                       # FeatureContext::deletingLastShare()
    And As an "user1"                                                             # FeatureContext::asAn()
    When sending "GET" to "/apps/files_sharing/api/v1/shares?shared_with_me=true" # FeatureContext::sendingTo()
    Then the OCS status code should be "100"                                      # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                      # FeatureContext::theHTTPStatusCodeShouldBe()
    And last share_id is not included in the answer                               # FeatureContext::checkingLastShareIDIsNotIncluded()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: delete a share                                               # /var/www/core/build/integration/features/sharing-v1.feature:513
    Given user "user0" exists                                            # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                              # FeatureContext::assureUserExists()
    And file "textfile0.txt" of user "user0" is shared with user "user1" # FeatureContext::assureFileIsShared()
    And As an "user0"                                                    # FeatureContext::asAn()
    When Deleting last share                                             # FeatureContext::deletingLastShare()
    Then the OCS status code should be "100"                             # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                             # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Keep usergroup shares (#22143)                      # /var/www/core/build/integration/features/sharing-v1.feature:522
    Given As an "admin"                                         # FeatureContext::asAn()
    And user "user0" exists                                     # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                     # FeatureContext::assureUserExists()
    And user "user2" exists                                     # FeatureContext::assureUserExists()
    And group "group" exists                                    # FeatureContext::assureGroupExists()
    And user "user1" belongs to group "group"                   # FeatureContext::assureUserBelongsToGroup()
    And user "user2" belongs to group "group"                   # FeatureContext::assureUserBelongsToGroup()
    And user "user0" created a folder "/TMP"                    # FeatureContext::userCreatedAFolder()
    And file "TMP" of user "user0" is shared with group "group" # FeatureContext::assureFileIsSharedWithGroup()
    And user "user1" created a folder "/myFOLDER"               # FeatureContext::userCreatedAFolder()
    And User "user1" moves file "/TMP" to "/myFOLDER/myTMP"     # FeatureContext::userMovesFile()
    And user "user2" does not exist                             # FeatureContext::userDoesNotExist()
    And user "user1" should see following elements              # FeatureContext::checkElementList()
      | /myFOLDER/myTMP/ |
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Check quota of owners parent directory of a shared file     # /var/www/core/build/integration/features/sharing-v1.feature:538
    Given using old dav path                                            # FeatureContext::usingOldDavPath()
    And As an "admin"                                                   # FeatureContext::asAn()
    And user "user0" exists                                             # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                             # FeatureContext::assureUserExists()
    And user "user1" has a quota of "0"                                 # FeatureContext::userHasAQuotaOf()
    And User "user0" moved file "/welcome.txt" to "/myfile.txt"         # FeatureContext::userMovedFile()
    And file "myfile.txt" of user "user0" is shared with user "user1"   # FeatureContext::assureFileIsShared()
    When User "user1" uploads file "data/textfile.txt" to "/myfile.txt" # FeatureContext::userUploadsAFileTo()
    Then the HTTP status code should be "204"                           # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Don't allow sharing of the root  # /var/www/core/build/integration/features/sharing-v1.feature:549
    Given user "user0" exists                # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And As an "user0"                        # FeatureContext::asAn()
    When creating a share with               # FeatureContext::creatingShare()
      | path      | / |
      | shareType | 3 |
    Then the OCS status code should be "403" # FeatureContext::theOCSStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Allow modification of reshare                      # /var/www/core/build/integration/features/sharing-v1.feature:557
    Given user "user0" exists                                  # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                    # FeatureContext::assureUserExists()
    And user "user2" exists                                    # FeatureContext::assureUserExists()
    And user "user0" created a folder "/TMP"                   # FeatureContext::userCreatedAFolder()
    And file "TMP" of user "user0" is shared with user "user1" # FeatureContext::assureFileIsShared()
    And file "TMP" of user "user1" is shared with user "user2" # FeatureContext::assureFileIsShared()
    And As an "user1"                                          # FeatureContext::asAn()
    When Updating last share with                              # FeatureContext::updatingLastShare()
      | permissions | 1 |
    Then the OCS status code should be "100"                   # FeatureContext::theOCSStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Do not allow reshare to exceed permissions # /var/www/core/build/integration/features/sharing-v1.feature:569
    Given user "user0" exists                          # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                            # FeatureContext::assureUserExists()
    And user "user2" exists                            # FeatureContext::assureUserExists()
    And user "user0" created a folder "/TMP"           # FeatureContext::userCreatedAFolder()
    And As an "user0"                                  # FeatureContext::asAn()
    And creating a share with                          # FeatureContext::creatingShare()
      | path        | /TMP  |
      | shareType   | 0     |
      | shareWith   | user1 |
      | permissions | 21    |
    And As an "user1"                                  # FeatureContext::asAn()
    And creating a share with                          # FeatureContext::creatingShare()
      | path        | /TMP  |
      | shareType   | 0     |
      | shareWith   | user2 |
      | permissions | 21    |
    When Updating last share with                      # FeatureContext::updatingLastShare()
      | permissions | 31 |
    Then the OCS status code should be "404"           # FeatureContext::theOCSStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Only allow 1 link share per file/folder # /var/www/core/build/integration/features/sharing-v1.feature:590
    Given user "user0" exists                       # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And As an "user0"                               # FeatureContext::asAn()
    And creating a share with                       # FeatureContext::creatingShare()
      | path      | welcome.txt |
      | shareType | 3           |
    When save last share id                         # FeatureContext::saveLastShareId()
    And creating a share with                       # FeatureContext::creatingShare()
      | path      | welcome.txt |
      | shareType | 3           |
    Then share ids should match                     # FeatureContext::shareIdsShouldMatch()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Correct webdav share-permissions for owned file                                                                           # /var/www/core/build/integration/features/sharing-v1.feature:602
    Given user "user0" exists                                                                                                         # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And User "user0" uploads file with content "foo" to "/tmp.txt"                                                                    # FeatureContext::userUploadsAFileWithContentTo()
    When as "user0" gets properties of folder "/tmp.txt" with                                                                         # FeatureContext::asGetsPropertiesOfFolderWith()
      | {http://open-collaboration-services.org/ns}share-permissions |
    Then the single response should contain a property "{http://open-collaboration-services.org/ns}share-permissions" with value "19" # FeatureContext::theSingleResponseShouldContainAPropertyWithValue()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Correct webdav share-permissions for received file with edit and reshare permissions                                      # /var/www/core/build/integration/features/sharing-v1.feature:609
    Given user "user0" exists                                                                                                         # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                                                                           # FeatureContext::assureUserExists()
    And User "user0" uploads file with content "foo" to "/tmp.txt"                                                                    # FeatureContext::userUploadsAFileWithContentTo()
    And file "/tmp.txt" of user "user0" is shared with user "user1"                                                                   # FeatureContext::assureFileIsShared()
    When as "user1" gets properties of folder "/tmp.txt" with                                                                         # FeatureContext::asGetsPropertiesOfFolderWith()
      | {http://open-collaboration-services.org/ns}share-permissions |
    Then the single response should contain a property "{http://open-collaboration-services.org/ns}share-permissions" with value "19" # FeatureContext::theSingleResponseShouldContainAPropertyWithValue()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Correct webdav share-permissions for received file with edit permissions but no reshare permissions                      # /var/www/core/build/integration/features/sharing-v1.feature:618
    Given user "user0" exists                                                                                                        # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                                                                          # FeatureContext::assureUserExists()
    And User "user0" uploads file with content "foo" to "/tmp.txt"                                                                   # FeatureContext::userUploadsAFileWithContentTo()
    And file "tmp.txt" of user "user0" is shared with user "user1"                                                                   # FeatureContext::assureFileIsShared()
    And As an "user0"                                                                                                                # FeatureContext::asAn()
    And Updating last share with                                                                                                     # FeatureContext::updatingLastShare()
      | permissions | 3 |
    When as "user1" gets properties of folder "/tmp.txt" with                                                                        # FeatureContext::asGetsPropertiesOfFolderWith()
      | {http://open-collaboration-services.org/ns}share-permissions |
    Then the single response should contain a property "{http://open-collaboration-services.org/ns}share-permissions" with value "3" # FeatureContext::theSingleResponseShouldContainAPropertyWithValue()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Correct webdav share-permissions for received file with reshare permissions but no edit permissions                       # /var/www/core/build/integration/features/sharing-v1.feature:630
    Given user "user0" exists                                                                                                         # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                                                                           # FeatureContext::assureUserExists()
    And User "user0" uploads file with content "foo" to "/tmp.txt"                                                                    # FeatureContext::userUploadsAFileWithContentTo()
    And file "tmp.txt" of user "user0" is shared with user "user1"                                                                    # FeatureContext::assureFileIsShared()
    And As an "user0"                                                                                                                 # FeatureContext::asAn()
    And Updating last share with                                                                                                      # FeatureContext::updatingLastShare()
      | permissions | 17 |
    When as "user1" gets properties of folder "/tmp.txt" with                                                                         # FeatureContext::asGetsPropertiesOfFolderWith()
      | {http://open-collaboration-services.org/ns}share-permissions |
    Then the single response should contain a property "{http://open-collaboration-services.org/ns}share-permissions" with value "17" # FeatureContext::theSingleResponseShouldContainAPropertyWithValue()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Correct webdav share-permissions for owned folder                                                                         # /var/www/core/build/integration/features/sharing-v1.feature:642
    Given user "user0" exists                                                                                                         # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user0" created a folder "/tmp"                                                                                          # FeatureContext::userCreatedAFolder()
    When as "user0" gets properties of folder "/" with                                                                                # FeatureContext::asGetsPropertiesOfFolderWith()
      | {http://open-collaboration-services.org/ns}share-permissions |
    Then the single response should contain a property "{http://open-collaboration-services.org/ns}share-permissions" with value "31" # FeatureContext::theSingleResponseShouldContainAPropertyWithValue()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Correct webdav share-permissions for received folder with all permissions                                                 # /var/www/core/build/integration/features/sharing-v1.feature:649
    Given user "user0" exists                                                                                                         # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                                                                           # FeatureContext::assureUserExists()
    And user "user0" created a folder "/tmp"                                                                                          # FeatureContext::userCreatedAFolder()
    And file "/tmp" of user "user0" is shared with user "user1"                                                                       # FeatureContext::assureFileIsShared()
    When as "user1" gets properties of folder "/tmp" with                                                                             # FeatureContext::asGetsPropertiesOfFolderWith()
      | {http://open-collaboration-services.org/ns}share-permissions |
    Then the single response should contain a property "{http://open-collaboration-services.org/ns}share-permissions" with value "31" # FeatureContext::theSingleResponseShouldContainAPropertyWithValue()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Correct webdav share-permissions for received folder with all permissions but edit                                        # /var/www/core/build/integration/features/sharing-v1.feature:658
    Given user "user0" exists                                                                                                         # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                                                                           # FeatureContext::assureUserExists()
    And user "user0" created a folder "/tmp"                                                                                          # FeatureContext::userCreatedAFolder()
    And file "/tmp" of user "user0" is shared with user "user1"                                                                       # FeatureContext::assureFileIsShared()
    And As an "user0"                                                                                                                 # FeatureContext::asAn()
    And Updating last share with                                                                                                      # FeatureContext::updatingLastShare()
      | permissions | 29 |
    When as "user1" gets properties of folder "/tmp" with                                                                             # FeatureContext::asGetsPropertiesOfFolderWith()
      | {http://open-collaboration-services.org/ns}share-permissions |
    Then the single response should contain a property "{http://open-collaboration-services.org/ns}share-permissions" with value "29" # FeatureContext::theSingleResponseShouldContainAPropertyWithValue()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Correct webdav share-permissions for received folder with all permissions but create                                      # /var/www/core/build/integration/features/sharing-v1.feature:670
    Given user "user0" exists                                                                                                         # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                                                                           # FeatureContext::assureUserExists()
    And user "user0" created a folder "/tmp"                                                                                          # FeatureContext::userCreatedAFolder()
    And file "/tmp" of user "user0" is shared with user "user1"                                                                       # FeatureContext::assureFileIsShared()
    And As an "user0"                                                                                                                 # FeatureContext::asAn()
    And Updating last share with                                                                                                      # FeatureContext::updatingLastShare()
      | permissions | 27 |
    When as "user1" gets properties of folder "/tmp" with                                                                             # FeatureContext::asGetsPropertiesOfFolderWith()
      | {http://open-collaboration-services.org/ns}share-permissions |
    Then the single response should contain a property "{http://open-collaboration-services.org/ns}share-permissions" with value "27" # FeatureContext::theSingleResponseShouldContainAPropertyWithValue()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Correct webdav share-permissions for received folder with all permissions but delete                                      # /var/www/core/build/integration/features/sharing-v1.feature:682
    Given user "user0" exists                                                                                                         # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                                                                           # FeatureContext::assureUserExists()
    And user "user0" created a folder "/tmp"                                                                                          # FeatureContext::userCreatedAFolder()
    And file "/tmp" of user "user0" is shared with user "user1"                                                                       # FeatureContext::assureFileIsShared()
    And As an "user0"                                                                                                                 # FeatureContext::asAn()
    And Updating last share with                                                                                                      # FeatureContext::updatingLastShare()
      | permissions | 23 |
    When as "user1" gets properties of folder "/tmp" with                                                                             # FeatureContext::asGetsPropertiesOfFolderWith()
      | {http://open-collaboration-services.org/ns}share-permissions |
    Then the single response should contain a property "{http://open-collaboration-services.org/ns}share-permissions" with value "23" # FeatureContext::theSingleResponseShouldContainAPropertyWithValue()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Correct webdav share-permissions for received folder with all permissions but share                                       # /var/www/core/build/integration/features/sharing-v1.feature:694
    Given user "user0" exists                                                                                                         # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                                                                           # FeatureContext::assureUserExists()
    And user "user0" created a folder "/tmp"                                                                                          # FeatureContext::userCreatedAFolder()
    And file "/tmp" of user "user0" is shared with user "user1"                                                                       # FeatureContext::assureFileIsShared()
    And As an "user0"                                                                                                                 # FeatureContext::asAn()
    And Updating last share with                                                                                                      # FeatureContext::updatingLastShare()
      | permissions | 15 |
    When as "user1" gets properties of folder "/tmp" with                                                                             # FeatureContext::asGetsPropertiesOfFolderWith()
      | {http://open-collaboration-services.org/ns}share-permissions |
    Then the single response should contain a property "{http://open-collaboration-services.org/ns}share-permissions" with value "15" # FeatureContext::theSingleResponseShouldContainAPropertyWithValue()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: unique target names for incoming shares              # /var/www/core/build/integration/features/sharing-v1.feature:706
    Given user "user0" exists                                    # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                      # FeatureContext::assureUserExists()
    And user "user2" exists                                      # FeatureContext::assureUserExists()
    And user "user0" created a folder "/foo"                     # FeatureContext::userCreatedAFolder()
    And user "user1" created a folder "/foo"                     # FeatureContext::userCreatedAFolder()
    When file "/foo" of user "user0" is shared with user "user2" # FeatureContext::assureFileIsShared()
    And file "/foo" of user "user1" is shared with user "user2"  # FeatureContext::assureFileIsShared()
    Then user "user2" should see following elements              # FeatureContext::checkElementList()
      | /foo/       |
      | /foo%20(2)/ |
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Creating a new share with a disabled user               # /var/www/core/build/integration/features/sharing-v1.feature:718
    Given As an "admin"                                             # FeatureContext::asAn()
    And user "user0" exists                                         # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                         # FeatureContext::assureUserExists()
    And assure user "user0" is disabled                             # FeatureContext::assureUserIsDisabled()
    And As an "user0"                                               # FeatureContext::asAn()
    When sending "POST" to "/apps/files_sharing/api/v1/shares" with # FeatureContext::sendingToWith()
      | path      | welcome.txt |
      | shareWith | user1       |
      | shareType | 0           |
    Then the OCS status code should be "997"                        # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "401"                        # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Merging shares for recipient when shared from outside with group and member # /var/www/core/build/integration/features/sharing-v1.feature:731
    Given using old dav path                                                            # FeatureContext::usingOldDavPath()
    And As an "admin"                                                                   # FeatureContext::asAn()
    And user "user0" exists                                                             # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                             # FeatureContext::assureUserExists()
    And group "group1" exists                                                           # FeatureContext::assureGroupExists()
    And user "user1" belongs to group "group1"                                          # FeatureContext::assureUserBelongsToGroup()
    And user "user0" created a folder "/merge-test-outside"                             # FeatureContext::userCreatedAFolder()
    When folder "/merge-test-outside" of user "user0" is shared with group "group1"     # FeatureContext::assureFileIsSharedWithGroup()
    And folder "/merge-test-outside" of user "user0" is shared with user "user1"        # FeatureContext::assureFileIsShared()
    Then as "user1" the folder "/merge-test-outside" exists                             # FeatureContext::asTheFileOrFolderExists()
    And as "user1" the folder "/merge-test-outside (2)" does not exist                  # FeatureContext::asTheFileOrFolderDoesNotExist()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Merging shares for recipient when shared from outside with group and member with different permissions # /var/www/core/build/integration/features/sharing-v1.feature:744
    Given As an "admin"                                                                                            # FeatureContext::asAn()
    And user "user0" exists                                                                                        # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                                                        # FeatureContext::assureUserExists()
    And group "group1" exists                                                                                      # FeatureContext::assureGroupExists()
    And user "user1" belongs to group "group1"                                                                     # FeatureContext::assureUserBelongsToGroup()
    And user "user0" created a folder "/merge-test-outside-perms"                                                  # FeatureContext::userCreatedAFolder()
    When folder "/merge-test-outside-perms" of user "user0" is shared with group "group1" with permissions 1       # FeatureContext::assureFileIsSharedWithGroup()
    And folder "/merge-test-outside-perms" of user "user0" is shared with user "user1" with permissions 31         # FeatureContext::assureFileIsShared()
    Then as "user1" gets properties of folder "/merge-test-outside-perms" with                                     # FeatureContext::asGetsPropertiesOfFolderWith()
      | {http://owncloud.org/ns}permissions |
    And the single response should contain a property "{http://owncloud.org/ns}permissions" with value "SRDNVCK"   # FeatureContext::theSingleResponseShouldContainAPropertyWithValue()
    And as "user1" the folder "/merge-test-outside-perms (2)" does not exist                                       # FeatureContext::asTheFileOrFolderDoesNotExist()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Merging shares for recipient when shared from outside with two groups             # /var/www/core/build/integration/features/sharing-v1.feature:758
    Given As an "admin"                                                                       # FeatureContext::asAn()
    And user "user0" exists                                                                   # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                                   # FeatureContext::assureUserExists()
    And group "group1" exists                                                                 # FeatureContext::assureGroupExists()
    And group "group2" exists                                                                 # FeatureContext::assureGroupExists()
    And user "user1" belongs to group "group1"                                                # FeatureContext::assureUserBelongsToGroup()
    And user "user1" belongs to group "group2"                                                # FeatureContext::assureUserBelongsToGroup()
    And user "user0" created a folder "/merge-test-outside-twogroups"                         # FeatureContext::userCreatedAFolder()
    When folder "/merge-test-outside-twogroups" of user "user0" is shared with group "group1" # FeatureContext::assureFileIsSharedWithGroup()
    And folder "/merge-test-outside-twogroups" of user "user0" is shared with group "group2"  # FeatureContext::assureFileIsSharedWithGroup()
    Then as "user1" the folder "/merge-test-outside-twogroups" exists                         # FeatureContext::asTheFileOrFolderExists()
    And as "user1" the folder "/merge-test-outside-twogroups (2)" does not exist              # FeatureContext::asTheFileOrFolderDoesNotExist()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Merging shares for recipient when shared from outside with two groups with different permissions           # /var/www/core/build/integration/features/sharing-v1.feature:772
    Given As an "admin"                                                                                                # FeatureContext::asAn()
    And user "user0" exists                                                                                            # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                                                            # FeatureContext::assureUserExists()
    And group "group1" exists                                                                                          # FeatureContext::assureGroupExists()
    And group "group2" exists                                                                                          # FeatureContext::assureGroupExists()
    And user "user1" belongs to group "group1"                                                                         # FeatureContext::assureUserBelongsToGroup()
    And user "user1" belongs to group "group2"                                                                         # FeatureContext::assureUserBelongsToGroup()
    And user "user0" created a folder "/merge-test-outside-twogroups-perms"                                            # FeatureContext::userCreatedAFolder()
    When folder "/merge-test-outside-twogroups-perms" of user "user0" is shared with group "group1" with permissions 1 # FeatureContext::assureFileIsSharedWithGroup()
    And folder "/merge-test-outside-twogroups-perms" of user "user0" is shared with group "group2" with permissions 31 # FeatureContext::assureFileIsSharedWithGroup()
    Then as "user1" gets properties of folder "/merge-test-outside-twogroups-perms" with                               # FeatureContext::asGetsPropertiesOfFolderWith()
      | {http://owncloud.org/ns}permissions |
    And the single response should contain a property "{http://owncloud.org/ns}permissions" with value "SRDNVCK"       # FeatureContext::theSingleResponseShouldContainAPropertyWithValue()
    And as "user1" the folder "/merge-test-outside-twogroups-perms (2)" does not exist                                 # FeatureContext::asTheFileOrFolderDoesNotExist()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Merging shares for recipient when shared from outside with two groups and member                                  # /var/www/core/build/integration/features/sharing-v1.feature:788
    Given As an "admin"                                                                                                       # FeatureContext::asAn()
    And user "user0" exists                                                                                                   # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                                                                   # FeatureContext::assureUserExists()
    And group "group1" exists                                                                                                 # FeatureContext::assureGroupExists()
    And group "group2" exists                                                                                                 # FeatureContext::assureGroupExists()
    And user "user1" belongs to group "group1"                                                                                # FeatureContext::assureUserBelongsToGroup()
    And user "user1" belongs to group "group2"                                                                                # FeatureContext::assureUserBelongsToGroup()
    And user "user0" created a folder "/merge-test-outside-twogroups-member-perms"                                            # FeatureContext::userCreatedAFolder()
    When folder "/merge-test-outside-twogroups-member-perms" of user "user0" is shared with group "group1" with permissions 1 # FeatureContext::assureFileIsSharedWithGroup()
    And folder "/merge-test-outside-twogroups-member-perms" of user "user0" is shared with group "group2" with permissions 31 # FeatureContext::assureFileIsSharedWithGroup()
    And folder "/merge-test-outside-twogroups-member-perms" of user "user0" is shared with user "user1" with permissions 1    # FeatureContext::assureFileIsShared()
    Then as "user1" gets properties of folder "/merge-test-outside-twogroups-member-perms" with                               # FeatureContext::asGetsPropertiesOfFolderWith()
      | {http://owncloud.org/ns}permissions |
    And the single response should contain a property "{http://owncloud.org/ns}permissions" with value "SRDNVCK"              # FeatureContext::theSingleResponseShouldContainAPropertyWithValue()
    And as "user1" the folder "/merge-test-outside-twogroups-member-perms (2)" does not exist                                 # FeatureContext::asTheFileOrFolderDoesNotExist()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Merging shares for recipient when shared from inside with group              # /var/www/core/build/integration/features/sharing-v1.feature:805
    Given As an "admin"                                                                  # FeatureContext::asAn()
    And user "user0" exists                                                              # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And group "group1" exists                                                            # FeatureContext::assureGroupExists()
    And user "user0" belongs to group "group1"                                           # FeatureContext::assureUserBelongsToGroup()
    And user "user0" created a folder "/merge-test-inside-group"                         # FeatureContext::userCreatedAFolder()
    When folder "/merge-test-inside-group" of user "user0" is shared with group "group1" # FeatureContext::assureFileIsSharedWithGroup()
    Then as "user0" the folder "/merge-test-inside-group" exists                         # FeatureContext::asTheFileOrFolderExists()
    And as "user0" the folder "/merge-test-inside-group (2)" does not exist              # FeatureContext::asTheFileOrFolderDoesNotExist()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Merging shares for recipient when shared from inside with two groups             # /var/www/core/build/integration/features/sharing-v1.feature:815
    Given As an "admin"                                                                      # FeatureContext::asAn()
    And user "user0" exists                                                                  # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And group "group1" exists                                                                # FeatureContext::assureGroupExists()
    And group "group2" exists                                                                # FeatureContext::assureGroupExists()
    And user "user0" belongs to group "group1"                                               # FeatureContext::assureUserBelongsToGroup()
    And user "user0" belongs to group "group2"                                               # FeatureContext::assureUserBelongsToGroup()
    And user "user0" created a folder "/merge-test-inside-twogroups"                         # FeatureContext::userCreatedAFolder()
    When folder "/merge-test-inside-twogroups" of user "user0" is shared with group "group1" # FeatureContext::assureFileIsSharedWithGroup()
    And folder "/merge-test-inside-twogroups" of user "user0" is shared with group "group2"  # FeatureContext::assureFileIsSharedWithGroup()
    Then as "user0" the folder "/merge-test-inside-twogroups" exists                         # FeatureContext::asTheFileOrFolderExists()
    And as "user0" the folder "/merge-test-inside-twogroups (2)" does not exist              # FeatureContext::asTheFileOrFolderDoesNotExist()
    And as "user0" the folder "/merge-test-inside-twogroups (3)" does not exist              # FeatureContext::asTheFileOrFolderDoesNotExist()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Merging shares for recipient when shared from inside with group with less permissions               # /var/www/core/build/integration/features/sharing-v1.feature:829
    Given As an "admin"                                                                                         # FeatureContext::asAn()
    And user "user0" exists                                                                                     # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And group "group1" exists                                                                                   # FeatureContext::assureGroupExists()
    And group "group2" exists                                                                                   # FeatureContext::assureGroupExists()
    And user "user0" belongs to group "group1"                                                                  # FeatureContext::assureUserBelongsToGroup()
    And user "user0" belongs to group "group2"                                                                  # FeatureContext::assureUserBelongsToGroup()
    And user "user0" created a folder "/merge-test-inside-twogroups-perms"                                      # FeatureContext::userCreatedAFolder()
    When folder "/merge-test-inside-twogroups-perms" of user "user0" is shared with group "group1"              # FeatureContext::assureFileIsSharedWithGroup()
    And folder "/merge-test-inside-twogroups-perms" of user "user0" is shared with group "group2"               # FeatureContext::assureFileIsSharedWithGroup()
    Then as "user0" gets properties of folder "/merge-test-inside-twogroups-perms" with                         # FeatureContext::asGetsPropertiesOfFolderWith()
      | {http://owncloud.org/ns}permissions |
    And the single response should contain a property "{http://owncloud.org/ns}permissions" with value "RDNVCK" # FeatureContext::theSingleResponseShouldContainAPropertyWithValue()
    And as "user0" the folder "/merge-test-inside-twogroups-perms (2)" does not exist                           # FeatureContext::asTheFileOrFolderDoesNotExist()
    And as "user0" the folder "/merge-test-inside-twogroups-perms (3)" does not exist                           # FeatureContext::asTheFileOrFolderDoesNotExist()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Merging shares for recipient when shared from outside with group then user and recipient renames in between                                # /var/www/core/build/integration/features/sharing-v1.feature:845
    Given As an "admin"                                                                                                                                # FeatureContext::asAn()
    And user "user0" exists                                                                                                                            # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                                                                                            # FeatureContext::assureUserExists()
    And group "group1" exists                                                                                                                          # FeatureContext::assureGroupExists()
    And user "user1" belongs to group "group1"                                                                                                         # FeatureContext::assureUserBelongsToGroup()
    And user "user0" created a folder "/merge-test-outside-groups-renamebeforesecondshare"                                                             # FeatureContext::userCreatedAFolder()
    When folder "/merge-test-outside-groups-renamebeforesecondshare" of user "user0" is shared with group "group1"                                     # FeatureContext::assureFileIsSharedWithGroup()
    And User "user1" moved folder "/merge-test-outside-groups-renamebeforesecondshare" to "/merge-test-outside-groups-renamebeforesecondshare-renamed" # FeatureContext::userMovedFile()
    And folder "/merge-test-outside-groups-renamebeforesecondshare" of user "user0" is shared with user "user1"                                        # FeatureContext::assureFileIsShared()
    Then as "user1" gets properties of folder "/merge-test-outside-groups-renamebeforesecondshare-renamed" with                                        # FeatureContext::asGetsPropertiesOfFolderWith()
      | {http://owncloud.org/ns}permissions |
    And the single response should contain a property "{http://owncloud.org/ns}permissions" with value "SRDNVCK"                                       # FeatureContext::theSingleResponseShouldContainAPropertyWithValue()
    And as "user1" the folder "/merge-test-outside-groups-renamebeforesecondshare" does not exist                                                      # FeatureContext::asTheFileOrFolderDoesNotExist()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Merging shares for recipient when shared from outside with user then group and recipient renames in between                                # /var/www/core/build/integration/features/sharing-v1.feature:860
    Given As an "admin"                                                                                                                                # FeatureContext::asAn()
    And user "user0" exists                                                                                                                            # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                                                                                            # FeatureContext::assureUserExists()
    And group "group1" exists                                                                                                                          # FeatureContext::assureGroupExists()
    And user "user1" belongs to group "group1"                                                                                                         # FeatureContext::assureUserBelongsToGroup()
    And user "user0" created a folder "/merge-test-outside-groups-renamebeforesecondshare"                                                             # FeatureContext::userCreatedAFolder()
    When folder "/merge-test-outside-groups-renamebeforesecondshare" of user "user0" is shared with user "user1"                                       # FeatureContext::assureFileIsShared()
    And User "user1" moved folder "/merge-test-outside-groups-renamebeforesecondshare" to "/merge-test-outside-groups-renamebeforesecondshare-renamed" # FeatureContext::userMovedFile()
    And folder "/merge-test-outside-groups-renamebeforesecondshare" of user "user0" is shared with group "group1"                                      # FeatureContext::assureFileIsSharedWithGroup()
    Then as "user1" gets properties of folder "/merge-test-outside-groups-renamebeforesecondshare-renamed" with                                        # FeatureContext::asGetsPropertiesOfFolderWith()
      | {http://owncloud.org/ns}permissions |
    And the single response should contain a property "{http://owncloud.org/ns}permissions" with value "SRDNVCK"                                       # FeatureContext::theSingleResponseShouldContainAPropertyWithValue()
    And as "user1" the folder "/merge-test-outside-groups-renamebeforesecondshare" does not exist                                                      # FeatureContext::asTheFileOrFolderDoesNotExist()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Empting trashbin                       # /var/www/core/build/integration/features/sharing-v1.feature:875
    Given As an "admin"                            # FeatureContext::asAn()
    And user "user0" exists                        # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And User "user0" deletes file "/textfile0.txt" # FeatureContext::userDeletesFile()
    When User "user0" empties trashbin             # FeatureContext::emptyTrashbin()
    Then the HTTP status code should be "200"      # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: orphaned shares                                            # /var/www/core/build/integration/features/sharing-v1.feature:882
    Given As an "admin"                                                # FeatureContext::asAn()
    And user "user0" exists                                            # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                            # FeatureContext::assureUserExists()
    And user "user0" created a folder "/common"                        # FeatureContext::userCreatedAFolder()
    And user "user0" created a folder "/common/sub"                    # FeatureContext::userCreatedAFolder()
    And file "/common/sub" of user "user0" is shared with user "user1" # FeatureContext::assureFileIsShared()
    And User "user0" deletes folder "/common"                          # FeatureContext::userDeletesFile()
    When User "user0" empties trashbin                                 # FeatureContext::emptyTrashbin()
    Then as "user1" the folder "/sub" does not exist                   # FeatureContext::asTheFileOrFolderDoesNotExist()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: sharing again an own file while belonging to a group                # /var/www/core/build/integration/features/sharing-v1.feature:893
    Given As an "admin"                                                         # FeatureContext::asAn()
    Given user "user0" exists                                                   # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And group "sharing-group" exists                                            # FeatureContext::assureGroupExists()
    And user "user0" belongs to group "sharing-group"                           # FeatureContext::assureUserBelongsToGroup()
    And file "welcome.txt" of user "user0" is shared with group "sharing-group" # FeatureContext::assureFileIsSharedWithGroup()
    And Deleting last share                                                     # FeatureContext::deletingLastShare()
    When sending "POST" to "/apps/files_sharing/api/v1/shares" with             # FeatureContext::sendingToWith()
      | path      | welcome.txt   |
      | shareWith | sharing-group |
      | shareType | 1             |
    Then the OCS status code should be "100"                                    # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                    # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: sharing subfolder when parent already shared                  # /var/www/core/build/integration/features/sharing-v1.feature:907
    Given As an "admin"                                                   # FeatureContext::asAn()
    Given user "user0" exists                                             # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    Given user "user1" exists                                             # FeatureContext::assureUserExists()
    And group "sharing-group" exists                                      # FeatureContext::assureGroupExists()
    And user "user0" created a folder "/test"                             # FeatureContext::userCreatedAFolder()
    And user "user0" created a folder "/test/sub"                         # FeatureContext::userCreatedAFolder()
    And file "/test" of user "user0" is shared with group "sharing-group" # FeatureContext::assureFileIsSharedWithGroup()
    And As an "user0"                                                     # FeatureContext::asAn()
    When sending "POST" to "/apps/files_sharing/api/v1/shares" with       # FeatureContext::sendingToWith()
      | path      | /test/sub |
      | shareWith | user1     |
      | shareType | 0         |
    Then the OCS status code should be "100"                              # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                              # FeatureContext::theHTTPStatusCodeShouldBe()
    And as "user1" the folder "/sub" exists                               # FeatureContext::asTheFileOrFolderExists()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: sharing subfolder when parent already shared with group of sharer # /var/www/core/build/integration/features/sharing-v1.feature:924
    Given As an "admin"                                                       # FeatureContext::asAn()
    Given user "user0" exists                                                 # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    Given user "user1" exists                                                 # FeatureContext::assureUserExists()
    And group "sharing-group" exists                                          # FeatureContext::assureGroupExists()
    And user "user0" belongs to group "sharing-group"                         # FeatureContext::assureUserBelongsToGroup()
    And user "user0" created a folder "/test"                                 # FeatureContext::userCreatedAFolder()
    And user "user0" created a folder "/test/sub"                             # FeatureContext::userCreatedAFolder()
    And file "/test" of user "user0" is shared with group "sharing-group"     # FeatureContext::assureFileIsSharedWithGroup()
    And As an "user0"                                                         # FeatureContext::asAn()
    When sending "POST" to "/apps/files_sharing/api/v1/shares" with           # FeatureContext::sendingToWith()
      | path      | /test/sub |
      | shareWith | user1     |
      | shareType | 0         |
    Then the OCS status code should be "100"                                  # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                  # FeatureContext::theHTTPStatusCodeShouldBe()
    And as "user1" the folder "/sub" exists                                   # FeatureContext::asTheFileOrFolderExists()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: sharing subfolder of already shared folder, GET result is correct      # /var/www/core/build/integration/features/sharing-v1.feature:942
    Given As an "admin"                                                            # FeatureContext::asAn()
    Given user "user0" exists                                                      # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    Given user "user1" exists                                                      # FeatureContext::assureUserExists()
    Given user "user2" exists                                                      # FeatureContext::assureUserExists()
    Given user "user3" exists                                                      # FeatureContext::assureUserExists()
    Given user "user4" exists                                                      # FeatureContext::assureUserExists()
    And user "user0" created a folder "/folder1"                                   # FeatureContext::userCreatedAFolder()
    And file "/folder1" of user "user0" is shared with user "user1"                # FeatureContext::assureFileIsShared()
    And file "/folder1" of user "user0" is shared with user "user2"                # FeatureContext::assureFileIsShared()
    And user "user0" created a folder "/folder1/folder2"                           # FeatureContext::userCreatedAFolder()
    And file "/folder1/folder2" of user "user0" is shared with user "user3"        # FeatureContext::assureFileIsShared()
    And file "/folder1/folder2" of user "user0" is shared with user "user4"        # FeatureContext::assureFileIsShared()
    And As an "user0"                                                              # FeatureContext::asAn()
    When sending "GET" to "/apps/files_sharing/api/v1/shares"                      # FeatureContext::sendingTo()
    Then the OCS status code should be "100"                                       # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                       # FeatureContext::theHTTPStatusCodeShouldBe()
    And the response contains 4 entries                                            # FeatureContext::checkingTheResponseEntriesCount()
    And File "/folder1" should be included as path in the response                 # FeatureContext::checkSharedFileAsPathInResponse()
    And File "/folder1/folder2" should be included as path in the response         # FeatureContext::checkSharedFileAsPathInResponse()
    And sending "GET" to "/apps/files_sharing/api/v1/shares?path=/folder1/folder2" # FeatureContext::sendingTo()
    And the response contains 2 entries                                            # FeatureContext::checkingTheResponseEntriesCount()
    And File "/folder1" should not be included as path in the response             # FeatureContext::checkSharedFileAsPathNotInResponse()
    And File "/folder1/folder2" should be included as path in the response         # FeatureContext::checkSharedFileAsPathInResponse()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: unshare from self                                                          # /var/www/core/build/integration/features/sharing-v1.feature:967
    Given As an "admin"                                                                # FeatureContext::asAn()
    And user "user0" exists                                                            # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                            # FeatureContext::assureUserExists()
    And group "sharing-group" exists                                                   # FeatureContext::assureGroupExists()
    And user "user0" belongs to group "sharing-group"                                  # FeatureContext::assureUserBelongsToGroup()
    And user "user1" belongs to group "sharing-group"                                  # FeatureContext::assureUserBelongsToGroup()
    And file "/PARENT/parent.txt" of user "user0" is shared with group "sharing-group" # FeatureContext::assureFileIsSharedWithGroup()
    And user "user0" stores etag of element "/PARENT"                                  # FeatureContext::userStoresEtagOfElement()
    And user "user1" stores etag of element "/"                                        # FeatureContext::userStoresEtagOfElement()
    And As an "user1"                                                                  # FeatureContext::asAn()
    When Deleting last share                                                           # FeatureContext::deletingLastShare()
    Then etag of element "/" of user "user1" has changed                               # FeatureContext::checkIfETAGHasChanged()
    And etag of element "/PARENT" of user "user0" has not changed                      # FeatureContext::checkIfETAGHasNotChanged()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Increasing permissions is allowed for owner                   # /var/www/core/build/integration/features/sharing-v1.feature:982
    Given As an "admin"                                                   # FeatureContext::asAn()
    And user "user0" exists                                               # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                               # FeatureContext::assureUserExists()
    And group "new-group" exists                                          # FeatureContext::assureGroupExists()
    And user "user0" belongs to group "new-group"                         # FeatureContext::assureUserBelongsToGroup()
    And user "user1" belongs to group "new-group"                         # FeatureContext::assureUserBelongsToGroup()
    And Assure user "user0" is subadmin of group "new-group"              # FeatureContext::assureUserIsSubadminOfGroup()
    And As an "user0"                                                     # FeatureContext::asAn()
    And folder "/FOLDER" of user "user0" is shared with group "new-group" # FeatureContext::assureFileIsSharedWithGroup()
    And Updating last share with                                          # FeatureContext::updatingLastShare()
      | permissions | 0 |
    When Updating last share with                                         # FeatureContext::updatingLastShare()
      | permissions | 31 |
    Then the OCS status code should be "100"                              # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                              # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Adding public upload to a read only shared folder as recipient is not allowed # /var/www/core/build/integration/features/sharing-v1.feature:999
    Given As an "admin"                                                                   # FeatureContext::asAn()
    And user "user0" exists                                                               # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                               # FeatureContext::assureUserExists()
    And As an "user0"                                                                     # FeatureContext::asAn()
    And user "user0" created a folder "/test"                                             # FeatureContext::userCreatedAFolder()
    And folder "/test" of user "user0" is shared with user "user1" with permissions 17    # FeatureContext::assureFileIsShared()
    And As an "user1"                                                                     # FeatureContext::asAn()
    And creating a share with                                                             # FeatureContext::creatingShare()
      | path         | /test |
      | shareType    | 3     |
      | publicUpload | false |
    When Updating last share with                                                         # FeatureContext::updatingLastShare()
      | publicUpload | true |
    Then the OCS status code should be "404"                                              # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                              # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Adding public upload to a shared folder as recipient is allowed with permissions # /var/www/core/build/integration/features/sharing-v1.feature:1016
    Given As an "admin"                                                                      # FeatureContext::asAn()
    And user "user0" exists                                                                  # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                                  # FeatureContext::assureUserExists()
    And As an "user0"                                                                        # FeatureContext::asAn()
    And user "user0" created a folder "/test"                                                # FeatureContext::userCreatedAFolder()
    And folder "/test" of user "user0" is shared with user "user1" with permissions 31       # FeatureContext::assureFileIsShared()
    And As an "user1"                                                                        # FeatureContext::asAn()
    And creating a share with                                                                # FeatureContext::creatingShare()
      | path         | /test |
      | shareType    | 3     |
      | publicUpload | false |
    When Updating last share with                                                            # FeatureContext::updatingLastShare()
      | publicUpload | true |
    Then the OCS status code should be "100"                                                 # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                                 # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Adding public upload to a read only shared folder as recipient is not allowed # /var/www/core/build/integration/features/sharing-v1.feature:1033
    Given As an "admin"                                                                   # FeatureContext::asAn()
    And user "user0" exists                                                               # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                               # FeatureContext::assureUserExists()
    And As an "user0"                                                                     # FeatureContext::asAn()
    And user "user0" created a folder "/test"                                             # FeatureContext::userCreatedAFolder()
    And folder "/test" of user "user0" is shared with user "user1" with permissions 17    # FeatureContext::assureFileIsShared()
    And As an "user1"                                                                     # FeatureContext::asAn()
    And creating a share with                                                             # FeatureContext::creatingShare()
      | path        | /test |
      | shareType   | 3     |
      | permissions | 1     |
    When Updating last share with                                                         # FeatureContext::updatingLastShare()
      | permissions | 15 |
    Then the OCS status code should be "404"                                              # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                              # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Adding public upload to a shared folder as recipient is allowed with permissions # /var/www/core/build/integration/features/sharing-v1.feature:1050
    Given As an "admin"                                                                      # FeatureContext::asAn()
    And user "user0" exists                                                                  # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                                  # FeatureContext::assureUserExists()
    And As an "user0"                                                                        # FeatureContext::asAn()
    And user "user0" created a folder "/test"                                                # FeatureContext::userCreatedAFolder()
    And folder "/test" of user "user0" is shared with user "user1" with permissions 31       # FeatureContext::assureFileIsShared()
    And As an "user1"                                                                        # FeatureContext::asAn()
    And creating a share with                                                                # FeatureContext::creatingShare()
      | path        | /test |
      | shareType   | 3     |
      | permissions | 1     |
    When Updating last share with                                                            # FeatureContext::updatingLastShare()
      | permissions | 15 |
    Then the OCS status code should be "100"                                                 # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                                 # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: resharing using a public link with read only permissions is not allowed   # /var/www/core/build/integration/features/sharing-v1.feature:1067
    Given As an "admin"                                                               # FeatureContext::asAn()
    And user "user0" exists                                                           # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                           # FeatureContext::assureUserExists()
    And As an "user0"                                                                 # FeatureContext::asAn()
    And user "user0" created a folder "/test"                                         # FeatureContext::userCreatedAFolder()
    And folder "/test" of user "user0" is shared with user "user1" with permissions 1 # FeatureContext::assureFileIsShared()
    And As an "user1"                                                                 # FeatureContext::asAn()
    And creating a share with                                                         # FeatureContext::creatingShare()
      | path         | /test |
      | shareType    | 3     |
      | publicUpload | false |
    Then the OCS status code should be "404"                                          # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                          # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: resharing using a public link with read and write permissions only is not allowed # /var/www/core/build/integration/features/sharing-v1.feature:1082
    Given As an "admin"                                                                       # FeatureContext::asAn()
    And user "user0" exists                                                                   # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                                   # FeatureContext::assureUserExists()
    And As an "user0"                                                                         # FeatureContext::asAn()
    And user "user0" created a folder "/test"                                                 # FeatureContext::userCreatedAFolder()
    And folder "/test" of user "user0" is shared with user "user1" with permissions 15        # FeatureContext::assureFileIsShared()
    And As an "user1"                                                                         # FeatureContext::asAn()
    And creating a share with                                                                 # FeatureContext::creatingShare()
      | path         | /test |
      | shareType    | 3     |
      | publicUpload | false |
    Then the OCS status code should be "404"                                                  # FeatureContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                                  # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: deleting file out of a share as recipient creates a backup for the owner # /var/www/core/build/integration/features/sharing-v1.feature:1097
    Given As an "admin"                                                              # FeatureContext::asAn()
    And user "user0" exists                                                          # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                          # FeatureContext::assureUserExists()
    And user "user0" created a folder "/shared"                                      # FeatureContext::userCreatedAFolder()
    And User "user0" moved file "/textfile0.txt" to "/shared/shared_file.txt"        # FeatureContext::userMovedFile()
    And folder "/shared" of user "user0" is shared with user "user1"                 # FeatureContext::assureFileIsShared()
    When User "user1" deletes file "/shared/shared_file.txt"                         # FeatureContext::userDeletesFile()
    Then as "user1" the file "/shared/shared_file.txt" does not exist                # FeatureContext::asTheFileOrFolderDoesNotExist()
    And as "user0" the file "/shared/shared_file.txt" does not exist                 # FeatureContext::asTheFileOrFolderDoesNotExist()
    And as "user0" the file "/shared_file.txt" exists in trash                       # FeatureContext::asTheFileOrFolderExistsInTrash()
    And as "user1" the file "/shared_file.txt" exists in trash                       # FeatureContext::asTheFileOrFolderExistsInTrash()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: deleting folder out of a share as recipient creates a backup for the owner # /var/www/core/build/integration/features/sharing-v1.feature:1110
    Given As an "admin"                                                                # FeatureContext::asAn()
    And user "user0" exists                                                            # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                            # FeatureContext::assureUserExists()
    And user "user0" created a folder "/shared"                                        # FeatureContext::userCreatedAFolder()
    And user "user0" created a folder "/shared/sub"                                    # FeatureContext::userCreatedAFolder()
    And User "user0" moved file "/textfile0.txt" to "/shared/sub/shared_file.txt"      # FeatureContext::userMovedFile()
    And folder "/shared" of user "user0" is shared with user "user1"                   # FeatureContext::assureFileIsShared()
    When User "user1" deletes folder "/shared/sub"                                     # FeatureContext::userDeletesFile()
    Then as "user1" the folder "/shared/sub" does not exist                            # FeatureContext::asTheFileOrFolderDoesNotExist()
    And as "user0" the folder "/shared/sub" does not exist                             # FeatureContext::asTheFileOrFolderDoesNotExist()
    And as "user0" the folder "/sub" exists in trash                                   # FeatureContext::asTheFileOrFolderExistsInTrash()
    And as "user0" the file "/sub/shared_file.txt" exists in trash                     # FeatureContext::asTheFileOrFolderExistsInTrash()
    And as "user1" the folder "/sub" exists in trash                                   # FeatureContext::asTheFileOrFolderExistsInTrash()
    And as "user1" the file "/sub/shared_file.txt" exists in trash                     # FeatureContext::asTheFileOrFolderExistsInTrash()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: moving a file into a share as recipient                            # /var/www/core/build/integration/features/sharing-v1.feature:1126
    Given As an "admin"                                                        # FeatureContext::asAn()
    And user "user0" exists                                                    # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                    # FeatureContext::assureUserExists()
    And user "user0" created a folder "/shared"                                # FeatureContext::userCreatedAFolder()
    And folder "/shared" of user "user0" is shared with user "user1"           # FeatureContext::assureFileIsShared()
    When User "user1" moved file "/textfile0.txt" to "/shared/shared_file.txt" # FeatureContext::userMovedFile()
    Then as "user1" the file "/shared/shared_file.txt" exists                  # FeatureContext::asTheFileOrFolderExists()
    And as "user0" the file "/shared/shared_file.txt" exists                   # FeatureContext::asTheFileOrFolderExists()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: moving file out of a share as recipient creates a backup for the owner     # /var/www/core/build/integration/features/sharing-v1.feature:1136
    Given As an "admin"                                                                # FeatureContext::asAn()
    And user "user0" exists                                                            # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                            # FeatureContext::assureUserExists()
    And user "user0" created a folder "/shared"                                        # FeatureContext::userCreatedAFolder()
    And User "user0" moved file "/textfile0.txt" to "/shared/shared_file.txt"          # FeatureContext::userMovedFile()
    And file "/shared" of user "user0" is shared with user "user1"                     # FeatureContext::assureFileIsShared()
    And User "user1" moved folder "/shared" to "/shared_renamed"                       # FeatureContext::userMovedFile()
    When User "user1" moved file "/shared_renamed/shared_file.txt" to "/taken_out.txt" # FeatureContext::userMovedFile()
    Then as "user1" the file "/taken_out.txt" exists                                   # FeatureContext::asTheFileOrFolderExists()
    And as "user0" the file "/shared/shared_file.txt" does not exist                   # FeatureContext::asTheFileOrFolderDoesNotExist()
    And as "user0" the file "/shared_file.txt" exists in trash                         # FeatureContext::asTheFileOrFolderExistsInTrash()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: moving folder out of a share as recipient creates a backup for the owner # /var/www/core/build/integration/features/sharing-v1.feature:1149
    Given As an "admin"                                                              # FeatureContext::asAn()
    And user "user0" exists                                                          # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                          # FeatureContext::assureUserExists()
    And user "user0" created a folder "/shared"                                      # FeatureContext::userCreatedAFolder()
    And user "user0" created a folder "/shared/sub"                                  # FeatureContext::userCreatedAFolder()
    And User "user0" moved file "/textfile0.txt" to "/shared/sub/shared_file.txt"    # FeatureContext::userMovedFile()
    And file "/shared" of user "user0" is shared with user "user1"                   # FeatureContext::assureFileIsShared()
    And User "user1" moved folder "/shared" to "/shared_renamed"                     # FeatureContext::userMovedFile()
    When User "user1" moved folder "/shared_renamed/sub" to "/taken_out"             # FeatureContext::userMovedFile()
    Then as "user1" the file "/taken_out" exists                                     # FeatureContext::asTheFileOrFolderExists()
    And as "user0" the folder "/shared/sub" does not exist                           # FeatureContext::asTheFileOrFolderDoesNotExist()
    And as "user0" the folder "/sub" exists in trash                                 # FeatureContext::asTheFileOrFolderExistsInTrash()
    And as "user0" the file "/sub/shared_file.txt" exists in trash                   # FeatureContext::asTheFileOrFolderExistsInTrash()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

Feature: tags

  Scenario: Creating a normal tag as regular user should work             # /var/www/core/build/integration/features/tags.feature:3
    Given user "user0" exists                                             # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When "user0" creates a "normal" tag with name "MySuperAwesomeTagName" # TagsContext::createsATagWithName()
    Then The response should have a status code "201"                     # TagsContext::theResponseShouldHaveAStatusCode()
    And The following tags should exist for "admin"                       # TagsContext::theFollowingTagsShouldExistFor()
      | MySuperAwesomeTagName | true | true |
    And The following tags should exist for "user0"                       # TagsContext::theFollowingTagsShouldExistFor()
      | MySuperAwesomeTagName | true | true |
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Creating a not user-assignable tag as regular user should fail             # /var/www/core/build/integration/features/tags.feature:12
    Given user "user0" exists                                                          # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When "user0" creates a "not user-assignable" tag with name "MySuperAwesomeTagName" # TagsContext::createsATagWithName()
    Then The response should have a status code "400"                                  # TagsContext::theResponseShouldHaveAStatusCode()
    And "0" tags should exist for "admin"                                              # TagsContext::tagsShouldExistFor()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Creating a not user-visible tag as regular user should fail             # /var/www/core/build/integration/features/tags.feature:18
    Given user "user0" exists                                                       # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When "user0" creates a "not user-visible" tag with name "MySuperAwesomeTagName" # TagsContext::createsATagWithName()
    Then The response should have a status code "400"                               # TagsContext::theResponseShouldHaveAStatusCode()
    And "0" tags should exist for "admin"                                           # TagsContext::tagsShouldExistFor()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Creating a not user-assignable tag with groups as admin should work                           # /var/www/core/build/integration/features/tags.feature:24
    Given user "user0" exists                                                                             # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When "admin" creates a "not user-assignable" tag with name "TagWithGroups" and groups "group1|group2" # TagsContext::createsATagWithNameAndGroups()
    Then The response should have a status code "201"                                                     # TagsContext::theResponseShouldHaveAStatusCode()
    And The "not user-assignable" tag with name "TagWithGroups" has the groups "group1|group2"            # TagsContext::theTagHasGroup()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Creating a normal tag with groups as regular user should fail                            # /var/www/core/build/integration/features/tags.feature:30
    Given user "user0" exists                                                                        # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When "user0" creates a "normal" tag with name "MySuperAwesomeTagName" and groups "group1|group2" # TagsContext::createsATagWithNameAndGroups()
    Then The response should have a status code "400"                                                # TagsContext::theResponseShouldHaveAStatusCode()
    And "0" tags should exist for "user0"                                                            # TagsContext::tagsShouldExistFor()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Renaming a normal tag as regular user should work                                          # /var/www/core/build/integration/features/tags.feature:36
    Given user "user0" exists                                                                          # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    Given "admin" creates a "normal" tag with name "MySuperAwesomeTagName"                             # TagsContext::createsATagWithName()
    When "user0" edits the tag with name "MySuperAwesomeTagName" and sets its name to "AnotherTagName" # TagsContext::editsTheTagWithNameAndSetsItsNameTo()
    Then The response should have a status code "207"                                                  # TagsContext::theResponseShouldHaveAStatusCode()
    And The following tags should exist for "admin"                                                    # TagsContext::theFollowingTagsShouldExistFor()
      | AnotherTagName | true | true |
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Renaming a not user-assignable tag as regular user should fail                             # /var/www/core/build/integration/features/tags.feature:44
    Given user "user0" exists                                                                          # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    Given "admin" creates a "not user-assignable" tag with name "MySuperAwesomeTagName"                # TagsContext::createsATagWithName()
    When "user0" edits the tag with name "MySuperAwesomeTagName" and sets its name to "AnotherTagName" # TagsContext::editsTheTagWithNameAndSetsItsNameTo()
    Then The response should have a status code "403"                                                  # TagsContext::theResponseShouldHaveAStatusCode()
    And The following tags should exist for "admin"                                                    # TagsContext::theFollowingTagsShouldExistFor()
      | MySuperAwesomeTagName | true | false |
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Renaming a not user-visible tag as regular user should fail                                # /var/www/core/build/integration/features/tags.feature:52
    Given user "user0" exists                                                                          # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    Given "admin" creates a "not user-visible" tag with name "MySuperAwesomeTagName"                   # TagsContext::createsATagWithName()
    When "user0" edits the tag with name "MySuperAwesomeTagName" and sets its name to "AnotherTagName" # TagsContext::editsTheTagWithNameAndSetsItsNameTo()
    Then The response should have a status code "404"                                                  # TagsContext::theResponseShouldHaveAStatusCode()
    And The following tags should exist for "admin"                                                    # TagsContext::theFollowingTagsShouldExistFor()
      | MySuperAwesomeTagName | false | true |
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Editing tag groups as admin should work                                                        # /var/www/core/build/integration/features/tags.feature:60
    Given user "user0" exists                                                                              # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    Given "admin" creates a "not user-assignable" tag with name "TagWithGroups" and groups "group1|group2" # TagsContext::createsATagWithNameAndGroups()
    When "admin" edits the tag with name "TagWithGroups" and sets its groups to "group1|group3"            # TagsContext::editsTheTagWithNameAndSetsItsGroupsTo()
    Then The response should have a status code "207"                                                      # TagsContext::theResponseShouldHaveAStatusCode()
    And The "not user-assignable" tag with name "TagWithGroups" has the groups "group1|group3"             # TagsContext::theTagHasGroup()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Editing tag groups as regular user should fail                                      # /var/www/core/build/integration/features/tags.feature:67
    Given user "user0" exists                                                                   # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    Given "admin" creates a "not user-assignable" tag with name "TagWithGroups"                 # TagsContext::createsATagWithName()
    When "user0" edits the tag with name "TagWithGroups" and sets its groups to "group1|group3" # TagsContext::editsTheTagWithNameAndSetsItsGroupsTo()
    Then The response should have a status code "403"                                           # TagsContext::theResponseShouldHaveAStatusCode()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Deleting a normal tag as regular user should work              # /var/www/core/build/integration/features/tags.feature:73
    Given user "user0" exists                                              # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    Given "admin" creates a "normal" tag with name "MySuperAwesomeTagName" # TagsContext::createsATagWithName()
    When "user0" deletes the tag with name "MySuperAwesomeTagName"         # TagsContext::deletesTheTagWithName()
    Then The response should have a status code "204"                      # TagsContext::theResponseShouldHaveAStatusCode()
    And "0" tags should exist for "admin"                                  # TagsContext::tagsShouldExistFor()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Deleting a not user-assignable tag as regular user should fail              # /var/www/core/build/integration/features/tags.feature:80
    Given user "user0" exists                                                           # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    Given "admin" creates a "not user-assignable" tag with name "MySuperAwesomeTagName" # TagsContext::createsATagWithName()
    When "user0" deletes the tag with name "MySuperAwesomeTagName"                      # TagsContext::deletesTheTagWithName()
    Then The response should have a status code "403"                                   # TagsContext::theResponseShouldHaveAStatusCode()
    And The following tags should exist for "admin"                                     # TagsContext::theFollowingTagsShouldExistFor()
      | MySuperAwesomeTagName | true | false |
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Deleting a not user-visible tag as regular user should fail              # /var/www/core/build/integration/features/tags.feature:88
    Given user "user0" exists                                                        # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    Given "admin" creates a "not user-visible" tag with name "MySuperAwesomeTagName" # TagsContext::createsATagWithName()
    When "user0" deletes the tag with name "MySuperAwesomeTagName"                   # TagsContext::deletesTheTagWithName()
    Then The response should have a status code "404"                                # TagsContext::theResponseShouldHaveAStatusCode()
    And The following tags should exist for "admin"                                  # TagsContext::theFollowingTagsShouldExistFor()
      | MySuperAwesomeTagName | false | true |
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Deleting a not user-assignable tag as admin should work                     # /var/www/core/build/integration/features/tags.feature:96
    Given "admin" creates a "not user-assignable" tag with name "MySuperAwesomeTagName" # TagsContext::createsATagWithName()
    When "admin" deletes the tag with name "MySuperAwesomeTagName"                      # TagsContext::deletesTheTagWithName()
      Opening and ending tag mismatch: meta line 5 and head
       on line 73, column 8 (Sabre\Xml\LibXMLException)
    Then The response should have a status code "204"                                   # TagsContext::theResponseShouldHaveAStatusCode()
    And "0" tags should exist for "admin"                                               # TagsContext::tagsShouldExistFor()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Deleting a not user-visible tag as admin should work                     # /var/www/core/build/integration/features/tags.feature:102
    Given "admin" creates a "not user-visible" tag with name "MySuperAwesomeTagName" # TagsContext::createsATagWithName()
    When "admin" deletes the tag with name "MySuperAwesomeTagName"                   # TagsContext::deletesTheTagWithName()
      Opening and ending tag mismatch: meta line 5 and head
       on line 73, column 8 (Sabre\Xml\LibXMLException)
    Then The response should have a status code "204"                                # TagsContext::theResponseShouldHaveAStatusCode()
    And "0" tags should exist for "admin"                                            # TagsContext::tagsShouldExistFor()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Assigning a normal tag to a file shared by someone else as regular user should work # /var/www/core/build/integration/features/tags.feature:108
    Given user "user0" exists                                                                   # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    Given user "user1" exists                                                                   # FeatureContext::assureUserExists()
    Given "admin" creates a "normal" tag with name "MySuperAwesomeTagName"                      # TagsContext::createsATagWithName()
    Given user "user0" uploads file "data/textfile.txt" to "/myFileToTag.txt"                   # FeatureContext::userUploadsAFileTo()
    Given As "user0" sending "POST" to "/apps/files_sharing/api/v1/shares" with                 # CommentsContext::asUserSendingToWith()
      | path      | myFileToTag.txt |
      | shareWith | user1           |
      | shareType | 0               |
    When "user1" adds the tag "MySuperAwesomeTagName" to "/myFileToTag.txt" shared by "user0"   # TagsContext::addsTheTagToSharedBy()
    Then The response should have a status code "201"                                           # TagsContext::theResponseShouldHaveAStatusCode()
    And "/myFileToTag.txt" shared by "user0" has the following tags                             # TagsContext::sharedByHasTheFollowingTags()
      | MySuperAwesomeTagName |
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Assigning a normal tag to a file belonging to someone else as regular user should fail # /var/www/core/build/integration/features/tags.feature:122
    Given user "user0" exists                                                                      # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    Given user "user1" exists                                                                      # FeatureContext::assureUserExists()
    Given "admin" creates a "normal" tag with name "MyFirstTag"                                    # TagsContext::createsATagWithName()
    Given "admin" creates a "normal" tag with name "MySecondTag"                                   # TagsContext::createsATagWithName()
    Given user "user0" uploads file "data/textfile.txt" to "/myFileToTag.txt"                      # FeatureContext::userUploadsAFileTo()
    When "user0" adds the tag "MyFirstTag" to "/myFileToTag.txt" shared by "user0"                 # TagsContext::addsTheTagToSharedBy()
    When "user1" adds the tag "MySecondTag" to "/myFileToTag.txt" shared by "user0"                # TagsContext::addsTheTagToSharedBy()
    Then The response should have a status code "404"                                              # TagsContext::theResponseShouldHaveAStatusCode()
    And "/myFileToTag.txt" shared by "user0" has the following tags                                # TagsContext::sharedByHasTheFollowingTags()
      | MyFirstTag |
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Assigning a not user-assignable tag to a file shared by someone else as regular user should fail # /var/www/core/build/integration/features/tags.feature:134
    Given user "user0" exists                                                                                # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    Given user "user1" exists                                                                                # FeatureContext::assureUserExists()
    Given "admin" creates a "normal" tag with name "MyFirstTag"                                              # TagsContext::createsATagWithName()
    Given "admin" creates a "not user-assignable" tag with name "MySecondTag"                                # TagsContext::createsATagWithName()
    Given user "user0" uploads file "data/textfile.txt" to "/myFileToTag.txt"                                # FeatureContext::userUploadsAFileTo()
    Given As "user0" sending "POST" to "/apps/files_sharing/api/v1/shares" with                              # CommentsContext::asUserSendingToWith()
      | path      | myFileToTag.txt |
      | shareWith | user1           |
      | shareType | 0               |
    When "user0" adds the tag "MyFirstTag" to "/myFileToTag.txt" shared by "user0"                           # TagsContext::addsTheTagToSharedBy()
    When "user1" adds the tag "MySecondTag" to "/myFileToTag.txt" shared by "user0"                          # TagsContext::addsTheTagToSharedBy()
    Then The response should have a status code "403"                                                        # TagsContext::theResponseShouldHaveAStatusCode()
    And "/myFileToTag.txt" shared by "user0" has the following tags                                          # TagsContext::sharedByHasTheFollowingTags()
      | MyFirstTag |
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Assigning a not user-assignable tag to a file shared by someone else as regular user belongs to tag's groups should work # /var/www/core/build/integration/features/tags.feature:150
    Given user "user0" exists                                                                                                        # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    Given user "user1" exists                                                                                                        # FeatureContext::assureUserExists()
    Given group "group1" exists                                                                                                      # FeatureContext::assureGroupExists()
    Given user "user1" belongs to group "group1"                                                                                     # FeatureContext::assureUserBelongsToGroup()
    Given "admin" creates a "not user-assignable" tag with name "MySuperAwesomeTagName" and groups "group1"                          # TagsContext::createsATagWithNameAndGroups()
    Given user "user0" uploads file "data/textfile.txt" to "/myFileToTag.txt"                                                        # FeatureContext::userUploadsAFileTo()
    Given As "user0" sending "POST" to "/apps/files_sharing/api/v1/shares" with                                                      # CommentsContext::asUserSendingToWith()
      | path      | myFileToTag.txt |
      | shareWith | user1           |
      | shareType | 0               |
    When "user1" adds the tag "MySuperAwesomeTagName" to "/myFileToTag.txt" shared by "user0"                                        # TagsContext::addsTheTagToSharedBy()
    Then The response should have a status code "201"                                                                                # TagsContext::theResponseShouldHaveAStatusCode()
    And "/myFileToTag.txt" shared by "user0" has the following tags                                                                  # TagsContext::sharedByHasTheFollowingTags()
      | MySuperAwesomeTagName |
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Assigning a not user-visible tag to a file shared by someone else as regular user should fail # /var/www/core/build/integration/features/tags.feature:167
    Given user "user0" exists                                                                             # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    Given user "user1" exists                                                                             # FeatureContext::assureUserExists()
    Given "admin" creates a "normal" tag with name "MyFirstTag"                                           # TagsContext::createsATagWithName()
    Given "admin" creates a "not user-visible" tag with name "MySecondTag"                                # TagsContext::createsATagWithName()
    Given user "user0" uploads file "data/textfile.txt" to "/myFileToTag.txt"                             # FeatureContext::userUploadsAFileTo()
    Given As "user0" sending "POST" to "/apps/files_sharing/api/v1/shares" with                           # CommentsContext::asUserSendingToWith()
      | path      | myFileToTag.txt |
      | shareWith | user1           |
      | shareType | 0               |
    When "user0" adds the tag "MyFirstTag" to "/myFileToTag.txt" shared by "user0"                        # TagsContext::addsTheTagToSharedBy()
    When "user1" adds the tag "MySecondTag" to "/myFileToTag.txt" shared by "user0"                       # TagsContext::addsTheTagToSharedBy()
    Then The response should have a status code "412"                                                     # TagsContext::theResponseShouldHaveAStatusCode()
    And "/myFileToTag.txt" shared by "user0" has the following tags                                       # TagsContext::sharedByHasTheFollowingTags()
      | MyFirstTag |
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Assigning a not user-visible tag to a file shared by someone else as admin user should work # /var/www/core/build/integration/features/tags.feature:183
    Given user "user0" exists                                                                           # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    Given "admin" creates a "normal" tag with name "MyFirstTag"                                         # TagsContext::createsATagWithName()
    Given "admin" creates a "not user-visible" tag with name "MySecondTag"                              # TagsContext::createsATagWithName()
    Given user "user0" uploads file "data/textfile.txt" to "/myFileToTag.txt"                           # FeatureContext::userUploadsAFileTo()
    Given As "user0" sending "POST" to "/apps/files_sharing/api/v1/shares" with                         # CommentsContext::asUserSendingToWith()
      | path      | myFileToTag.txt |
      | shareWith | admin           |
      | shareType | 0               |
    When "user0" adds the tag "MyFirstTag" to "/myFileToTag.txt" shared by "user0"                      # TagsContext::addsTheTagToSharedBy()
    When "admin" adds the tag "MySecondTag" to "/myFileToTag.txt" shared by "user0"                     # TagsContext::addsTheTagToSharedBy()
    Then The response should have a status code "201"                                                   # TagsContext::theResponseShouldHaveAStatusCode()
    And "/myFileToTag.txt" shared by "user0" has the following tags for "admin"                         # TagsContext::sharedByHasTheFollowingTagsFor()
      | MyFirstTag  |
      | MySecondTag |
    And "/myFileToTag.txt" shared by "user0" has the following tags for "user0"                         # TagsContext::sharedByHasTheFollowingTagsFor()
      | MyFirstTag |
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Assigning a not user-assignable tag to a file shared by someone else as admin user should worj # /var/www/core/build/integration/features/tags.feature:201
    Given user "user0" exists                                                                              # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    Given "admin" creates a "normal" tag with name "MyFirstTag"                                            # TagsContext::createsATagWithName()
    Given "admin" creates a "not user-assignable" tag with name "MySecondTag"                              # TagsContext::createsATagWithName()
    Given user "user0" uploads file "data/textfile.txt" to "/myFileToTag.txt"                              # FeatureContext::userUploadsAFileTo()
    Given As "user0" sending "POST" to "/apps/files_sharing/api/v1/shares" with                            # CommentsContext::asUserSendingToWith()
      | path      | myFileToTag.txt |
      | shareWith | admin           |
      | shareType | 0               |
    When "user0" adds the tag "MyFirstTag" to "/myFileToTag.txt" shared by "user0"                         # TagsContext::addsTheTagToSharedBy()
    When "admin" adds the tag "MySecondTag" to "/myFileToTag.txt" shared by "user0"                        # TagsContext::addsTheTagToSharedBy()
    Then The response should have a status code "201"                                                      # TagsContext::theResponseShouldHaveAStatusCode()
    And "/myFileToTag.txt" shared by "user0" has the following tags for "admin"                            # TagsContext::sharedByHasTheFollowingTagsFor()
      | MyFirstTag  |
      | MySecondTag |
    And "/myFileToTag.txt" shared by "user0" has the following tags for "user0"                            # TagsContext::sharedByHasTheFollowingTagsFor()
      | MyFirstTag  |
      | MySecondTag |
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Unassigning a normal tag from a file shared by someone else as regular user should work # /var/www/core/build/integration/features/tags.feature:220
    Given user "user0" exists                                                                       # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    Given user "user1" exists                                                                       # FeatureContext::assureUserExists()
    Given "admin" creates a "normal" tag with name "MyFirstTag"                                     # TagsContext::createsATagWithName()
    Given "admin" creates a "normal" tag with name "MySecondTag"                                    # TagsContext::createsATagWithName()
    Given user "user0" uploads file "data/textfile.txt" to "/myFileToTag.txt"                       # FeatureContext::userUploadsAFileTo()
    Given As "user0" sending "POST" to "/apps/files_sharing/api/v1/shares" with                     # CommentsContext::asUserSendingToWith()
      | path      | myFileToTag.txt |
      | shareWith | user1           |
      | shareType | 0               |
    Given "user0" adds the tag "MyFirstTag" to "/myFileToTag.txt" shared by "user0"                 # TagsContext::addsTheTagToSharedBy()
    Given "user0" adds the tag "MySecondTag" to "/myFileToTag.txt" shared by "user0"                # TagsContext::addsTheTagToSharedBy()
    When "user1" removes the tag "MyFirstTag" from "/myFileToTag.txt" shared by "user0"             # TagsContext::removesTheTagFromSharedBy()
    Then The response should have a status code "204"                                               # TagsContext::theResponseShouldHaveAStatusCode()
    And "/myFileToTag.txt" shared by "user0" has the following tags for "user0"                     # TagsContext::sharedByHasTheFollowingTagsFor()
      | MySecondTag |
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Unassigning a normal tag from a file unshared by someone else as regular user should fail # /var/www/core/build/integration/features/tags.feature:237
    Given user "user0" exists                                                                         # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    Given user "user1" exists                                                                         # FeatureContext::assureUserExists()
    Given "admin" creates a "normal" tag with name "MyFirstTag"                                       # TagsContext::createsATagWithName()
    Given "admin" creates a "normal" tag with name "MySecondTag"                                      # TagsContext::createsATagWithName()
    Given user "user0" uploads file "data/textfile.txt" to "/myFileToTag.txt"                         # FeatureContext::userUploadsAFileTo()
    Given "user0" adds the tag "MyFirstTag" to "/myFileToTag.txt" shared by "user0"                   # TagsContext::addsTheTagToSharedBy()
    Given "user0" adds the tag "MySecondTag" to "/myFileToTag.txt" shared by "user0"                  # TagsContext::addsTheTagToSharedBy()
    When "user1" removes the tag "MyFirstTag" from "/myFileToTag.txt" shared by "user0"               # TagsContext::removesTheTagFromSharedBy()
    Then The response should have a status code "404"                                                 # TagsContext::theResponseShouldHaveAStatusCode()
    And "/myFileToTag.txt" shared by "user0" has the following tags for "user0"                       # TagsContext::sharedByHasTheFollowingTagsFor()
      | MyFirstTag  |
      | MySecondTag |
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Unassigning a not user-visible tag from a file shared by someone else as regular user should fail # /var/www/core/build/integration/features/tags.feature:251
    Given user "user0" exists                                                                                 # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    Given user "user1" exists                                                                                 # FeatureContext::assureUserExists()
    Given "admin" creates a "not user-visible" tag with name "MyFirstTag"                                     # TagsContext::createsATagWithName()
    Given "admin" creates a "normal" tag with name "MySecondTag"                                              # TagsContext::createsATagWithName()
    Given user "user0" uploads file "data/textfile.txt" to "/myFileToTag.txt"                                 # FeatureContext::userUploadsAFileTo()
    Given As "user0" sending "POST" to "/apps/files_sharing/api/v1/shares" with                               # CommentsContext::asUserSendingToWith()
      | path      | myFileToTag.txt |
      | shareWith | user1           |
      | shareType | 0               |
    Given As "user0" sending "POST" to "/apps/files_sharing/api/v1/shares" with                               # CommentsContext::asUserSendingToWith()
      | path      | myFileToTag.txt |
      | shareWith | admin           |
      | shareType | 0               |
    Given "admin" adds the tag "MyFirstTag" to "/myFileToTag.txt" shared by "user0"                           # TagsContext::addsTheTagToSharedBy()
    Given "user0" adds the tag "MySecondTag" to "/myFileToTag.txt" shared by "user0"                          # TagsContext::addsTheTagToSharedBy()
    When "user1" removes the tag "MyFirstTag" from "/myFileToTag.txt" shared by "user0"                       # TagsContext::removesTheTagFromSharedBy()
    Then The response should have a status code "404"                                                         # TagsContext::theResponseShouldHaveAStatusCode()
    And "/myFileToTag.txt" shared by "user0" has the following tags for "user0"                               # TagsContext::sharedByHasTheFollowingTagsFor()
      | MySecondTag |
    And "/myFileToTag.txt" shared by "user0" has the following tags for "admin"                               # TagsContext::sharedByHasTheFollowingTagsFor()
      | MyFirstTag  |
      | MySecondTag |
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Unassigning a not user-visible tag from a file shared by someone else as admin should work # /var/www/core/build/integration/features/tags.feature:275
    Given user "user0" exists                                                                          # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    Given user "user1" exists                                                                          # FeatureContext::assureUserExists()
    Given "admin" creates a "not user-visible" tag with name "MyFirstTag"                              # TagsContext::createsATagWithName()
    Given "admin" creates a "normal" tag with name "MySecondTag"                                       # TagsContext::createsATagWithName()
    Given user "user0" uploads file "data/textfile.txt" to "/myFileToTag.txt"                          # FeatureContext::userUploadsAFileTo()
    Given As "user0" sending "POST" to "/apps/files_sharing/api/v1/shares" with                        # CommentsContext::asUserSendingToWith()
      | path      | myFileToTag.txt |
      | shareWith | user1           |
      | shareType | 0               |
    Given As "user0" sending "POST" to "/apps/files_sharing/api/v1/shares" with                        # CommentsContext::asUserSendingToWith()
      | path      | myFileToTag.txt |
      | shareWith | admin           |
      | shareType | 0               |
    Given "admin" adds the tag "MyFirstTag" to "/myFileToTag.txt" shared by "user0"                    # TagsContext::addsTheTagToSharedBy()
    Given "user0" adds the tag "MySecondTag" to "/myFileToTag.txt" shared by "user0"                   # TagsContext::addsTheTagToSharedBy()
    When "admin" removes the tag "MyFirstTag" from "/myFileToTag.txt" shared by "user0"                # TagsContext::removesTheTagFromSharedBy()
    Then The response should have a status code "204"                                                  # TagsContext::theResponseShouldHaveAStatusCode()
    And "/myFileToTag.txt" shared by "user0" has the following tags for "user0"                        # TagsContext::sharedByHasTheFollowingTagsFor()
      | MySecondTag |
    And "/myFileToTag.txt" shared by "user0" has the following tags for "admin"                        # TagsContext::sharedByHasTheFollowingTagsFor()
      | MySecondTag |
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Unassigning a not user-visible tag from a file unshared by someone else should fail # /var/www/core/build/integration/features/tags.feature:298
    Given user "user0" exists                                                                   # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    Given user "user1" exists                                                                   # FeatureContext::assureUserExists()
    Given "admin" creates a "not user-visible" tag with name "MyFirstTag"                       # TagsContext::createsATagWithName()
    Given "admin" creates a "normal" tag with name "MySecondTag"                                # TagsContext::createsATagWithName()
    Given user "user0" uploads file "data/textfile.txt" to "/myFileToTag.txt"                   # FeatureContext::userUploadsAFileTo()
    Given As "user0" sending "POST" to "/apps/files_sharing/api/v1/shares" with                 # CommentsContext::asUserSendingToWith()
      | path      | myFileToTag.txt |
      | shareWith | user1           |
      | shareType | 0               |
    Given As "user0" sending "POST" to "/apps/files_sharing/api/v1/shares" with                 # CommentsContext::asUserSendingToWith()
      | path      | myFileToTag.txt |
      | shareWith | admin           |
      | shareType | 0               |
    Given "admin" adds the tag "MyFirstTag" to "/myFileToTag.txt" shared by "user0"             # TagsContext::addsTheTagToSharedBy()
    Given "user0" adds the tag "MySecondTag" to "/myFileToTag.txt" shared by "user0"            # TagsContext::addsTheTagToSharedBy()
    Given As "user0" remove all shares from the file named "/myFileToTag.txt"                   # FeatureContext::asRemoveAllSharesFromTheFileNamed()
    When "admin" removes the tag "MyFirstTag" from "/myFileToTag.txt" shared by "user0"         # TagsContext::removesTheTagFromSharedBy()
    Then The response should have a status code "404"                                           # TagsContext::theResponseShouldHaveAStatusCode()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Unassigning a not user-assignable tag from a file shared by someone else as regular user should fail # /var/www/core/build/integration/features/tags.feature:318
    Given user "user0" exists                                                                                    # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    Given user "user1" exists                                                                                    # FeatureContext::assureUserExists()
    Given "admin" creates a "not user-assignable" tag with name "MyFirstTag"                                     # TagsContext::createsATagWithName()
    Given "admin" creates a "normal" tag with name "MySecondTag"                                                 # TagsContext::createsATagWithName()
    Given user "user0" uploads file "data/textfile.txt" to "/myFileToTag.txt"                                    # FeatureContext::userUploadsAFileTo()
    Given As "user0" sending "POST" to "/apps/files_sharing/api/v1/shares" with                                  # CommentsContext::asUserSendingToWith()
      | path      | myFileToTag.txt |
      | shareWith | user1           |
      | shareType | 0               |
    Given As "user0" sending "POST" to "/apps/files_sharing/api/v1/shares" with                                  # CommentsContext::asUserSendingToWith()
      | path      | myFileToTag.txt |
      | shareWith | admin           |
      | shareType | 0               |
    Given "admin" adds the tag "MyFirstTag" to "/myFileToTag.txt" shared by "user0"                              # TagsContext::addsTheTagToSharedBy()
    Given "user0" adds the tag "MySecondTag" to "/myFileToTag.txt" shared by "user0"                             # TagsContext::addsTheTagToSharedBy()
    When "user1" removes the tag "MyFirstTag" from "/myFileToTag.txt" shared by "user0"                          # TagsContext::removesTheTagFromSharedBy()
    Then The response should have a status code "403"                                                            # TagsContext::theResponseShouldHaveAStatusCode()
    And "/myFileToTag.txt" shared by "user0" has the following tags for "user0"                                  # TagsContext::sharedByHasTheFollowingTagsFor()
      | MyFirstTag  |
      | MySecondTag |
    And "/myFileToTag.txt" shared by "user0" has the following tags for "admin"                                  # TagsContext::sharedByHasTheFollowingTagsFor()
      | MyFirstTag  |
      | MySecondTag |
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Unassigning a not user-assignable tag from a file shared by someone else as admin should work # /var/www/core/build/integration/features/tags.feature:343
    Given user "user0" exists                                                                             # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    Given user "user1" exists                                                                             # FeatureContext::assureUserExists()
    Given "admin" creates a "not user-assignable" tag with name "MyFirstTag"                              # TagsContext::createsATagWithName()
    Given "admin" creates a "normal" tag with name "MySecondTag"                                          # TagsContext::createsATagWithName()
    Given user "user0" uploads file "data/textfile.txt" to "/myFileToTag.txt"                             # FeatureContext::userUploadsAFileTo()
    Given As "user0" sending "POST" to "/apps/files_sharing/api/v1/shares" with                           # CommentsContext::asUserSendingToWith()
      | path      | myFileToTag.txt |
      | shareWith | user1           |
      | shareType | 0               |
    Given As "user0" sending "POST" to "/apps/files_sharing/api/v1/shares" with                           # CommentsContext::asUserSendingToWith()
      | path      | myFileToTag.txt |
      | shareWith | admin           |
      | shareType | 0               |
    Given "admin" adds the tag "MyFirstTag" to "/myFileToTag.txt" shared by "user0"                       # TagsContext::addsTheTagToSharedBy()
    Given "user0" adds the tag "MySecondTag" to "/myFileToTag.txt" shared by "user0"                      # TagsContext::addsTheTagToSharedBy()
    When "admin" removes the tag "MyFirstTag" from "/myFileToTag.txt" shared by "user0"                   # TagsContext::removesTheTagFromSharedBy()
    Then The response should have a status code "204"                                                     # TagsContext::theResponseShouldHaveAStatusCode()
    And "/myFileToTag.txt" shared by "user0" has the following tags for "user0"                           # TagsContext::sharedByHasTheFollowingTagsFor()
      | MySecondTag |
    And "/myFileToTag.txt" shared by "user0" has the following tags for "admin"                           # TagsContext::sharedByHasTheFollowingTagsFor()
      | MySecondTag |
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Unassigning a not user-assignable tag from a file unshared by someone else should fail # /var/www/core/build/integration/features/tags.feature:366
    Given user "user0" exists                                                                      # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    Given user "user1" exists                                                                      # FeatureContext::assureUserExists()
    Given "admin" creates a "not user-assignable" tag with name "MyFirstTag"                       # TagsContext::createsATagWithName()
    Given "admin" creates a "normal" tag with name "MySecondTag"                                   # TagsContext::createsATagWithName()
    Given user "user0" uploads file "data/textfile.txt" to "/myFileToTag.txt"                      # FeatureContext::userUploadsAFileTo()
    Given As "user0" sending "POST" to "/apps/files_sharing/api/v1/shares" with                    # CommentsContext::asUserSendingToWith()
      | path      | myFileToTag.txt |
      | shareWith | user1           |
      | shareType | 0               |
    Given As "user0" sending "POST" to "/apps/files_sharing/api/v1/shares" with                    # CommentsContext::asUserSendingToWith()
      | path      | myFileToTag.txt |
      | shareWith | admin           |
      | shareType | 0               |
    Given "admin" adds the tag "MyFirstTag" to "/myFileToTag.txt" shared by "user0"                # TagsContext::addsTheTagToSharedBy()
    Given "user0" adds the tag "MySecondTag" to "/myFileToTag.txt" shared by "user0"               # TagsContext::addsTheTagToSharedBy()
    Given As "user0" remove all shares from the file named "/myFileToTag.txt"                      # FeatureContext::asRemoveAllSharesFromTheFileNamed()
    When "admin" removes the tag "MyFirstTag" from "/myFileToTag.txt" shared by "user0"            # TagsContext::removesTheTagFromSharedBy()
    Then The response should have a status code "404"                                              # TagsContext::theResponseShouldHaveAStatusCode()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Overwriting existing normal tags should fail        # /var/www/core/build/integration/features/tags.feature:386
    Given user "user0" exists                                   # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    Given "user0" creates a "normal" tag with name "MyFirstTag" # TagsContext::createsATagWithName()
    When "user0" creates a "normal" tag with name "MyFirstTag"  # TagsContext::createsATagWithName()
    Then The response should have a status code "409"           # TagsContext::theResponseShouldHaveAStatusCode()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Overwriting existing not user-assignable tags should fail        # /var/www/core/build/integration/features/tags.feature:392
    Given "admin" creates a "not user-assignable" tag with name "MyFirstTag" # TagsContext::createsATagWithName()
    When "admin" creates a "not user-assignable" tag with name "MyFirstTag"  # TagsContext::createsATagWithName()
    Then The response should have a status code "409"                        # TagsContext::theResponseShouldHaveAStatusCode()
      Expected 409, got 403 (Exception)
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Overwriting existing not user-visible tags should fail        # /var/www/core/build/integration/features/tags.feature:397
    Given "admin" creates a "not user-visible" tag with name "MyFirstTag" # TagsContext::createsATagWithName()
    When "admin" creates a "not user-visible" tag with name "MyFirstTag"  # TagsContext::createsATagWithName()
    Then The response should have a status code "409"                     # TagsContext::theResponseShouldHaveAStatusCode()
      Expected 409, got 403 (Exception)
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Getting tags only works with access to the file                        # /var/www/core/build/integration/features/tags.feature:402
    Given user "user0" exists                                                      # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    Given user "user1" exists                                                      # FeatureContext::assureUserExists()
    Given "admin" creates a "normal" tag with name "MyFirstTag"                    # TagsContext::createsATagWithName()
    Given user "user0" uploads file "data/textfile.txt" to "/myFileToTag.txt"      # FeatureContext::userUploadsAFileTo()
    When "user0" adds the tag "MyFirstTag" to "/myFileToTag.txt" shared by "user0" # TagsContext::addsTheTagToSharedBy()
    And "/myFileToTag.txt" shared by "user0" has the following tags for "user0"    # TagsContext::sharedByHasTheFollowingTagsFor()
      | MyFirstTag |
    And "/myFileToTag.txt" shared by "user0" has the following tags for "user1"    # TagsContext::sharedByHasTheFollowingTagsFor()
      |  |
    And The response should have a status code "404"                               # TagsContext::theResponseShouldHaveAStatusCode()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: User can assign tags when in the tag's groups                                                 # /var/www/core/build/integration/features/tags.feature:414
    Given user "user0" exists                                                                             # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    Given group "group1" exists                                                                           # FeatureContext::assureGroupExists()
    Given user "user0" belongs to group "group1"                                                          # FeatureContext::assureUserBelongsToGroup()
    When "admin" creates a "not user-assignable" tag with name "TagWithGroups" and groups "group1|group2" # TagsContext::createsATagWithNameAndGroups()
    Then The response should have a status code "201"                                                     # TagsContext::theResponseShouldHaveAStatusCode()
    And the user "user0" can assign the "not user-assignable" tag with name "TagWithGroups"               # TagsContext::theUserCanAssignTheTag()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: User cannot assign tags when not in the tag's groups                                          # /var/www/core/build/integration/features/tags.feature:422
    Given user "user0" exists                                                                             # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When "admin" creates a "not user-assignable" tag with name "TagWithGroups" and groups "group1|group2" # TagsContext::createsATagWithNameAndGroups()
    Then The response should have a status code "201"                                                     # TagsContext::theResponseShouldHaveAStatusCode()
    And the user "user0" cannot assign the "not user-assignable" tag with name "TagWithGroups"            # TagsContext::theUserCanAssignTheTag()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Assign a normal tag to a file                                     # /var/www/core/build/integration/features/tags.feature:428
    Given user "user0" exists                                                 # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And "admin" creates a "normal" tag with name "Etiqueta"                   # TagsContext::createsATagWithName()
    And As an "user0"                                                         # FeatureContext::asAn()
    When "user0" adds the tag "Etiqueta" to "/textfile0.txt" owned by "user0" # TagsContext::addsTheTagToSharedBy()
    Then The response should have a status code "201"                         # TagsContext::theResponseShouldHaveAStatusCode()
    And "textfile0.txt" owned by "user0" has the following tags               # TagsContext::sharedByHasTheFollowingTags()
      | Etiqueta |
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

Feature: transfer-ownership

  @no_encryption
  Scenario: transfering ownership of a file                                                                  # /var/www/core/build/integration/features/transfer-ownership.feature:4
    Given user "user0" exists                                                                                # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                                                  # FeatureContext::assureUserExists()
    And User "user0" uploads file "data/textfile.txt" to "/somefile.txt"                                     # FeatureContext::userUploadsAFileTo()
    When transfering ownership from "user0" to "user1"                                                       # CommandLineContext::transferingOwnership()
    And the command was successful                                                                           # CommandLineContext::theCommandWasSuccessful()
    And As an "user1"                                                                                        # FeatureContext::asAn()
    And using received transfer folder of "user1" as dav path                                                # CommandLineContext::usingTransferFolderAsDavPath()
    Then Downloaded content when downloading file "/somefile.txt" with range "bytes=0-6" should be "This is" # FeatureContext::downloadedContentWhenDownloadindShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  @no_encryption
  Scenario: transfering ownership of a folder                                                                     # /var/www/core/build/integration/features/transfer-ownership.feature:15
    Given user "user0" exists                                                                                     # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                                                       # FeatureContext::assureUserExists()
    And User "user0" created a folder "/test"                                                                     # FeatureContext::userCreatedAFolder()
    And User "user0" uploads file "data/textfile.txt" to "/test/somefile.txt"                                     # FeatureContext::userUploadsAFileTo()
    When transfering ownership from "user0" to "user1"                                                            # CommandLineContext::transferingOwnership()
    And the command was successful                                                                                # CommandLineContext::theCommandWasSuccessful()
    And As an "user1"                                                                                             # FeatureContext::asAn()
    And using received transfer folder of "user1" as dav path                                                     # CommandLineContext::usingTransferFolderAsDavPath()
    Then Downloaded content when downloading file "/test/somefile.txt" with range "bytes=0-6" should be "This is" # FeatureContext::downloadedContentWhenDownloadindShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  @no_encryption
  Scenario: transfering ownership of file shares                                                             # /var/www/core/build/integration/features/transfer-ownership.feature:27
    Given user "user0" exists                                                                                # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                                                  # FeatureContext::assureUserExists()
    And user "user2" exists                                                                                  # FeatureContext::assureUserExists()
    And User "user0" uploads file "data/textfile.txt" to "/somefile.txt"                                     # FeatureContext::userUploadsAFileTo()
    And file "/somefile.txt" of user "user0" is shared with user "user2" with permissions 19                 # FeatureContext::assureFileIsShared()
    When transfering ownership from "user0" to "user1"                                                       # CommandLineContext::transferingOwnership()
    And the command was successful                                                                           # CommandLineContext::theCommandWasSuccessful()
    And As an "user2"                                                                                        # FeatureContext::asAn()
    Then Downloaded content when downloading file "/somefile.txt" with range "bytes=0-6" should be "This is" # FeatureContext::downloadedContentWhenDownloadindShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  @no_encryption
  Scenario: transfering ownership of folder shared with third user                                                # /var/www/core/build/integration/features/transfer-ownership.feature:39
    Given user "user0" exists                                                                                     # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                                                       # FeatureContext::assureUserExists()
    And user "user2" exists                                                                                       # FeatureContext::assureUserExists()
    And User "user0" created a folder "/test"                                                                     # FeatureContext::userCreatedAFolder()
    And User "user0" uploads file "data/textfile.txt" to "/test/somefile.txt"                                     # FeatureContext::userUploadsAFileTo()
    And folder "/test" of user "user0" is shared with user "user2" with permissions 31                            # FeatureContext::assureFileIsShared()
    When transfering ownership from "user0" to "user1"                                                            # CommandLineContext::transferingOwnership()
    And the command was successful                                                                                # CommandLineContext::theCommandWasSuccessful()
    And As an "user2"                                                                                             # FeatureContext::asAn()
    Then Downloaded content when downloading file "/test/somefile.txt" with range "bytes=0-6" should be "This is" # FeatureContext::downloadedContentWhenDownloadindShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  @no_encryption
  Scenario: transfering ownership of folder shared with transfer recipient                                       # /var/www/core/build/integration/features/transfer-ownership.feature:52
    Given user "user0" exists                                                                                    # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                                                      # FeatureContext::assureUserExists()
    And User "user0" created a folder "/test"                                                                    # FeatureContext::userCreatedAFolder()
    And User "user0" uploads file "data/textfile.txt" to "/test/somefile.txt"                                    # FeatureContext::userUploadsAFileTo()
    And folder "/test" of user "user0" is shared with user "user1" with permissions 31                           # FeatureContext::assureFileIsShared()
    When transfering ownership from "user0" to "user1"                                                           # CommandLineContext::transferingOwnership()
    And the command was successful                                                                               # CommandLineContext::theCommandWasSuccessful()
    And As an "user1"                                                                                            # FeatureContext::asAn()
    Then as "user1" the folder "/test" does not exist                                                            # FeatureContext::asTheFileOrFolderDoesNotExist()
    And using received transfer folder of "user1" as dav path                                                    # CommandLineContext::usingTransferFolderAsDavPath()
    And Downloaded content when downloading file "/test/somefile.txt" with range "bytes=0-6" should be "This is" # FeatureContext::downloadedContentWhenDownloadindShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  @no_encryption
  Scenario: transfering ownership of folder doubly shared with third user                                         # /var/www/core/build/integration/features/transfer-ownership.feature:66
    Given group "group1" exists                                                                                   # FeatureContext::assureGroupExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/groups [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user0" exists                                                                                       # FeatureContext::assureUserExists()
    And user "user1" exists                                                                                       # FeatureContext::assureUserExists()
    And user "user2" exists                                                                                       # FeatureContext::assureUserExists()
    And user "user2" belongs to group "group1"                                                                    # FeatureContext::assureUserBelongsToGroup()
    And User "user0" created a folder "/test"                                                                     # FeatureContext::userCreatedAFolder()
    And User "user0" uploads file "data/textfile.txt" to "/test/somefile.txt"                                     # FeatureContext::userUploadsAFileTo()
    And folder "/test" of user "user0" is shared with group "group1" with permissions 31                          # FeatureContext::assureFileIsSharedWithGroup()
    And folder "/test" of user "user0" is shared with user "user2" with permissions 31                            # FeatureContext::assureFileIsShared()
    When transfering ownership from "user0" to "user1"                                                            # CommandLineContext::transferingOwnership()
    And the command was successful                                                                                # CommandLineContext::theCommandWasSuccessful()
    And As an "user2"                                                                                             # FeatureContext::asAn()
    Then Downloaded content when downloading file "/test/somefile.txt" with range "bytes=0-6" should be "This is" # FeatureContext::downloadedContentWhenDownloadindShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  @no_encryption
  Scenario: transfering ownership does not transfer received shares                    # /var/www/core/build/integration/features/transfer-ownership.feature:82
    Given user "user0" exists                                                          # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                            # FeatureContext::assureUserExists()
    And user "user2" exists                                                            # FeatureContext::assureUserExists()
    And User "user2" created a folder "/test"                                          # FeatureContext::userCreatedAFolder()
    And folder "/test" of user "user2" is shared with user "user0" with permissions 31 # FeatureContext::assureFileIsShared()
    When transfering ownership from "user0" to "user1"                                 # CommandLineContext::transferingOwnership()
    And the command was successful                                                     # CommandLineContext::theCommandWasSuccessful()
    And As an "user1"                                                                  # FeatureContext::asAn()
    And using received transfer folder of "user1" as dav path                          # CommandLineContext::usingTransferFolderAsDavPath()
    Then as "user1" the folder "/test" does not exist                                  # FeatureContext::asTheFileOrFolderDoesNotExist()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  @no_encryption @local_storage
  Scenario: transfering ownership does not transfer external storage # /var/www/core/build/integration/features/transfer-ownership.feature:96
    Given user "user0" exists                                        # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                          # FeatureContext::assureUserExists()
    When transfering ownership from "user0" to "user1"               # CommandLineContext::transferingOwnership()
    And the command was successful                                   # CommandLineContext::theCommandWasSuccessful()
    And As an "user1"                                                # FeatureContext::asAn()
    And using received transfer folder of "user1" as dav path        # CommandLineContext::usingTransferFolderAsDavPath()
    Then as "user1" the folder "/local_storage" does not exist       # FeatureContext::asTheFileOrFolderDoesNotExist()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  @no_encryption
  Scenario: transfering ownership does not fail with shared trashed files                  # /var/www/core/build/integration/features/transfer-ownership.feature:106
    Given user "user0" exists                                                              # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                                # FeatureContext::assureUserExists()
    And user "user2" exists                                                                # FeatureContext::assureUserExists()
    And User "user0" created a folder "/sub"                                               # FeatureContext::userCreatedAFolder()
    And User "user0" created a folder "/sub/test"                                          # FeatureContext::userCreatedAFolder()
    And folder "/sub/test" of user "user0" is shared with user "user2" with permissions 31 # FeatureContext::assureFileIsShared()
    And User "user0" deletes folder "/sub"                                                 # FeatureContext::userDeletesFile()
    When transfering ownership from "user0" to "user1"                                     # CommandLineContext::transferingOwnership()
    Then the command was successful                                                        # CommandLineContext::theCommandWasSuccessful()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: transfering ownership fails with invalid source user          # /var/www/core/build/integration/features/transfer-ownership.feature:117
    Given user "user0" exists                                             # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When transfering ownership from "invalid_user" to "user0"             # CommandLineContext::transferingOwnership()
    Then the command error output contains the text "Unknown source user" # CommandLineContext::theCommandErrorOutputContainsTheText()
    And the command failed with exit code 1                               # CommandLineContext::theCommandFailedWithExitCode()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: transfering ownership fails with invalid target user          # /var/www/core/build/integration/features/transfer-ownership.feature:123
    Given user "user0" exists                                             # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When transfering ownership from "user0" to "invalid_user"             # CommandLineContext::transferingOwnership()
    Then the command error output contains the text "Unknown target user" # CommandLineContext::theCommandErrorOutputContainsTheText()
    And the command failed with exit code 1                               # CommandLineContext::theCommandFailedWithExitCode()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

Feature: trashbin

  Background:                           # /var/www/core/build/integration/features/trashbin.feature:2
    Given using api version "1"         # FeatureContext::usingApiVersion()
    And using old dav path              # FeatureContext::usingOldDavPath()
    And As an "admin"                   # FeatureContext::asAn()
    And app "files_trashbin" is enabled # FeatureContext::appIsEnabled()
      Client error response [url] http://localhost:8080/ocs/v2.php/cloud/apps?filter=enabled [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)

  Scenario: deleting a file moves it to trashbin              # /var/www/core/build/integration/features/trashbin.feature:8
    Given As an "admin"                                       # FeatureContext::asAn()
    And user "user0" exists                                   # FeatureContext::assureUserExists()
    When User "user0" deletes file "/textfile0.txt"           # FeatureContext::userDeletesFile()
    Then as "user0" the file "/textfile0.txt" exists in trash # FeatureContext::asTheFileOrFolderExistsInTrash()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

Feature: webdav-related

  Background:                   # /var/www/core/build/integration/features/webdav-related.feature:2
    Given using api version "1" # FeatureContext::usingApiVersion()

  Scenario: Unauthenticated call old dav path # /var/www/core/build/integration/features/webdav-related.feature:5
    Given using old dav path                  # FeatureContext::usingOldDavPath()
    When connecting to dav endpoint           # FeatureContext::connectingToDavEndpoint()
    Then the HTTP status code should be "401" # FeatureContext::theHTTPStatusCodeShouldBe()
      Failed asserting that 403 matches expected '401'.
    And there are no duplicate headers        # FeatureContext::thereAreNoDuplicateHeaders()
    And The following headers should be set   # FeatureContext::theFollowingHeadersShouldBeSet()
      | WWW-Authenticate | Basic realm="ownCloud" |
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Unauthenticated call new dav path # /var/www/core/build/integration/features/webdav-related.feature:13
    Given using new dav path                  # FeatureContext::usingNewDavPath()
    When connecting to dav endpoint           # FeatureContext::connectingToDavEndpoint()
    Then the HTTP status code should be "401" # FeatureContext::theHTTPStatusCodeShouldBe()
      Failed asserting that 403 matches expected '401'.
    And there are no duplicate headers        # FeatureContext::thereAreNoDuplicateHeaders()
    And The following headers should be set   # FeatureContext::theFollowingHeadersShouldBeSet()
      | WWW-Authenticate | Basic realm="ownCloud" |
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Moving a file                                                                                         # /var/www/core/build/integration/features/webdav-related.feature:21
    Given using old dav path                                                                                      # FeatureContext::usingOldDavPath()
    And As an "admin"                                                                                             # FeatureContext::asAn()
    And user "user0" exists                                                                                       # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And As an "user0"                                                                                             # FeatureContext::asAn()
    When User "user0" moves file "/welcome.txt" to "/FOLDER/welcome.txt"                                          # FeatureContext::userMovesFile()
    Then the HTTP status code should be "201"                                                                     # FeatureContext::theHTTPStatusCodeShouldBe()
    And Downloaded content when downloading file "/FOLDER/welcome.txt" with range "bytes=0-6" should be "Welcome" # FeatureContext::downloadedContentWhenDownloadindShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Moving and overwriting a file old way                                                            # /var/www/core/build/integration/features/webdav-related.feature:30
    Given using old dav path                                                                                 # FeatureContext::usingOldDavPath()
    And As an "admin"                                                                                        # FeatureContext::asAn()
    And user "user0" exists                                                                                  # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And As an "user0"                                                                                        # FeatureContext::asAn()
    When User "user0" moves file "/welcome.txt" to "/textfile0.txt"                                          # FeatureContext::userMovesFile()
    Then the HTTP status code should be "204"                                                                # FeatureContext::theHTTPStatusCodeShouldBe()
    And Downloaded content when downloading file "/textfile0.txt" with range "bytes=0-6" should be "Welcome" # FeatureContext::downloadedContentWhenDownloadindShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Moving a file to a folder with no permissions                      # /var/www/core/build/integration/features/webdav-related.feature:39
    Given using old dav path                                                   # FeatureContext::usingOldDavPath()
    And As an "admin"                                                          # FeatureContext::asAn()
    And user "user0" exists                                                    # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                    # FeatureContext::assureUserExists()
    And As an "user1"                                                          # FeatureContext::asAn()
    And user "user1" created a folder "/testshare"                             # FeatureContext::userCreatedAFolder()
    And as "user1" creating a share with                                       # FeatureContext::asCreatingAShareWith()
      | path        | testshare |
      | shareType   | 0         |
      | permissions | 1         |
      | shareWith   | user0     |
    And As an "user0"                                                          # FeatureContext::asAn()
    And User "user0" moves file "/textfile0.txt" to "/testshare/textfile0.txt" # FeatureContext::userMovesFile()
    And the HTTP status code should be "403"                                   # FeatureContext::theHTTPStatusCodeShouldBe()
    When Downloading file "/testshare/textfile0.txt"                           # FeatureContext::downloadingFile()
    Then the HTTP status code should be "404"                                  # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Moving a file to overwrite a file in a folder with no permissions                                              # /var/www/core/build/integration/features/webdav-related.feature:57
    Given using old dav path                                                                                               # FeatureContext::usingOldDavPath()
    And As an "admin"                                                                                                      # FeatureContext::asAn()
    And user "user0" exists                                                                                                # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                                                                # FeatureContext::assureUserExists()
    And As an "user1"                                                                                                      # FeatureContext::asAn()
    And user "user1" created a folder "/testshare"                                                                         # FeatureContext::userCreatedAFolder()
    And as "user1" creating a share with                                                                                   # FeatureContext::asCreatingAShareWith()
      | path        | testshare |
      | shareType   | 0         |
      | permissions | 1         |
      | shareWith   | user0     |
    And User "user1" copies file "/welcome.txt" to "/testshare/overwritethis.txt"                                          # FeatureContext::userCopiesFile()
    And As an "user0"                                                                                                      # FeatureContext::asAn()
    When User "user0" moves file "/textfile0.txt" to "/testshare/overwritethis.txt"                                        # FeatureContext::userMovesFile()
    Then the HTTP status code should be "403"                                                                              # FeatureContext::theHTTPStatusCodeShouldBe()
    And Downloaded content when downloading file "/testshare/overwritethis.txt" with range "bytes=0-6" should be "Welcome" # FeatureContext::downloadedContentWhenDownloadindShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Copying a file                                                                                        # /var/www/core/build/integration/features/webdav-related.feature:75
    Given using old dav path                                                                                      # FeatureContext::usingOldDavPath()
    And As an "admin"                                                                                             # FeatureContext::asAn()
    And user "user0" exists                                                                                       # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And As an "user0"                                                                                             # FeatureContext::asAn()
    When User "user0" copies file "/welcome.txt" to "/FOLDER/welcome.txt"                                         # FeatureContext::userCopiesFile()
    Then the HTTP status code should be "201"                                                                     # FeatureContext::theHTTPStatusCodeShouldBe()
    And Downloaded content when downloading file "/FOLDER/welcome.txt" with range "bytes=0-6" should be "Welcome" # FeatureContext::downloadedContentWhenDownloadindShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Copying and overwriting a file                                                                   # /var/www/core/build/integration/features/webdav-related.feature:84
    Given using old dav path                                                                                 # FeatureContext::usingOldDavPath()
    And As an "admin"                                                                                        # FeatureContext::asAn()
    And user "user0" exists                                                                                  # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And As an "user0"                                                                                        # FeatureContext::asAn()
    When User "user0" copies file "/welcome.txt" to "/textfile1.txt"                                         # FeatureContext::userCopiesFile()
    Then the HTTP status code should be "204"                                                                # FeatureContext::theHTTPStatusCodeShouldBe()
    And Downloaded content when downloading file "/textfile1.txt" with range "bytes=0-6" should be "Welcome" # FeatureContext::downloadedContentWhenDownloadindShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Copying a file to a folder with no permissions                       # /var/www/core/build/integration/features/webdav-related.feature:93
    Given using old dav path                                                     # FeatureContext::usingOldDavPath()
    And As an "admin"                                                            # FeatureContext::asAn()
    And user "user0" exists                                                      # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                      # FeatureContext::assureUserExists()
    And As an "user1"                                                            # FeatureContext::asAn()
    And user "user1" created a folder "/testshare"                               # FeatureContext::userCreatedAFolder()
    And as "user1" creating a share with                                         # FeatureContext::asCreatingAShareWith()
      | path        | testshare |
      | shareType   | 0         |
      | permissions | 1         |
      | shareWith   | user0     |
    And As an "user0"                                                            # FeatureContext::asAn()
    When User "user0" copies file "/textfile0.txt" to "/testshare/textfile0.txt" # FeatureContext::userCopiesFile()
    Then the HTTP status code should be "403"                                    # FeatureContext::theHTTPStatusCodeShouldBe()
    And Downloading file "/testshare/textfile0.txt"                              # FeatureContext::downloadingFile()
    And the HTTP status code should be "404"                                     # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Copying a file to overwrite a file into a folder with no permissions                                           # /var/www/core/build/integration/features/webdav-related.feature:111
    Given using old dav path                                                                                               # FeatureContext::usingOldDavPath()
    And As an "admin"                                                                                                      # FeatureContext::asAn()
    And user "user0" exists                                                                                                # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                                                                # FeatureContext::assureUserExists()
    And As an "user1"                                                                                                      # FeatureContext::asAn()
    And user "user1" created a folder "/testshare"                                                                         # FeatureContext::userCreatedAFolder()
    And as "user1" creating a share with                                                                                   # FeatureContext::asCreatingAShareWith()
      | path        | testshare |
      | shareType   | 0         |
      | permissions | 1         |
      | shareWith   | user0     |
    And User "user1" copies file "/welcome.txt" to "/testshare/overwritethis.txt"                                          # FeatureContext::userCopiesFile()
    And As an "user0"                                                                                                      # FeatureContext::asAn()
    When User "user0" copies file "/textfile0.txt" to "/testshare/overwritethis.txt"                                       # FeatureContext::userCopiesFile()
    Then the HTTP status code should be "403"                                                                              # FeatureContext::theHTTPStatusCodeShouldBe()
    And Downloaded content when downloading file "/testshare/overwritethis.txt" with range "bytes=0-6" should be "Welcome" # FeatureContext::downloadedContentWhenDownloadindShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: download a file with range                              # /var/www/core/build/integration/features/webdav-related.feature:129
    Given using old dav path                                        # FeatureContext::usingOldDavPath()
    And As an "admin"                                               # FeatureContext::asAn()
    When Downloading file "/welcome.txt" with range "bytes=51-77"   # FeatureContext::downloadFileWithRange()
      Client error response [url] http://localhost:8080/remote.php/webdav/welcome.txt [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    Then Downloaded content should be "example file for developers" # FeatureContext::downloadedContentShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Upload forbidden if quota is 0                            # /var/www/core/build/integration/features/webdav-related.feature:135
    Given using old dav path                                          # FeatureContext::usingOldDavPath()
    And As an "admin"                                                 # FeatureContext::asAn()
    And user "user0" exists                                           # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user0" has a quota of "0"                               # FeatureContext::userHasAQuotaOf()
    When User "user0" uploads file "data/textfile.txt" to "/asdf.txt" # FeatureContext::userUploadsAFileTo()
    Then the HTTP status code should be "507"                         # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Retrieving folder quota when no quota is set                                            # /var/www/core/build/integration/features/webdav-related.feature:143
    Given using old dav path                                                                        # FeatureContext::usingOldDavPath()
    And As an "admin"                                                                               # FeatureContext::asAn()
    And user "user0" exists                                                                         # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When user "user0" has unlimited quota                                                           # FeatureContext::userHasUnlimitedQuota()
    Then as "user0" gets properties of folder "/" with                                              # FeatureContext::asGetsPropertiesOfFolderWith()
      | {DAV:}quota-available-bytes |
    And the single response should contain a property "{DAV:}quota-available-bytes" with value "-3" # FeatureContext::theSingleResponseShouldContainAPropertyWithValue()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Retrieving folder quota when quota is set                                                     # /var/www/core/build/integration/features/webdav-related.feature:152
    Given using old dav path                                                                              # FeatureContext::usingOldDavPath()
    And As an "admin"                                                                                     # FeatureContext::asAn()
    And user "user0" exists                                                                               # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When user "user0" has a quota of "10 MB"                                                              # FeatureContext::userHasAQuotaOf()
    Then as "user0" gets properties of folder "/" with                                                    # FeatureContext::asGetsPropertiesOfFolderWith()
      | {DAV:}quota-available-bytes |
    And the single response should contain a property "{DAV:}quota-available-bytes" with value "10485358" # FeatureContext::theSingleResponseShouldContainAPropertyWithValue()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Retrieving folder quota of shared folder with quota when no quota is set for recipient        # /var/www/core/build/integration/features/webdav-related.feature:161
    Given using old dav path                                                                              # FeatureContext::usingOldDavPath()
    And As an "admin"                                                                                     # FeatureContext::asAn()
    And user "user0" exists                                                                               # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                                               # FeatureContext::assureUserExists()
    And user "user0" has unlimited quota                                                                  # FeatureContext::userHasUnlimitedQuota()
    And user "user1" has a quota of "10 MB"                                                               # FeatureContext::userHasAQuotaOf()
    And As an "user1"                                                                                     # FeatureContext::asAn()
    And user "user1" created a folder "/testquota"                                                        # FeatureContext::userCreatedAFolder()
    And as "user1" creating a share with                                                                  # FeatureContext::asCreatingAShareWith()
      | path        | testquota |
      | shareType   | 0         |
      | permissions | 31        |
      | shareWith   | user0     |
    Then as "user0" gets properties of folder "/testquota" with                                           # FeatureContext::asGetsPropertiesOfFolderWith()
      | {DAV:}quota-available-bytes |
    And the single response should contain a property "{DAV:}quota-available-bytes" with value "10485358" # FeatureContext::theSingleResponseShouldContainAPropertyWithValue()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Uploading a file as recipient using webdav having quota             # /var/www/core/build/integration/features/webdav-related.feature:179
    Given using old dav path                                                    # FeatureContext::usingOldDavPath()
    And As an "admin"                                                           # FeatureContext::asAn()
    And user "user0" exists                                                     # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                     # FeatureContext::assureUserExists()
    And user "user0" has a quota of "10 MB"                                     # FeatureContext::userHasAQuotaOf()
    And user "user1" has a quota of "10 MB"                                     # FeatureContext::userHasAQuotaOf()
    And As an "user1"                                                           # FeatureContext::asAn()
    And user "user1" created a folder "/testquota"                              # FeatureContext::userCreatedAFolder()
    And as "user1" creating a share with                                        # FeatureContext::asCreatingAShareWith()
      | path        | testquota |
      | shareType   | 0         |
      | permissions | 31        |
      | shareWith   | user0     |
    And As an "user0"                                                           # FeatureContext::asAn()
    When User "user0" uploads file "data/textfile.txt" to "/testquota/asdf.txt" # FeatureContext::userUploadsAFileTo()
    Then the HTTP status code should be "201"                                   # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Retrieving folder quota when quota is set and a file was uploaded                         # /var/www/core/build/integration/features/webdav-related.feature:197
    Given using old dav path                                                                          # FeatureContext::usingOldDavPath()
    And As an "admin"                                                                                 # FeatureContext::asAn()
    And user "user0" exists                                                                           # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user0" has a quota of "1 KB"                                                            # FeatureContext::userHasAQuotaOf()
    And user "user0" adds a file of 93 bytes to "/prueba.txt"                                         # FeatureContext::userAddsAFileTo()
    When as "user0" gets properties of folder "/" with                                                # FeatureContext::asGetsPropertiesOfFolderWith()
      | {DAV:}quota-available-bytes |
    Then the single response should contain a property "{DAV:}quota-available-bytes" with value "529" # FeatureContext::theSingleResponseShouldContainAPropertyWithValue()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Retrieving folder quota when quota is set and a file was recieved                         # /var/www/core/build/integration/features/webdav-related.feature:207
    Given using old dav path                                                                          # FeatureContext::usingOldDavPath()
    And As an "admin"                                                                                 # FeatureContext::asAn()
    And user "user0" exists                                                                           # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                                           # FeatureContext::assureUserExists()
    And user "user1" has a quota of "1 KB"                                                            # FeatureContext::userHasAQuotaOf()
    And user "user0" adds a file of 93 bytes to "/user0.txt"                                          # FeatureContext::userAddsAFileTo()
    And file "user0.txt" of user "user0" is shared with user "user1"                                  # FeatureContext::assureFileIsShared()
    When as "user1" gets properties of folder "/" with                                                # FeatureContext::asGetsPropertiesOfFolderWith()
      | {DAV:}quota-available-bytes |
    Then the single response should contain a property "{DAV:}quota-available-bytes" with value "622" # FeatureContext::theSingleResponseShouldContainAPropertyWithValue()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: download a public shared file with range                 # /var/www/core/build/integration/features/webdav-related.feature:219
    Given user "user0" exists                                        # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And As an "user0"                                                # FeatureContext::asAn()
    When creating a share with                                       # FeatureContext::creatingShare()
      | path      | welcome.txt |
      | shareType | 3           |
    And Downloading last public shared file with range "bytes=51-77" # FeatureContext::downloadPublicFileWithRange()
    Then Downloaded content should be "example file for developers"  # FeatureContext::downloadedContentShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: download a public shared file inside a folder with range                             # /var/www/core/build/integration/features/webdav-related.feature:228
    Given user "user0" exists                                                                    # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And As an "user0"                                                                            # FeatureContext::asAn()
    When creating a share with                                                                   # FeatureContext::creatingShare()
      | path      | PARENT |
      | shareType | 3      |
    And Downloading last public shared file inside a folder "/parent.txt" with range "bytes=1-7" # FeatureContext::downloadPublicFileInsideAFolderWithRange()
    Then Downloaded content should be "wnCloud"                                                  # FeatureContext::downloadedContentShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Downloading a file on the old endpoint should serve security headers # /var/www/core/build/integration/features/webdav-related.feature:237
    Given using old dav path                                                     # FeatureContext::usingOldDavPath()
    And As an "admin"                                                            # FeatureContext::asAn()
    When Downloading file "/welcome.txt"                                         # FeatureContext::downloadingFile()
    Then The following headers should be set                                     # FeatureContext::theFollowingHeadersShouldBeSet()
      | Content-Disposition               | attachment; filename*=UTF-8''welcome.txt; filename="welcome.txt" |
      | Content-Security-Policy           | default-src 'none';                                              |
      | X-Content-Type-Options            | nosniff                                                          |
      | X-Download-Options                | noopen                                                           |
      | X-Frame-Options                   | Sameorigin                                                       |
      | X-Permitted-Cross-Domain-Policies | none                                                             |
      | X-Robots-Tag                      | none                                                             |
      | X-XSS-Protection                  | 1; mode=block                                                    |
      Expected value 'attachment; filename*=UTF-8''welcome.txt; filename="welcome.txt"' for header 'Content-Disposition', got '' (Exception)
    And Downloaded content should start with "Welcome to your ownCloud account!" # FeatureContext::downloadedContentShouldStartWith()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Doing a GET with a web login should work without CSRF token on the old backend # /var/www/core/build/integration/features/webdav-related.feature:252
    Given Logging in using web as "admin"                                                  # FeatureContext::loggingInUsingWebAs()
      Client error response [url] http://localhost:8080/login [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When Sending a "GET" to "/remote.php/webdav/welcome.txt" without requesttoken          # FeatureContext::sendingAToWithoutRequesttoken()
    Then Downloaded content should start with "Welcome to your ownCloud account!"          # FeatureContext::downloadedContentShouldStartWith()
    And the HTTP status code should be "200"                                               # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Doing a GET with a web login should work with CSRF token on the old backend # /var/www/core/build/integration/features/webdav-related.feature:258
    Given Logging in using web as "admin"                                               # FeatureContext::loggingInUsingWebAs()
      Client error response [url] http://localhost:8080/login [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When Sending a "GET" to "/remote.php/webdav/welcome.txt" with requesttoken          # FeatureContext::sendingAToWithRequesttoken()
    Then Downloaded content should start with "Welcome to your ownCloud account!"       # FeatureContext::downloadedContentShouldStartWith()
    And the HTTP status code should be "200"                                            # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Doing a PROPFIND with a web login should not work without CSRF token on the old backend # /var/www/core/build/integration/features/webdav-related.feature:264
    Given Logging in using web as "admin"                                                           # FeatureContext::loggingInUsingWebAs()
      Client error response [url] http://localhost:8080/login [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When Sending a "PROPFIND" to "/remote.php/webdav/welcome.txt" without requesttoken              # FeatureContext::sendingAToWithoutRequesttoken()
    Then the HTTP status code should be "401"                                                       # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Doing a PROPFIND with a web login should work with CSRF token on the old backend # /var/www/core/build/integration/features/webdav-related.feature:269
    Given Logging in using web as "admin"                                                    # FeatureContext::loggingInUsingWebAs()
      Client error response [url] http://localhost:8080/login [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    When Sending a "PROPFIND" to "/remote.php/webdav/welcome.txt" with requesttoken          # FeatureContext::sendingAToWithRequesttoken()
    Then the HTTP status code should be "207"                                                # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Upload chunked file asc                                                     # /var/www/core/build/integration/features/webdav-related.feature:274
    Given user "user0" exists                                                           # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user0" uploads chunk file "1" of "3" with "AAAAA" to "/myChunkedFile.txt" # FeatureContext::userUploadsChunkFileOfWithToWithChecksum()
    And user "user0" uploads chunk file "2" of "3" with "BBBBB" to "/myChunkedFile.txt" # FeatureContext::userUploadsChunkFileOfWithToWithChecksum()
    And user "user0" uploads chunk file "3" of "3" with "CCCCC" to "/myChunkedFile.txt" # FeatureContext::userUploadsChunkFileOfWithToWithChecksum()
    When As an "user0"                                                                  # FeatureContext::asAn()
    And Downloading file "/myChunkedFile.txt"                                           # FeatureContext::downloadingFile()
    Then Downloaded content should be "AAAAABBBBBCCCCC"                                 # FeatureContext::downloadedContentShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Upload chunked file desc                                                    # /var/www/core/build/integration/features/webdav-related.feature:283
    Given user "user0" exists                                                           # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user0" uploads chunk file "3" of "3" with "CCCCC" to "/myChunkedFile.txt" # FeatureContext::userUploadsChunkFileOfWithToWithChecksum()
    And user "user0" uploads chunk file "2" of "3" with "BBBBB" to "/myChunkedFile.txt" # FeatureContext::userUploadsChunkFileOfWithToWithChecksum()
    And user "user0" uploads chunk file "1" of "3" with "AAAAA" to "/myChunkedFile.txt" # FeatureContext::userUploadsChunkFileOfWithToWithChecksum()
    When As an "user0"                                                                  # FeatureContext::asAn()
    And Downloading file "/myChunkedFile.txt"                                           # FeatureContext::downloadingFile()
    Then Downloaded content should be "AAAAABBBBBCCCCC"                                 # FeatureContext::downloadedContentShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Upload chunked file random                                                  # /var/www/core/build/integration/features/webdav-related.feature:292
    Given user "user0" exists                                                           # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user0" uploads chunk file "2" of "3" with "BBBBB" to "/myChunkedFile.txt" # FeatureContext::userUploadsChunkFileOfWithToWithChecksum()
    And user "user0" uploads chunk file "3" of "3" with "CCCCC" to "/myChunkedFile.txt" # FeatureContext::userUploadsChunkFileOfWithToWithChecksum()
    And user "user0" uploads chunk file "1" of "3" with "AAAAA" to "/myChunkedFile.txt" # FeatureContext::userUploadsChunkFileOfWithToWithChecksum()
    When As an "user0"                                                                  # FeatureContext::asAn()
    And Downloading file "/myChunkedFile.txt"                                           # FeatureContext::downloadingFile()
    Then Downloaded content should be "AAAAABBBBBCCCCC"                                 # FeatureContext::downloadedContentShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: A file that is not shared does not have a share-types property                   # /var/www/core/build/integration/features/webdav-related.feature:301
    Given user "user0" exists                                                                # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user0" created a folder "/test"                                                # FeatureContext::userCreatedAFolder()
    When as "user0" gets properties of folder "/test" with                                   # FeatureContext::asGetsPropertiesOfFolderWith()
      | {http://owncloud.org/ns}share-types |
    Then the response should contain an empty property "{http://owncloud.org/ns}share-types" # FeatureContext::theResponseShouldContainAnEmptyProperty()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: A file that is shared to a user has a share-types property # /var/www/core/build/integration/features/webdav-related.feature:308
    Given user "user0" exists                                          # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                            # FeatureContext::assureUserExists()
    And user "user0" created a folder "/test"                          # FeatureContext::userCreatedAFolder()
    And as "user0" creating a share with                               # FeatureContext::asCreatingAShareWith()
      | path        | test  |
      | shareType   | 0     |
      | permissions | 31    |
      | shareWith   | user1 |
    When as "user0" gets properties of folder "/test" with             # FeatureContext::asGetsPropertiesOfFolderWith()
      | {http://owncloud.org/ns}share-types |
    Then the response should contain a share-types property with       # FeatureContext::theResponseShouldContainAShareTypesPropertyWith()
      | 0 |
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: A file that is shared to a group has a share-types property # /var/www/core/build/integration/features/webdav-related.feature:322
    Given user "user0" exists                                           # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And group "group1" exists                                           # FeatureContext::assureGroupExists()
    And user "user0" created a folder "/test"                           # FeatureContext::userCreatedAFolder()
    And as "user0" creating a share with                                # FeatureContext::asCreatingAShareWith()
      | path        | test   |
      | shareType   | 1      |
      | permissions | 31     |
      | shareWith   | group1 |
    When as "user0" gets properties of folder "/test" with              # FeatureContext::asGetsPropertiesOfFolderWith()
      | {http://owncloud.org/ns}share-types |
    Then the response should contain a share-types property with        # FeatureContext::theResponseShouldContainAShareTypesPropertyWith()
      | 1 |
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: A file that is shared by link has a share-types property # /var/www/core/build/integration/features/webdav-related.feature:336
    Given user "user0" exists                                        # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user0" created a folder "/test"                        # FeatureContext::userCreatedAFolder()
    And as "user0" creating a share with                             # FeatureContext::asCreatingAShareWith()
      | path        | test |
      | shareType   | 3    |
      | permissions | 31   |
    When as "user0" gets properties of folder "/test" with           # FeatureContext::asGetsPropertiesOfFolderWith()
      | {http://owncloud.org/ns}share-types |
    Then the response should contain a share-types property with     # FeatureContext::theResponseShouldContainAShareTypesPropertyWith()
      | 3 |
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: A file that is shared by user,group and link has a share-types property # /var/www/core/build/integration/features/webdav-related.feature:348
    Given user "user0" exists                                                       # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user1" exists                                                         # FeatureContext::assureUserExists()
    And group "group2" exists                                                       # FeatureContext::assureGroupExists()
    And user "user0" created a folder "/test"                                       # FeatureContext::userCreatedAFolder()
    And as "user0" creating a share with                                            # FeatureContext::asCreatingAShareWith()
      | path        | test  |
      | shareType   | 0     |
      | permissions | 31    |
      | shareWith   | user1 |
    And as "user0" creating a share with                                            # FeatureContext::asCreatingAShareWith()
      | path        | test   |
      | shareType   | 1      |
      | permissions | 31     |
      | shareWith   | group2 |
    And as "user0" creating a share with                                            # FeatureContext::asCreatingAShareWith()
      | path        | test |
      | shareType   | 3    |
      | permissions | 31   |
    When as "user0" gets properties of folder "/test" with                          # FeatureContext::asGetsPropertiesOfFolderWith()
      | {http://owncloud.org/ns}share-types |
    Then the response should contain a share-types property with                    # FeatureContext::theResponseShouldContainAShareTypesPropertyWith()
      | 0 |
      | 1 |
      | 3 |
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Upload chunked file asc with new chunking                                   # /var/www/core/build/integration/features/webdav-related.feature:374
    Given using new dav path                                                            # FeatureContext::usingNewDavPath()
    And user "user0" exists                                                             # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user0" creates a new chunking upload with id "chunking-42"                # FeatureContext::userCreatesANewChunkingUploadWithId()
    And user "user0" uploads new chunk file "1" with "AAAAA" to id "chunking-42"        # FeatureContext::userUploadsNewChunkFileOfWithToId()
    And user "user0" uploads new chunk file "2" with "BBBBB" to id "chunking-42"        # FeatureContext::userUploadsNewChunkFileOfWithToId()
    And user "user0" uploads new chunk file "3" with "CCCCC" to id "chunking-42"        # FeatureContext::userUploadsNewChunkFileOfWithToId()
    And user "user0" moves new chunk file with id "chunking-42" to "/myChunkedFile.txt" # FeatureContext::userMovesNewChunkFileWithIdToMychunkedfile()
    When As an "user0"                                                                  # FeatureContext::asAn()
    And Downloading file "/myChunkedFile.txt"                                           # FeatureContext::downloadingFile()
    Then Downloaded content should be "AAAAABBBBBCCCCC"                                 # FeatureContext::downloadedContentShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Upload chunked file desc with new chunking                                  # /var/www/core/build/integration/features/webdav-related.feature:386
    Given using new dav path                                                            # FeatureContext::usingNewDavPath()
    And user "user0" exists                                                             # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user0" creates a new chunking upload with id "chunking-42"                # FeatureContext::userCreatesANewChunkingUploadWithId()
    And user "user0" uploads new chunk file "3" with "CCCCC" to id "chunking-42"        # FeatureContext::userUploadsNewChunkFileOfWithToId()
    And user "user0" uploads new chunk file "2" with "BBBBB" to id "chunking-42"        # FeatureContext::userUploadsNewChunkFileOfWithToId()
    And user "user0" uploads new chunk file "1" with "AAAAA" to id "chunking-42"        # FeatureContext::userUploadsNewChunkFileOfWithToId()
    And user "user0" moves new chunk file with id "chunking-42" to "/myChunkedFile.txt" # FeatureContext::userMovesNewChunkFileWithIdToMychunkedfile()
    When As an "user0"                                                                  # FeatureContext::asAn()
    And Downloading file "/myChunkedFile.txt"                                           # FeatureContext::downloadingFile()
    Then Downloaded content should be "AAAAABBBBBCCCCC"                                 # FeatureContext::downloadedContentShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Upload chunked file random with new chunking                                # /var/www/core/build/integration/features/webdav-related.feature:398
    Given using new dav path                                                            # FeatureContext::usingNewDavPath()
    And user "user0" exists                                                             # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user0" creates a new chunking upload with id "chunking-42"                # FeatureContext::userCreatesANewChunkingUploadWithId()
    And user "user0" uploads new chunk file "2" with "BBBBB" to id "chunking-42"        # FeatureContext::userUploadsNewChunkFileOfWithToId()
    And user "user0" uploads new chunk file "3" with "CCCCC" to id "chunking-42"        # FeatureContext::userUploadsNewChunkFileOfWithToId()
    And user "user0" uploads new chunk file "1" with "AAAAA" to id "chunking-42"        # FeatureContext::userUploadsNewChunkFileOfWithToId()
    And user "user0" moves new chunk file with id "chunking-42" to "/myChunkedFile.txt" # FeatureContext::userMovesNewChunkFileWithIdToMychunkedfile()
    When As an "user0"                                                                  # FeatureContext::asAn()
    And Downloading file "/myChunkedFile.txt"                                           # FeatureContext::downloadingFile()
    Then Downloaded content should be "AAAAABBBBBCCCCC"                                 # FeatureContext::downloadedContentShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: A disabled user cannot use webdav                  # /var/www/core/build/integration/features/webdav-related.feature:410
    Given user "userToBeDisabled" exists                       # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And As an "admin"                                          # FeatureContext::asAn()
    And assure user "userToBeDisabled" is disabled             # FeatureContext::assureUserIsDisabled()
    When Downloading file "/welcome.txt" as "userToBeDisabled" # FeatureContext::downloadingFileAs()
    Then the HTTP status code should be "503"                  # FeatureContext::theHTTPStatusCodeShouldBe()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Creating a folder                                                                             # /var/www/core/build/integration/features/webdav-related.feature:417
    Given using old dav path                                                                              # FeatureContext::usingOldDavPath()
    And user "user0" exists                                                                               # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user0" created a folder "/test_folder"                                                      # FeatureContext::userCreatedAFolder()
    When as "user0" gets properties of folder "/test_folder" with                                         # FeatureContext::asGetsPropertiesOfFolderWith()
      | {DAV:}resourcetype |
    Then the single response should contain a property "{DAV:}resourcetype" with value "{DAV:}collection" # FeatureContext::theSingleResponseShouldContainAPropertyWithValue()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

  Scenario: Creating a folder with special chars                                                          # /var/www/core/build/integration/features/webdav-related.feature:425
    Given using old dav path                                                                              # FeatureContext::usingOldDavPath()
    And user "user0" exists                                                                               # FeatureContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user0" created a folder "/test_folder:5"                                                    # FeatureContext::userCreatedAFolder()
    When as "user0" gets properties of folder "/test_folder:5" with                                       # FeatureContext::asGetsPropertiesOfFolderWith()
      | {DAV:}resourcetype |
    Then the single response should contain a property "{DAV:}resourcetype" with value "{DAV:}collection" # FeatureContext::theSingleResponseShouldContainAPropertyWithValue()
  │
  ╳  Opening and ending tag mismatch: meta line 5 and head
  ╳   on line 73, column 8 (Sabre\Xml\LibXMLException)
  │
  └─ @AfterScenario # TagsContext::tearDownScenario()

Feature: federated

  Background:                   # /var/www/core/build/integration/federation_features/federated.feature:2
    Given using api version "1" # FederationContext::usingApiVersion()

  Scenario: Federate share a file with another server                                                    # /var/www/core/build/integration/federation_features/federated.feature:5
    Given Using server "REMOTE"                                                                          # FederationContext::usingServer()
    And user "user1" exists                                                                              # FederationContext::assureUserExists()
      Client error response [url] http://localhost:8180/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And Using server "LOCAL"                                                                             # FederationContext::usingServer()
    And user "user0" exists                                                                              # FederationContext::assureUserExists()
    When User "user0" from server "LOCAL" shares "/textfile0.txt" with user "user1" from server "REMOTE" # FederationContext::federateSharing()
    Then the OCS status code should be "100"                                                             # FederationContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                                             # FederationContext::theHTTPStatusCodeShouldBe()
    And Share fields of last share match with                                                            # FederationContext::checkShareFields()
      | id                     | A_NUMBER       |
      | item_type              | file           |
      | item_source            | A_NUMBER       |
      | share_type             | 6              |
      | file_source            | A_NUMBER       |
      | path                   | /textfile0.txt |
      | permissions            | 19             |
      | stime                  | A_NUMBER       |
      | storage                | A_NUMBER       |
      | mail_send              | 0              |
      | uid_owner              | user0          |
      | storage_id             | home::user0    |
      | file_parent            | A_NUMBER       |
      | displayname_owner      | user0          |
      | share_with             | user1@REMOTE   |
      | share_with_displayname | user1@REMOTE   |

  Scenario: Federate share a file with local server                                                      # /var/www/core/build/integration/federation_features/federated.feature:31
    Given Using server "LOCAL"                                                                           # FederationContext::usingServer()
    And user "user0" exists                                                                              # FederationContext::assureUserExists()
      Client error response [url] http://localhost:8080/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And Using server "REMOTE"                                                                            # FederationContext::usingServer()
    And user "user1" exists                                                                              # FederationContext::assureUserExists()
    When User "user1" from server "REMOTE" shares "/textfile0.txt" with user "user0" from server "LOCAL" # FederationContext::federateSharing()
    Then the OCS status code should be "100"                                                             # FederationContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                                             # FederationContext::theHTTPStatusCodeShouldBe()
    And Share fields of last share match with                                                            # FederationContext::checkShareFields()
      | id                     | A_NUMBER       |
      | item_type              | file           |
      | item_source            | A_NUMBER       |
      | share_type             | 6              |
      | file_source            | A_NUMBER       |
      | path                   | /textfile0.txt |
      | permissions            | 19             |
      | stime                  | A_NUMBER       |
      | storage                | A_NUMBER       |
      | mail_send              | 0              |
      | uid_owner              | user1          |
      | storage_id             | home::user1    |
      | file_parent            | A_NUMBER       |
      | displayname_owner      | user1          |
      | share_with             | user0@LOCAL    |
      | share_with_displayname | user0@LOCAL    |

  Scenario: Remote sharee can see the pending share                                                     # /var/www/core/build/integration/federation_features/federated.feature:57
    Given Using server "REMOTE"                                                                         # FederationContext::usingServer()
    And user "user1" exists                                                                             # FederationContext::assureUserExists()
      Client error response [url] http://localhost:8180/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And Using server "LOCAL"                                                                            # FederationContext::usingServer()
    And user "user0" exists                                                                             # FederationContext::assureUserExists()
    And User "user0" from server "LOCAL" shares "/textfile0.txt" with user "user1" from server "REMOTE" # FederationContext::federateSharing()
    And Using server "REMOTE"                                                                           # FederationContext::usingServer()
    And As an "user1"                                                                                   # FederationContext::asAn()
    When sending "GET" to "/apps/files_sharing/api/v1/remote_shares/pending"                            # FederationContext::sendingTo()
    Then the OCS status code should be "100"                                                            # FederationContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                                            # FederationContext::theHTTPStatusCodeShouldBe()
    And Share fields of last share match with                                                           # FederationContext::checkShareFields()
      | id          | A_NUMBER                                   |
      | remote      | LOCAL                                      |
      | remote_id   | A_NUMBER                                   |
      | share_token | A_TOKEN                                    |
      | name        | /textfile0.txt                             |
      | owner       | user0                                      |
      | user        | user1                                      |
      | mountpoint  | {{TemporaryMountPointName#/textfile0.txt}} |
      | accepted    | 0                                          |

  Scenario: accept a pending remote share                                                               # /var/www/core/build/integration/federation_features/federated.feature:79
    Given Using server "REMOTE"                                                                         # FederationContext::usingServer()
    And user "user1" exists                                                                             # FederationContext::assureUserExists()
      Client error response [url] http://localhost:8180/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And Using server "LOCAL"                                                                            # FederationContext::usingServer()
    And user "user0" exists                                                                             # FederationContext::assureUserExists()
    And User "user0" from server "LOCAL" shares "/textfile0.txt" with user "user1" from server "REMOTE" # FederationContext::federateSharing()
    When User "user1" from server "REMOTE" accepts last pending share                                   # FederationContext::acceptLastPendingShare()
    Then the OCS status code should be "100"                                                            # FederationContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                                            # FederationContext::theHTTPStatusCodeShouldBe()

  Scenario: Reshare a federated shared file                                                             # /var/www/core/build/integration/federation_features/federated.feature:89
    Given Using server "REMOTE"                                                                         # FederationContext::usingServer()
    And user "user1" exists                                                                             # FederationContext::assureUserExists()
      Client error response [url] http://localhost:8180/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user2" exists                                                                             # FederationContext::assureUserExists()
    And Using server "LOCAL"                                                                            # FederationContext::usingServer()
    And user "user0" exists                                                                             # FederationContext::assureUserExists()
    And User "user0" from server "LOCAL" shares "/textfile0.txt" with user "user1" from server "REMOTE" # FederationContext::federateSharing()
    And User "user1" from server "REMOTE" accepts last pending share                                    # FederationContext::acceptLastPendingShare()
    And Using server "REMOTE"                                                                           # FederationContext::usingServer()
    And As an "user1"                                                                                   # FederationContext::asAn()
    When creating a share with                                                                          # FederationContext::creatingShare()
      | path        | /textfile0 (2).txt |
      | shareType   | 0                  |
      | shareWith   | user2              |
      | permissions | 19                 |
    Then the OCS status code should be "100"                                                            # FederationContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                                            # FederationContext::theHTTPStatusCodeShouldBe()
    And Share fields of last share match with                                                           # FederationContext::checkShareFields()
      | id                     | A_NUMBER           |
      | item_type              | file               |
      | item_source            | A_NUMBER           |
      | share_type             | 0                  |
      | file_source            | A_NUMBER           |
      | path                   | /textfile0 (2).txt |
      | permissions            | 19                 |
      | stime                  | A_NUMBER           |
      | storage                | A_NUMBER           |
      | mail_send              | 0                  |
      | uid_owner              | user1              |
      | file_parent            | A_NUMBER           |
      | displayname_owner      | user1              |
      | share_with             | user2              |
      | share_with_displayname | user2              |

  Scenario: Overwrite a federated shared file as recipient                                              # /var/www/core/build/integration/federation_features/federated.feature:123
    Given Using server "REMOTE"                                                                         # FederationContext::usingServer()
    And user "user1" exists                                                                             # FederationContext::assureUserExists()
      Client error response [url] http://localhost:8180/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user2" exists                                                                             # FederationContext::assureUserExists()
    And Using server "LOCAL"                                                                            # FederationContext::usingServer()
    And user "user0" exists                                                                             # FederationContext::assureUserExists()
    And User "user0" from server "LOCAL" shares "/textfile0.txt" with user "user1" from server "REMOTE" # FederationContext::federateSharing()
    And User "user1" from server "REMOTE" accepts last pending share                                    # FederationContext::acceptLastPendingShare()
    And Using server "REMOTE"                                                                           # FederationContext::usingServer()
    And As an "user1"                                                                                   # FederationContext::asAn()
    When User "user1" uploads file "data/file_to_overwrite.txt" to "/textfile0 (2).txt"                 # FederationContext::userUploadsAFileTo()
    And Using server "LOCAL"                                                                            # FederationContext::usingServer()
    And As an "user0"                                                                                   # FederationContext::asAn()
    And Downloading file "/textfile0.txt" with range "bytes=0-8"                                        # FederationContext::downloadFileWithRange()
    Then Downloaded content should be "BLABLABLA"                                                       # FederationContext::downloadedContentShouldBe()

  Scenario: Overwrite a federated shared folder as recipient                                     # /var/www/core/build/integration/federation_features/federated.feature:139
    Given Using server "REMOTE"                                                                  # FederationContext::usingServer()
    And user "user1" exists                                                                      # FederationContext::assureUserExists()
      Client error response [url] http://localhost:8180/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user2" exists                                                                      # FederationContext::assureUserExists()
    And Using server "LOCAL"                                                                     # FederationContext::usingServer()
    And user "user0" exists                                                                      # FederationContext::assureUserExists()
    And User "user0" from server "LOCAL" shares "/PARENT" with user "user1" from server "REMOTE" # FederationContext::federateSharing()
    And User "user1" from server "REMOTE" accepts last pending share                             # FederationContext::acceptLastPendingShare()
    And Using server "REMOTE"                                                                    # FederationContext::usingServer()
    And As an "user1"                                                                            # FederationContext::asAn()
    When User "user1" uploads file "data/file_to_overwrite.txt" to "/PARENT (2)/textfile0.txt"   # FederationContext::userUploadsAFileTo()
    And Using server "LOCAL"                                                                     # FederationContext::usingServer()
    And As an "user0"                                                                            # FederationContext::asAn()
    And Downloading file "/PARENT/textfile0.txt" with range "bytes=0-8"                          # FederationContext::downloadFileWithRange()
    Then Downloaded content should be "BLABLABLA"                                                # FederationContext::downloadedContentShouldBe()

  Scenario: Overwrite a federated shared file as recipient using old chunking                           # /var/www/core/build/integration/federation_features/federated.feature:155
    Given Using server "REMOTE"                                                                         # FederationContext::usingServer()
    And user "user1" exists                                                                             # FederationContext::assureUserExists()
      Client error response [url] http://localhost:8180/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user2" exists                                                                             # FederationContext::assureUserExists()
    And Using server "LOCAL"                                                                            # FederationContext::usingServer()
    And user "user0" exists                                                                             # FederationContext::assureUserExists()
    And User "user0" from server "LOCAL" shares "/textfile0.txt" with user "user1" from server "REMOTE" # FederationContext::federateSharing()
    And User "user1" from server "REMOTE" accepts last pending share                                    # FederationContext::acceptLastPendingShare()
    And Using server "REMOTE"                                                                           # FederationContext::usingServer()
    And As an "user1"                                                                                   # FederationContext::asAn()
    And user "user1" uploads chunk file "1" of "3" with "AAAAA" to "/textfile0 (2).txt"                 # FederationContext::userUploadsChunkFileOfWithToWithChecksum()
    And user "user1" uploads chunk file "2" of "3" with "BBBBB" to "/textfile0 (2).txt"                 # FederationContext::userUploadsChunkFileOfWithToWithChecksum()
    And user "user1" uploads chunk file "3" of "3" with "CCCCC" to "/textfile0 (2).txt"                 # FederationContext::userUploadsChunkFileOfWithToWithChecksum()
    When Downloading file "/textfile0 (2).txt" with range "bytes=0-4"                                   # FederationContext::downloadFileWithRange()
    Then Downloaded content should be "AAAAA"                                                           # FederationContext::downloadedContentShouldBe()

  Scenario: Overwrite a federated shared folder as recipient using old chunking                  # /var/www/core/build/integration/federation_features/federated.feature:171
    Given Using server "REMOTE"                                                                  # FederationContext::usingServer()
    And user "user1" exists                                                                      # FederationContext::assureUserExists()
      Client error response [url] http://localhost:8180/ocs/v1.php/cloud/users [status code] 403 [reason phrase] Forbidden (GuzzleHttp\Exception\ClientException)
    And user "user2" exists                                                                      # FederationContext::assureUserExists()
    And Using server "LOCAL"                                                                     # FederationContext::usingServer()
    And user "user0" exists                                                                      # FederationContext::assureUserExists()
    And User "user0" from server "LOCAL" shares "/PARENT" with user "user1" from server "REMOTE" # FederationContext::federateSharing()
    And User "user1" from server "REMOTE" accepts last pending share                             # FederationContext::acceptLastPendingShare()
    And Using server "REMOTE"                                                                    # FederationContext::usingServer()
    And As an "user1"                                                                            # FederationContext::asAn()
    And user "user1" uploads chunk file "1" of "3" with "AAAAA" to "/PARENT (2)/textfile0.txt"   # FederationContext::userUploadsChunkFileOfWithToWithChecksum()
    And user "user1" uploads chunk file "2" of "3" with "BBBBB" to "/PARENT (2)/textfile0.txt"   # FederationContext::userUploadsChunkFileOfWithToWithChecksum()
    And user "user1" uploads chunk file "3" of "3" with "CCCCC" to "/PARENT (2)/textfile0.txt"   # FederationContext::userUploadsChunkFileOfWithToWithChecksum()
    When Downloading file "/PARENT (2)/textfile0.txt" with range "bytes=3-13"                    # FederationContext::downloadFileWithRange()
    Then Downloaded content should be "AABBBBBCCCC"                                              # FederationContext::downloadedContentShouldBe()

  Scenario: Trusted server handshake does not require authenticated requests - we force 403 by sending an empty body # /var/www/core/build/integration/federation_features/federated.feature:187
    Given Using server "LOCAL"                                                                                       # FederationContext::usingServer()
    And using api version "2"                                                                                        # FederationContext::usingApiVersion()
    And As an "UNAUTHORIZED_USER"                                                                                    # FederationContext::asAn()
    When sending "POST" to "/apps/federation/api/v1/request-shared-secret"                                           # FederationContext::sendingTo()
    Then the HTTP status code should be "403"                                                                        # FederationContext::theHTTPStatusCodeShouldBe()

Feature: capabilities

  Background:                   # /var/www/core/build/integration/capabilities_features/capabilities.feature:2
    Given using api version "1" # CapabilitiesContext::usingApiVersion()

  ┌─ @BeforeScenario # CapabilitiesContext::prepareParameters()
  │
  ╳  Failed asserting that 403 matches expected '200'.
  │
  Scenario: getting capabilities with admin user # /var/www/core/build/integration/capabilities_features/capabilities.feature:5
    Given As an "admin"                          # CapabilitiesContext::asAn()
    When sending "GET" to "/cloud/capabilities"  # CapabilitiesContext::sendingTo()
    Then the HTTP status code should be "200"    # CapabilitiesContext::theHTTPStatusCodeShouldBe()
    And fields of capabilities match with        # CapabilitiesContext::checkCapabilitiesResponse()
      | capability    | path_to_element       | value             |
      | core          | pollinterval          | 60                |
      | core          | webdav-root           | remote.php/webdav |
      | files_sharing | api_enabled           | 1                 |
      | files_sharing | public@@@enabled      | 1                 |
      | files_sharing | public@@@upload       | 1                 |
      | files_sharing | resharing             | 1                 |
      | files_sharing | federation@@@outgoing | 1                 |
      | files_sharing | federation@@@incoming | 1                 |
      | files_sharing | group_sharing         | 1                 |
      | files         | bigfilechunking       | 1                 |
      | files         | undelete              | 1                 |
      | files         | versioning            | 1                 |

  ┌─ @BeforeScenario # CapabilitiesContext::prepareParameters()
  │
  ╳  Failed asserting that 403 matches expected '200'.
  │
  Scenario: Changing public upload                                            # /var/www/core/build/integration/capabilities_features/capabilities.feature:24
    Given As an "admin"                                                       # CapabilitiesContext::asAn()
    And parameter "shareapi_allow_public_upload" of app "core" is set to "no" # CapabilitiesContext::serverParameterIsSetTo()
    When sending "GET" to "/cloud/capabilities"                               # CapabilitiesContext::sendingTo()
    Then the HTTP status code should be "200"                                 # CapabilitiesContext::theHTTPStatusCodeShouldBe()
    And fields of capabilities match with                                     # CapabilitiesContext::checkCapabilitiesResponse()
      | capability    | path_to_element       | value             |
      | core          | pollinterval          | 60                |
      | core          | webdav-root           | remote.php/webdav |
      | files_sharing | api_enabled           | 1                 |
      | files_sharing | public@@@enabled      | 1                 |
      | files_sharing | public@@@upload       | EMPTY             |
      | files_sharing | resharing             | 1                 |
      | files_sharing | federation@@@outgoing | 1                 |
      | files_sharing | federation@@@incoming | 1                 |
      | files_sharing | group_sharing         | 1                 |
      | files         | bigfilechunking       | 1                 |
      | files         | undelete              | 1                 |
      | files         | versioning            | 1                 |

  ┌─ @BeforeScenario # CapabilitiesContext::prepareParameters()
  │
  ╳  Failed asserting that 403 matches expected '200'.
  │
  Scenario: Disabling share api                                   # /var/www/core/build/integration/capabilities_features/capabilities.feature:44
    Given As an "admin"                                           # CapabilitiesContext::asAn()
    And parameter "shareapi_enabled" of app "core" is set to "no" # CapabilitiesContext::serverParameterIsSetTo()
    When sending "GET" to "/cloud/capabilities"                   # CapabilitiesContext::sendingTo()
    Then the HTTP status code should be "200"                     # CapabilitiesContext::theHTTPStatusCodeShouldBe()
    And fields of capabilities match with                         # CapabilitiesContext::checkCapabilitiesResponse()
      | capability    | path_to_element       | value             |
      | core          | pollinterval          | 60                |
      | core          | webdav-root           | remote.php/webdav |
      | files_sharing | api_enabled           | EMPTY             |
      | files_sharing | public@@@enabled      | EMPTY             |
      | files_sharing | public@@@upload       | EMPTY             |
      | files_sharing | resharing             | EMPTY             |
      | files_sharing | federation@@@outgoing | 1                 |
      | files_sharing | federation@@@incoming | 1                 |
      | files         | bigfilechunking       | 1                 |
      | files         | undelete              | 1                 |
      | files         | versioning            | 1                 |

  ┌─ @BeforeScenario # CapabilitiesContext::prepareParameters()
  │
  ╳  Failed asserting that 403 matches expected '200'.
  │
  Scenario: Disabling public links                                    # /var/www/core/build/integration/capabilities_features/capabilities.feature:63
    Given As an "admin"                                               # CapabilitiesContext::asAn()
    And parameter "shareapi_allow_links" of app "core" is set to "no" # CapabilitiesContext::serverParameterIsSetTo()
    When sending "GET" to "/cloud/capabilities"                       # CapabilitiesContext::sendingTo()
    Then the HTTP status code should be "200"                         # CapabilitiesContext::theHTTPStatusCodeShouldBe()
    And fields of capabilities match with                             # CapabilitiesContext::checkCapabilitiesResponse()
      | capability    | path_to_element       | value             |
      | core          | pollinterval          | 60                |
      | core          | webdav-root           | remote.php/webdav |
      | files_sharing | api_enabled           | 1                 |
      | files_sharing | public@@@enabled      | EMPTY             |
      | files_sharing | public@@@upload       | EMPTY             |
      | files_sharing | resharing             | 1                 |
      | files_sharing | federation@@@outgoing | 1                 |
      | files_sharing | federation@@@incoming | 1                 |
      | files_sharing | group_sharing         | 1                 |
      | files         | bigfilechunking       | 1                 |
      | files         | undelete              | 1                 |
      | files         | versioning            | 1                 |

  ┌─ @BeforeScenario # CapabilitiesContext::prepareParameters()
  │
  ╳  Failed asserting that 403 matches expected '200'.
  │
  Scenario: Changing resharing                                            # /var/www/core/build/integration/capabilities_features/capabilities.feature:83
    Given As an "admin"                                                   # CapabilitiesContext::asAn()
    And parameter "shareapi_allow_resharing" of app "core" is set to "no" # CapabilitiesContext::serverParameterIsSetTo()
    When sending "GET" to "/cloud/capabilities"                           # CapabilitiesContext::sendingTo()
    Then the HTTP status code should be "200"                             # CapabilitiesContext::theHTTPStatusCodeShouldBe()
    And fields of capabilities match with                                 # CapabilitiesContext::checkCapabilitiesResponse()
      | capability    | path_to_element       | value             |
      | core          | pollinterval          | 60                |
      | core          | webdav-root           | remote.php/webdav |
      | files_sharing | api_enabled           | 1                 |
      | files_sharing | public@@@enabled      | 1                 |
      | files_sharing | public@@@upload       | 1                 |
      | files_sharing | resharing             | EMPTY             |
      | files_sharing | federation@@@outgoing | 1                 |
      | files_sharing | federation@@@incoming | 1                 |
      | files_sharing | group_sharing         | 1                 |
      | files         | bigfilechunking       | 1                 |
      | files         | undelete              | 1                 |
      | files         | versioning            | 1                 |

  ┌─ @BeforeScenario # CapabilitiesContext::prepareParameters()
  │
  ╳  Failed asserting that 403 matches expected '200'.
  │
  Scenario: Changing federation outgoing                                                       # /var/www/core/build/integration/capabilities_features/capabilities.feature:103
    Given As an "admin"                                                                        # CapabilitiesContext::asAn()
    And parameter "outgoing_server2server_share_enabled" of app "files_sharing" is set to "no" # CapabilitiesContext::serverParameterIsSetTo()
    When sending "GET" to "/cloud/capabilities"                                                # CapabilitiesContext::sendingTo()
    Then the HTTP status code should be "200"                                                  # CapabilitiesContext::theHTTPStatusCodeShouldBe()
    And fields of capabilities match with                                                      # CapabilitiesContext::checkCapabilitiesResponse()
      | capability    | path_to_element       | value             |
      | core          | pollinterval          | 60                |
      | core          | webdav-root           | remote.php/webdav |
      | files_sharing | api_enabled           | 1                 |
      | files_sharing | public@@@enabled      | 1                 |
      | files_sharing | public@@@upload       | 1                 |
      | files_sharing | resharing             | 1                 |
      | files_sharing | federation@@@outgoing | EMPTY             |
      | files_sharing | federation@@@incoming | 1                 |
      | files_sharing | group_sharing         | 1                 |
      | files         | bigfilechunking       | 1                 |
      | files         | undelete              | 1                 |
      | files         | versioning            | 1                 |

  ┌─ @BeforeScenario # CapabilitiesContext::prepareParameters()
  │
  ╳  Failed asserting that 403 matches expected '200'.
  │
  Scenario: Changing federation incoming                                                       # /var/www/core/build/integration/capabilities_features/capabilities.feature:123
    Given As an "admin"                                                                        # CapabilitiesContext::asAn()
    And parameter "incoming_server2server_share_enabled" of app "files_sharing" is set to "no" # CapabilitiesContext::serverParameterIsSetTo()
    When sending "GET" to "/cloud/capabilities"                                                # CapabilitiesContext::sendingTo()
    Then the HTTP status code should be "200"                                                  # CapabilitiesContext::theHTTPStatusCodeShouldBe()
    And fields of capabilities match with                                                      # CapabilitiesContext::checkCapabilitiesResponse()
      | capability    | path_to_element       | value             |
      | core          | pollinterval          | 60                |
      | core          | webdav-root           | remote.php/webdav |
      | files_sharing | api_enabled           | 1                 |
      | files_sharing | public@@@enabled      | 1                 |
      | files_sharing | public@@@upload       | 1                 |
      | files_sharing | resharing             | 1                 |
      | files_sharing | federation@@@outgoing | 1                 |
      | files_sharing | federation@@@incoming | EMPTY             |
      | files_sharing | group_sharing         | 1                 |
      | files         | bigfilechunking       | 1                 |
      | files         | undelete              | 1                 |
      | files         | versioning            | 1                 |

  ┌─ @BeforeScenario # CapabilitiesContext::prepareParameters()
  │
  ╳  Failed asserting that 403 matches expected '200'.
  │
  Scenario: Changing password enforce                                             # /var/www/core/build/integration/capabilities_features/capabilities.feature:143
    Given As an "admin"                                                           # CapabilitiesContext::asAn()
    And parameter "shareapi_enforce_links_password" of app "core" is set to "yes" # CapabilitiesContext::serverParameterIsSetTo()
    When sending "GET" to "/cloud/capabilities"                                   # CapabilitiesContext::sendingTo()
    Then the HTTP status code should be "200"                                     # CapabilitiesContext::theHTTPStatusCodeShouldBe()
    And fields of capabilities match with                                         # CapabilitiesContext::checkCapabilitiesResponse()
      | capability    | path_to_element              | value             |
      | core          | pollinterval                 | 60                |
      | core          | webdav-root                  | remote.php/webdav |
      | files_sharing | api_enabled                  | 1                 |
      | files_sharing | public@@@enabled             | 1                 |
      | files_sharing | public@@@upload              | 1                 |
      | files_sharing | public@@@password@@@enforced | 1                 |
      | files_sharing | resharing                    | 1                 |
      | files_sharing | federation@@@outgoing        | 1                 |
      | files_sharing | federation@@@incoming        | 1                 |
      | files_sharing | group_sharing                | 1                 |
      | files         | bigfilechunking              | 1                 |
      | files         | undelete                     | 1                 |
      | files         | versioning                   | 1                 |

  ┌─ @BeforeScenario # CapabilitiesContext::prepareParameters()
  │
  ╳  Failed asserting that 403 matches expected '200'.
  │
  Scenario: Changing public notifications                                            # /var/www/core/build/integration/capabilities_features/capabilities.feature:164
    Given As an "admin"                                                              # CapabilitiesContext::asAn()
    And parameter "shareapi_allow_public_notification" of app "core" is set to "yes" # CapabilitiesContext::serverParameterIsSetTo()
    When sending "GET" to "/cloud/capabilities"                                      # CapabilitiesContext::sendingTo()
    Then the HTTP status code should be "200"                                        # CapabilitiesContext::theHTTPStatusCodeShouldBe()
    And fields of capabilities match with                                            # CapabilitiesContext::checkCapabilitiesResponse()
      | capability    | path_to_element       | value             |
      | core          | pollinterval          | 60                |
      | core          | webdav-root           | remote.php/webdav |
      | files_sharing | api_enabled           | 1                 |
      | files_sharing | public@@@enabled      | 1                 |
      | files_sharing | public@@@upload       | 1                 |
      | files_sharing | public@@@send_mail    | 1                 |
      | files_sharing | resharing             | 1                 |
      | files_sharing | federation@@@outgoing | 1                 |
      | files_sharing | federation@@@incoming | 1                 |
      | files_sharing | group_sharing         | 1                 |
      | files         | bigfilechunking       | 1                 |
      | files         | undelete              | 1                 |
      | files         | versioning            | 1                 |

  ┌─ @BeforeScenario # CapabilitiesContext::prepareParameters()
  │
  ╳  Failed asserting that 403 matches expected '200'.
  │
  Scenario: Changing expire date                                               # /var/www/core/build/integration/capabilities_features/capabilities.feature:185
    Given As an "admin"                                                        # CapabilitiesContext::asAn()
    And parameter "shareapi_default_expire_date" of app "core" is set to "yes" # CapabilitiesContext::serverParameterIsSetTo()
    When sending "GET" to "/cloud/capabilities"                                # CapabilitiesContext::sendingTo()
    Then the HTTP status code should be "200"                                  # CapabilitiesContext::theHTTPStatusCodeShouldBe()
    And fields of capabilities match with                                      # CapabilitiesContext::checkCapabilitiesResponse()
      | capability    | path_to_element                | value             |
      | core          | pollinterval                   | 60                |
      | core          | webdav-root                    | remote.php/webdav |
      | files_sharing | api_enabled                    | 1                 |
      | files_sharing | public@@@enabled               | 1                 |
      | files_sharing | public@@@upload                | 1                 |
      | files_sharing | public@@@expire_date@@@enabled | 1                 |
      | files_sharing | resharing                      | 1                 |
      | files_sharing | federation@@@outgoing          | 1                 |
      | files_sharing | federation@@@incoming          | 1                 |
      | files_sharing | group_sharing                  | 1                 |
      | files         | bigfilechunking                | 1                 |
      | files         | undelete                       | 1                 |
      | files         | versioning                     | 1                 |

  ┌─ @BeforeScenario # CapabilitiesContext::prepareParameters()
  │
  ╳  Failed asserting that 403 matches expected '200'.
  │
  Scenario: Changing expire date enforcing                                     # /var/www/core/build/integration/capabilities_features/capabilities.feature:206
    Given As an "admin"                                                        # CapabilitiesContext::asAn()
    And parameter "shareapi_default_expire_date" of app "core" is set to "yes" # CapabilitiesContext::serverParameterIsSetTo()
    And parameter "shareapi_enforce_expire_date" of app "core" is set to "yes" # CapabilitiesContext::serverParameterIsSetTo()
    When sending "GET" to "/cloud/capabilities"                                # CapabilitiesContext::sendingTo()
    Then the HTTP status code should be "200"                                  # CapabilitiesContext::theHTTPStatusCodeShouldBe()
    And fields of capabilities match with                                      # CapabilitiesContext::checkCapabilitiesResponse()
      | capability    | path_to_element                 | value             |
      | core          | pollinterval                    | 60                |
      | core          | webdav-root                     | remote.php/webdav |
      | files_sharing | api_enabled                     | 1                 |
      | files_sharing | public@@@enabled                | 1                 |
      | files_sharing | public@@@upload                 | 1                 |
      | files_sharing | public@@@expire_date@@@enabled  | 1                 |
      | files_sharing | public@@@expire_date@@@enforced | 1                 |
      | files_sharing | resharing                       | 1                 |
      | files_sharing | federation@@@outgoing           | 1                 |
      | files_sharing | federation@@@incoming           | 1                 |
      | files_sharing | group_sharing                   | 1                 |
      | files         | bigfilechunking                 | 1                 |
      | files         | undelete                        | 1                 |
      | files         | versioning                      | 1                 |

  ┌─ @BeforeScenario # CapabilitiesContext::prepareParameters()
  │
  ╳  Failed asserting that 403 matches expected '200'.
  │
  Scenario: Changing group sharing allowed                                    # /var/www/core/build/integration/capabilities_features/capabilities.feature:229
    Given As an "admin"                                                       # CapabilitiesContext::asAn()
    And parameter "shareapi_allow_group_sharing" of app "core" is set to "no" # CapabilitiesContext::serverParameterIsSetTo()
    When sending "GET" to "/cloud/capabilities"                               # CapabilitiesContext::sendingTo()
    Then the HTTP status code should be "200"                                 # CapabilitiesContext::theHTTPStatusCodeShouldBe()
    And fields of capabilities match with                                     # CapabilitiesContext::checkCapabilitiesResponse()
      | capability    | path_to_element       | value             |
      | core          | pollinterval          | 60                |
      | core          | webdav-root           | remote.php/webdav |
      | files_sharing | api_enabled           | 1                 |
      | files_sharing | public@@@enabled      | 1                 |
      | files_sharing | public@@@upload       | 1                 |
      | files_sharing | resharing             | 1                 |
      | files_sharing | federation@@@outgoing | 1                 |
      | files_sharing | federation@@@incoming | 1                 |
      | files_sharing | group_sharing         | EMPTY             |
      | files         | bigfilechunking       | 1                 |
      | files         | undelete              | 1                 |
      | files         | versioning            | 1                 |

Feature: sharees

  Background:                                      # /var/www/core/build/integration/sharees_features/sharees.feature:2
    Given using api version "1"                    # ShareesContext::usingApiVersion()
    And user "test" exists                         # ShareesContext::assureUserExists()
    And user "Sharee1" exists                      # ShareesContext::assureUserExists()
    And group "ShareeGroup" exists                 # ShareesContext::assureGroupExists()
    And user "test" belongs to group "ShareeGroup" # ShareesContext::assureUserBelongsToGroup()

  ┌─ @BeforeScenario # ShareesContext::prepareParameters()
  │
  ╳  Failed asserting that 403 matches expected '200'.
  │
  Scenario: Search without exact match            # /var/www/core/build/integration/sharees_features/sharees.feature:9
    Given As an "test"                            # ShareesContext::asAn()
    When getting sharees for                      # ShareesContext::whenGettingShareesFor()
      | search   | Sharee |
      | itemType | file   |
    Then the OCS status code should be "100"      # ShareesContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"      # ShareesContext::theHTTPStatusCodeShouldBe()
    And "exact users" sharees returned is empty   # ShareesContext::thenListOfSharees()
    And "users" sharees returned are              # ShareesContext::thenListOfSharees()
      | Sharee1 | 0 | Sharee1 |
    And "exact groups" sharees returned is empty  # ShareesContext::thenListOfSharees()
    And "groups" sharees returned are             # ShareesContext::thenListOfSharees()
      | ShareeGroup | 1 | ShareeGroup |
    And "exact remotes" sharees returned is empty # ShareesContext::thenListOfSharees()
    And "remotes" sharees returned is empty       # ShareesContext::thenListOfSharees()

  ┌─ @BeforeScenario # ShareesContext::prepareParameters()
  │
  ╳  Failed asserting that 403 matches expected '200'.
  │
  Scenario: Search without exact match not-exact casing # /var/www/core/build/integration/sharees_features/sharees.feature:25
    Given As an "test"                                  # ShareesContext::asAn()
    When getting sharees for                            # ShareesContext::whenGettingShareesFor()
      | search   | sharee |
      | itemType | file   |
    Then the OCS status code should be "100"            # ShareesContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"            # ShareesContext::theHTTPStatusCodeShouldBe()
    And "exact users" sharees returned is empty         # ShareesContext::thenListOfSharees()
    And "users" sharees returned are                    # ShareesContext::thenListOfSharees()
      | Sharee1 | 0 | Sharee1 |
    And "exact groups" sharees returned is empty        # ShareesContext::thenListOfSharees()
    And "groups" sharees returned are                   # ShareesContext::thenListOfSharees()
      | ShareeGroup | 1 | ShareeGroup |
    And "exact remotes" sharees returned is empty       # ShareesContext::thenListOfSharees()
    And "remotes" sharees returned is empty             # ShareesContext::thenListOfSharees()

  ┌─ @BeforeScenario # ShareesContext::prepareParameters()
  │
  ╳  Failed asserting that 403 matches expected '200'.
  │
  Scenario: Search only with group members - denied                                      # /var/www/core/build/integration/sharees_features/sharees.feature:41
    Given As an "test"                                                                   # ShareesContext::asAn()
    And parameter "shareapi_only_share_with_group_members" of app "core" is set to "yes" # ShareesContext::serverParameterIsSetTo()
    When getting sharees for                                                             # ShareesContext::whenGettingShareesFor()
      | search   | sharee |
      | itemType | file   |
    Then the OCS status code should be "100"                                             # ShareesContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                             # ShareesContext::theHTTPStatusCodeShouldBe()
    And "exact users" sharees returned is empty                                          # ShareesContext::thenListOfSharees()
    And "users" sharees returned is empty                                                # ShareesContext::thenListOfSharees()
    And "exact groups" sharees returned is empty                                         # ShareesContext::thenListOfSharees()
    And "groups" sharees returned are                                                    # ShareesContext::thenListOfSharees()
      | ShareeGroup | 1 | ShareeGroup |
    And "exact remotes" sharees returned is empty                                        # ShareesContext::thenListOfSharees()
    And "remotes" sharees returned is empty                                              # ShareesContext::thenListOfSharees()

  ┌─ @BeforeScenario # ShareesContext::prepareParameters()
  │
  ╳  Failed asserting that 403 matches expected '200'.
  │
  Scenario: Search only with group members - allowed                                     # /var/www/core/build/integration/sharees_features/sharees.feature:57
    Given As an "test"                                                                   # ShareesContext::asAn()
    And parameter "shareapi_only_share_with_group_members" of app "core" is set to "yes" # ShareesContext::serverParameterIsSetTo()
    And user "Sharee1" belongs to group "ShareeGroup"                                    # ShareesContext::assureUserBelongsToGroup()
    When getting sharees for                                                             # ShareesContext::whenGettingShareesFor()
      | search   | sharee |
      | itemType | file   |
    Then the OCS status code should be "100"                                             # ShareesContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                             # ShareesContext::theHTTPStatusCodeShouldBe()
    And "exact users" sharees returned is empty                                          # ShareesContext::thenListOfSharees()
    And "users" sharees returned are                                                     # ShareesContext::thenListOfSharees()
      | Sharee1 | 0 | Sharee1 |
    And "exact groups" sharees returned is empty                                         # ShareesContext::thenListOfSharees()
    And "groups" sharees returned are                                                    # ShareesContext::thenListOfSharees()
      | ShareeGroup | 1 | ShareeGroup |
    And "exact remotes" sharees returned is empty                                        # ShareesContext::thenListOfSharees()
    And "remotes" sharees returned is empty                                              # ShareesContext::thenListOfSharees()

  ┌─ @BeforeScenario # ShareesContext::prepareParameters()
  │
  ╳  Failed asserting that 403 matches expected '200'.
  │
  Scenario: Search only with group members - no group as non-member                      # /var/www/core/build/integration/sharees_features/sharees.feature:75
    Given As an "Sharee1"                                                                # ShareesContext::asAn()
    And parameter "shareapi_only_share_with_group_members" of app "core" is set to "yes" # ShareesContext::serverParameterIsSetTo()
    When getting sharees for                                                             # ShareesContext::whenGettingShareesFor()
      | search   | sharee |
      | itemType | file   |
    Then the OCS status code should be "100"                                             # ShareesContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                             # ShareesContext::theHTTPStatusCodeShouldBe()
    And "exact users" sharees returned is empty                                          # ShareesContext::thenListOfSharees()
    And "users" sharees returned is empty                                                # ShareesContext::thenListOfSharees()
    And "exact groups" sharees returned is empty                                         # ShareesContext::thenListOfSharees()
    And "groups" sharees returned is empty                                               # ShareesContext::thenListOfSharees()
    And "exact remotes" sharees returned is empty                                        # ShareesContext::thenListOfSharees()
    And "remotes" sharees returned is empty                                              # ShareesContext::thenListOfSharees()

  ┌─ @BeforeScenario # ShareesContext::prepareParameters()
  │
  ╳  Failed asserting that 403 matches expected '200'.
  │
  Scenario: Search without exact match no iteration allowed                                   # /var/www/core/build/integration/sharees_features/sharees.feature:90
    Given As an "test"                                                                        # ShareesContext::asAn()
    And parameter "shareapi_allow_share_dialog_user_enumeration" of app "core" is set to "no" # ShareesContext::serverParameterIsSetTo()
    When getting sharees for                                                                  # ShareesContext::whenGettingShareesFor()
      | search   | Sharee |
      | itemType | file   |
    Then the OCS status code should be "100"                                                  # ShareesContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                                  # ShareesContext::theHTTPStatusCodeShouldBe()
    And "exact users" sharees returned is empty                                               # ShareesContext::thenListOfSharees()
    And "users" sharees returned is empty                                                     # ShareesContext::thenListOfSharees()
    And "exact groups" sharees returned is empty                                              # ShareesContext::thenListOfSharees()
    And "groups" sharees returned is empty                                                    # ShareesContext::thenListOfSharees()
    And "exact remotes" sharees returned is empty                                             # ShareesContext::thenListOfSharees()
    And "remotes" sharees returned is empty                                                   # ShareesContext::thenListOfSharees()

  ┌─ @BeforeScenario # ShareesContext::prepareParameters()
  │
  ╳  Failed asserting that 403 matches expected '200'.
  │
  Scenario: Search with exact match no iteration allowed                                      # /var/www/core/build/integration/sharees_features/sharees.feature:105
    Given As an "test"                                                                        # ShareesContext::asAn()
    And parameter "shareapi_allow_share_dialog_user_enumeration" of app "core" is set to "no" # ShareesContext::serverParameterIsSetTo()
    When getting sharees for                                                                  # ShareesContext::whenGettingShareesFor()
      | search   | Sharee1 |
      | itemType | file    |
    Then the OCS status code should be "100"                                                  # ShareesContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                                  # ShareesContext::theHTTPStatusCodeShouldBe()
    And "exact users" sharees returned are                                                    # ShareesContext::thenListOfSharees()
      | Sharee1 | 0 | Sharee1 |
    And "users" sharees returned is empty                                                     # ShareesContext::thenListOfSharees()
    And "exact groups" sharees returned is empty                                              # ShareesContext::thenListOfSharees()
    And "groups" sharees returned is empty                                                    # ShareesContext::thenListOfSharees()
    And "exact remotes" sharees returned is empty                                             # ShareesContext::thenListOfSharees()
    And "remotes" sharees returned is empty                                                   # ShareesContext::thenListOfSharees()

  ┌─ @BeforeScenario # ShareesContext::prepareParameters()
  │
  ╳  Failed asserting that 403 matches expected '200'.
  │
  Scenario: Search with exact match group no iteration allowed                                # /var/www/core/build/integration/sharees_features/sharees.feature:121
    Given As an "test"                                                                        # ShareesContext::asAn()
    And parameter "shareapi_allow_share_dialog_user_enumeration" of app "core" is set to "no" # ShareesContext::serverParameterIsSetTo()
    When getting sharees for                                                                  # ShareesContext::whenGettingShareesFor()
      | search   | ShareeGroup |
      | itemType | file        |
    Then the OCS status code should be "100"                                                  # ShareesContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                                  # ShareesContext::theHTTPStatusCodeShouldBe()
    And "exact users" sharees returned is empty                                               # ShareesContext::thenListOfSharees()
    And "users" sharees returned is empty                                                     # ShareesContext::thenListOfSharees()
    And "exact groups" sharees returned are                                                   # ShareesContext::thenListOfSharees()
      | ShareeGroup | 1 | ShareeGroup |
    And "groups" sharees returned is empty                                                    # ShareesContext::thenListOfSharees()
    And "exact remotes" sharees returned is empty                                             # ShareesContext::thenListOfSharees()
    And "remotes" sharees returned is empty                                                   # ShareesContext::thenListOfSharees()

  ┌─ @BeforeScenario # ShareesContext::prepareParameters()
  │
  ╳  Failed asserting that 403 matches expected '200'.
  │
  Scenario: Search with exact match                # /var/www/core/build/integration/sharees_features/sharees.feature:137
    Given As an "test"                             # ShareesContext::asAn()
    When getting sharees for                       # ShareesContext::whenGettingShareesFor()
      | search   | Sharee1 |
      | itemType | file    |
    Then the OCS status code should be "100"       # ShareesContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"       # ShareesContext::theHTTPStatusCodeShouldBe()
    Then "exact users" sharees returned are        # ShareesContext::thenListOfSharees()
      | Sharee1 | 0 | Sharee1 |
    Then "users" sharees returned is empty         # ShareesContext::thenListOfSharees()
    Then "exact groups" sharees returned is empty  # ShareesContext::thenListOfSharees()
    Then "groups" sharees returned is empty        # ShareesContext::thenListOfSharees()
    Then "exact remotes" sharees returned is empty # ShareesContext::thenListOfSharees()
    Then "remotes" sharees returned is empty       # ShareesContext::thenListOfSharees()

  ┌─ @BeforeScenario # ShareesContext::prepareParameters()
  │
  ╳  Failed asserting that 403 matches expected '200'.
  │
  Scenario: Search with exact match not-exact casing # /var/www/core/build/integration/sharees_features/sharees.feature:152
    Given As an "test"                               # ShareesContext::asAn()
    When getting sharees for                         # ShareesContext::whenGettingShareesFor()
      | search   | sharee1 |
      | itemType | file    |
    Then the OCS status code should be "100"         # ShareesContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"         # ShareesContext::theHTTPStatusCodeShouldBe()
    Then "exact users" sharees returned are          # ShareesContext::thenListOfSharees()
      | Sharee1 | 0 | Sharee1 |
    Then "users" sharees returned is empty           # ShareesContext::thenListOfSharees()
    Then "exact groups" sharees returned is empty    # ShareesContext::thenListOfSharees()
    Then "groups" sharees returned is empty          # ShareesContext::thenListOfSharees()
    Then "exact remotes" sharees returned is empty   # ShareesContext::thenListOfSharees()
    Then "remotes" sharees returned is empty         # ShareesContext::thenListOfSharees()

  ┌─ @BeforeScenario # ShareesContext::prepareParameters()
  │
  ╳  Failed asserting that 403 matches expected '200'.
  │
  Scenario: Search with exact match not-exact casing group # /var/www/core/build/integration/sharees_features/sharees.feature:167
    Given As an "test"                                     # ShareesContext::asAn()
    When getting sharees for                               # ShareesContext::whenGettingShareesFor()
      | search   | shareegroup |
      | itemType | file        |
    Then the OCS status code should be "100"               # ShareesContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"               # ShareesContext::theHTTPStatusCodeShouldBe()
    Then "exact users" sharees returned is empty           # ShareesContext::thenListOfSharees()
    Then "users" sharees returned is empty                 # ShareesContext::thenListOfSharees()
    Then "exact groups" sharees returned are               # ShareesContext::thenListOfSharees()
      | ShareeGroup | 1 | ShareeGroup |
    Then "groups" sharees returned is empty                # ShareesContext::thenListOfSharees()
    Then "exact remotes" sharees returned is empty         # ShareesContext::thenListOfSharees()
    Then "remotes" sharees returned is empty               # ShareesContext::thenListOfSharees()

  ┌─ @BeforeScenario # ShareesContext::prepareParameters()
  │
  ╳  Failed asserting that 403 matches expected '200'.
  │
  Scenario: Search with "self"                     # /var/www/core/build/integration/sharees_features/sharees.feature:182
    Given As an "Sharee1"                          # ShareesContext::asAn()
    When getting sharees for                       # ShareesContext::whenGettingShareesFor()
      | search   | Sharee1 |
      | itemType | file    |
    Then the OCS status code should be "100"       # ShareesContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"       # ShareesContext::theHTTPStatusCodeShouldBe()
    Then "exact users" sharees returned are        # ShareesContext::thenListOfSharees()
      | Sharee1 | 0 | Sharee1 |
    Then "users" sharees returned is empty         # ShareesContext::thenListOfSharees()
    Then "exact groups" sharees returned is empty  # ShareesContext::thenListOfSharees()
    Then "groups" sharees returned is empty        # ShareesContext::thenListOfSharees()
    Then "exact remotes" sharees returned is empty # ShareesContext::thenListOfSharees()
    Then "remotes" sharees returned is empty       # ShareesContext::thenListOfSharees()

  ┌─ @BeforeScenario # ShareesContext::prepareParameters()
  │
  ╳  Failed asserting that 403 matches expected '200'.
  │
  Scenario: Remote sharee for files               # /var/www/core/build/integration/sharees_features/sharees.feature:197
    Given As an "test"                            # ShareesContext::asAn()
    When getting sharees for                      # ShareesContext::whenGettingShareesFor()
      | search   | test@localhost |
      | itemType | file           |
    Then the OCS status code should be "100"      # ShareesContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"      # ShareesContext::theHTTPStatusCodeShouldBe()
    Then "exact users" sharees returned is empty  # ShareesContext::thenListOfSharees()
    Then "users" sharees returned is empty        # ShareesContext::thenListOfSharees()
    Then "exact groups" sharees returned is empty # ShareesContext::thenListOfSharees()
    Then "groups" sharees returned is empty       # ShareesContext::thenListOfSharees()
    Then "exact remotes" sharees returned are     # ShareesContext::thenListOfSharees()
      | test@localhost | 6 | test@localhost |
    Then "remotes" sharees returned is empty      # ShareesContext::thenListOfSharees()

  ┌─ @BeforeScenario # ShareesContext::prepareParameters()
  │
  ╳  Failed asserting that 403 matches expected '200'.
  │
  Scenario: Remote sharee for calendars not allowed # /var/www/core/build/integration/sharees_features/sharees.feature:212
    Given As an "test"                              # ShareesContext::asAn()
    When getting sharees for                        # ShareesContext::whenGettingShareesFor()
      | search   | test@localhost |
      | itemType | calendar       |
    Then the OCS status code should be "100"        # ShareesContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"        # ShareesContext::theHTTPStatusCodeShouldBe()
    Then "exact users" sharees returned is empty    # ShareesContext::thenListOfSharees()
    Then "users" sharees returned is empty          # ShareesContext::thenListOfSharees()
    Then "exact groups" sharees returned is empty   # ShareesContext::thenListOfSharees()
    Then "groups" sharees returned is empty         # ShareesContext::thenListOfSharees()
    Then "exact remotes" sharees returned is empty  # ShareesContext::thenListOfSharees()
    Then "remotes" sharees returned is empty        # ShareesContext::thenListOfSharees()

  ┌─ @BeforeScenario # ShareesContext::prepareParameters()
  │
  ╳  Failed asserting that 403 matches expected '200'.
  │
  Scenario: Group sharees not returned when group sharing is disabled         # /var/www/core/build/integration/sharees_features/sharees.feature:226
    Given As an "test"                                                        # ShareesContext::asAn()
    And parameter "shareapi_allow_group_sharing" of app "core" is set to "no" # ShareesContext::serverParameterIsSetTo()
    When getting sharees for                                                  # ShareesContext::whenGettingShareesFor()
      | search   | sharee |
      | itemType | file   |
    Then the OCS status code should be "100"                                  # ShareesContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                  # ShareesContext::theHTTPStatusCodeShouldBe()
    And "exact users" sharees returned is empty                               # ShareesContext::thenListOfSharees()
    And "users" sharees returned are                                          # ShareesContext::thenListOfSharees()
      | Sharee1 | 0 | Sharee1 |
    And "exact groups" sharees returned is empty                              # ShareesContext::thenListOfSharees()
    And "groups" sharees returned is empty                                    # ShareesContext::thenListOfSharees()
    And "exact remotes" sharees returned is empty                             # ShareesContext::thenListOfSharees()
    And "remotes" sharees returned is empty                                   # ShareesContext::thenListOfSharees()

Feature: sharees_provisioningapiv2

  Background:                                      # /var/www/core/build/integration/sharees_features/sharees_provisioningapiv2.feature:2
    Given using api version "2"                    # ShareesContext::usingApiVersion()
    And user "test" exists                         # ShareesContext::assureUserExists()
    And user "Sharee1" exists                      # ShareesContext::assureUserExists()
    And group "ShareeGroup" exists                 # ShareesContext::assureGroupExists()
    And user "test" belongs to group "ShareeGroup" # ShareesContext::assureUserBelongsToGroup()

  ┌─ @BeforeScenario # ShareesContext::prepareParameters()
  │
  ╳  Failed asserting that 403 matches expected '200'.
  │
  Scenario: Search without exact match            # /var/www/core/build/integration/sharees_features/sharees_provisioningapiv2.feature:9
    Given As an "test"                            # ShareesContext::asAn()
    When getting sharees for                      # ShareesContext::whenGettingShareesFor()
      | search   | Sharee |
      | itemType | file   |
    Then the OCS status code should be "200"      # ShareesContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"      # ShareesContext::theHTTPStatusCodeShouldBe()
    And "exact users" sharees returned is empty   # ShareesContext::thenListOfSharees()
    And "users" sharees returned are              # ShareesContext::thenListOfSharees()
      | Sharee1 | 0 | Sharee1 |
    And "exact groups" sharees returned is empty  # ShareesContext::thenListOfSharees()
    And "groups" sharees returned are             # ShareesContext::thenListOfSharees()
      | ShareeGroup | 1 | ShareeGroup |
    And "exact remotes" sharees returned is empty # ShareesContext::thenListOfSharees()
    And "remotes" sharees returned is empty       # ShareesContext::thenListOfSharees()

  ┌─ @BeforeScenario # ShareesContext::prepareParameters()
  │
  ╳  Failed asserting that 403 matches expected '200'.
  │
  Scenario: Search without exact match not-exact casing # /var/www/core/build/integration/sharees_features/sharees_provisioningapiv2.feature:25
    Given As an "test"                                  # ShareesContext::asAn()
    When getting sharees for                            # ShareesContext::whenGettingShareesFor()
      | search   | sharee |
      | itemType | file   |
    Then the OCS status code should be "200"            # ShareesContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"            # ShareesContext::theHTTPStatusCodeShouldBe()
    And "exact users" sharees returned is empty         # ShareesContext::thenListOfSharees()
    And "users" sharees returned are                    # ShareesContext::thenListOfSharees()
      | Sharee1 | 0 | Sharee1 |
    And "exact groups" sharees returned is empty        # ShareesContext::thenListOfSharees()
    And "groups" sharees returned are                   # ShareesContext::thenListOfSharees()
      | ShareeGroup | 1 | ShareeGroup |
    And "exact remotes" sharees returned is empty       # ShareesContext::thenListOfSharees()
    And "remotes" sharees returned is empty             # ShareesContext::thenListOfSharees()

  ┌─ @BeforeScenario # ShareesContext::prepareParameters()
  │
  ╳  Failed asserting that 403 matches expected '200'.
  │
  Scenario: Search only with group members - denied                                      # /var/www/core/build/integration/sharees_features/sharees_provisioningapiv2.feature:41
    Given As an "test"                                                                   # ShareesContext::asAn()
    And parameter "shareapi_only_share_with_group_members" of app "core" is set to "yes" # ShareesContext::serverParameterIsSetTo()
    When getting sharees for                                                             # ShareesContext::whenGettingShareesFor()
      | search   | sharee |
      | itemType | file   |
    Then the OCS status code should be "200"                                             # ShareesContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                             # ShareesContext::theHTTPStatusCodeShouldBe()
    And "exact users" sharees returned is empty                                          # ShareesContext::thenListOfSharees()
    And "users" sharees returned is empty                                                # ShareesContext::thenListOfSharees()
    And "exact groups" sharees returned is empty                                         # ShareesContext::thenListOfSharees()
    And "groups" sharees returned are                                                    # ShareesContext::thenListOfSharees()
      | ShareeGroup | 1 | ShareeGroup |
    And "exact remotes" sharees returned is empty                                        # ShareesContext::thenListOfSharees()
    And "remotes" sharees returned is empty                                              # ShareesContext::thenListOfSharees()

  ┌─ @BeforeScenario # ShareesContext::prepareParameters()
  │
  ╳  Failed asserting that 403 matches expected '200'.
  │
  Scenario: Search only with group members - allowed                                     # /var/www/core/build/integration/sharees_features/sharees_provisioningapiv2.feature:57
    Given As an "test"                                                                   # ShareesContext::asAn()
    And parameter "shareapi_only_share_with_group_members" of app "core" is set to "yes" # ShareesContext::serverParameterIsSetTo()
    And user "Sharee1" belongs to group "ShareeGroup"                                    # ShareesContext::assureUserBelongsToGroup()
    When getting sharees for                                                             # ShareesContext::whenGettingShareesFor()
      | search   | sharee |
      | itemType | file   |
    Then the OCS status code should be "200"                                             # ShareesContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                             # ShareesContext::theHTTPStatusCodeShouldBe()
    And "exact users" sharees returned is empty                                          # ShareesContext::thenListOfSharees()
    And "users" sharees returned are                                                     # ShareesContext::thenListOfSharees()
      | Sharee1 | 0 | Sharee1 |
    And "exact groups" sharees returned is empty                                         # ShareesContext::thenListOfSharees()
    And "groups" sharees returned are                                                    # ShareesContext::thenListOfSharees()
      | ShareeGroup | 1 | ShareeGroup |
    And "exact remotes" sharees returned is empty                                        # ShareesContext::thenListOfSharees()
    And "remotes" sharees returned is empty                                              # ShareesContext::thenListOfSharees()

  ┌─ @BeforeScenario # ShareesContext::prepareParameters()
  │
  ╳  Failed asserting that 403 matches expected '200'.
  │
  Scenario: Search only with group members - no group as non-member                      # /var/www/core/build/integration/sharees_features/sharees_provisioningapiv2.feature:75
    Given As an "Sharee1"                                                                # ShareesContext::asAn()
    And parameter "shareapi_only_share_with_group_members" of app "core" is set to "yes" # ShareesContext::serverParameterIsSetTo()
    When getting sharees for                                                             # ShareesContext::whenGettingShareesFor()
      | search   | sharee |
      | itemType | file   |
    Then the OCS status code should be "200"                                             # ShareesContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                             # ShareesContext::theHTTPStatusCodeShouldBe()
    And "exact users" sharees returned is empty                                          # ShareesContext::thenListOfSharees()
    And "users" sharees returned is empty                                                # ShareesContext::thenListOfSharees()
    And "exact groups" sharees returned is empty                                         # ShareesContext::thenListOfSharees()
    And "groups" sharees returned is empty                                               # ShareesContext::thenListOfSharees()
    And "exact remotes" sharees returned is empty                                        # ShareesContext::thenListOfSharees()
    And "remotes" sharees returned is empty                                              # ShareesContext::thenListOfSharees()

  ┌─ @BeforeScenario # ShareesContext::prepareParameters()
  │
  ╳  Failed asserting that 403 matches expected '200'.
  │
  Scenario: Search without exact match no iteration allowed                                   # /var/www/core/build/integration/sharees_features/sharees_provisioningapiv2.feature:90
    Given As an "test"                                                                        # ShareesContext::asAn()
    And parameter "shareapi_allow_share_dialog_user_enumeration" of app "core" is set to "no" # ShareesContext::serverParameterIsSetTo()
    When getting sharees for                                                                  # ShareesContext::whenGettingShareesFor()
      | search   | Sharee |
      | itemType | file   |
    Then the OCS status code should be "200"                                                  # ShareesContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                                  # ShareesContext::theHTTPStatusCodeShouldBe()
    And "exact users" sharees returned is empty                                               # ShareesContext::thenListOfSharees()
    And "users" sharees returned is empty                                                     # ShareesContext::thenListOfSharees()
    And "exact groups" sharees returned is empty                                              # ShareesContext::thenListOfSharees()
    And "groups" sharees returned is empty                                                    # ShareesContext::thenListOfSharees()
    And "exact remotes" sharees returned is empty                                             # ShareesContext::thenListOfSharees()
    And "remotes" sharees returned is empty                                                   # ShareesContext::thenListOfSharees()

  ┌─ @BeforeScenario # ShareesContext::prepareParameters()
  │
  ╳  Failed asserting that 403 matches expected '200'.
  │
  Scenario: Search with exact match no iteration allowed                                      # /var/www/core/build/integration/sharees_features/sharees_provisioningapiv2.feature:105
    Given As an "test"                                                                        # ShareesContext::asAn()
    And parameter "shareapi_allow_share_dialog_user_enumeration" of app "core" is set to "no" # ShareesContext::serverParameterIsSetTo()
    When getting sharees for                                                                  # ShareesContext::whenGettingShareesFor()
      | search   | Sharee1 |
      | itemType | file    |
    Then the OCS status code should be "200"                                                  # ShareesContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                                  # ShareesContext::theHTTPStatusCodeShouldBe()
    And "exact users" sharees returned are                                                    # ShareesContext::thenListOfSharees()
      | Sharee1 | 0 | Sharee1 |
    And "users" sharees returned is empty                                                     # ShareesContext::thenListOfSharees()
    And "exact groups" sharees returned is empty                                              # ShareesContext::thenListOfSharees()
    And "groups" sharees returned is empty                                                    # ShareesContext::thenListOfSharees()
    And "exact remotes" sharees returned is empty                                             # ShareesContext::thenListOfSharees()
    And "remotes" sharees returned is empty                                                   # ShareesContext::thenListOfSharees()

  ┌─ @BeforeScenario # ShareesContext::prepareParameters()
  │
  ╳  Failed asserting that 403 matches expected '200'.
  │
  Scenario: Search with exact match group no iteration allowed                                # /var/www/core/build/integration/sharees_features/sharees_provisioningapiv2.feature:121
    Given As an "test"                                                                        # ShareesContext::asAn()
    And parameter "shareapi_allow_share_dialog_user_enumeration" of app "core" is set to "no" # ShareesContext::serverParameterIsSetTo()
    When getting sharees for                                                                  # ShareesContext::whenGettingShareesFor()
      | search   | ShareeGroup |
      | itemType | file        |
    Then the OCS status code should be "200"                                                  # ShareesContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                                  # ShareesContext::theHTTPStatusCodeShouldBe()
    And "exact users" sharees returned is empty                                               # ShareesContext::thenListOfSharees()
    And "users" sharees returned is empty                                                     # ShareesContext::thenListOfSharees()
    And "exact groups" sharees returned are                                                   # ShareesContext::thenListOfSharees()
      | ShareeGroup | 1 | ShareeGroup |
    And "groups" sharees returned is empty                                                    # ShareesContext::thenListOfSharees()
    And "exact remotes" sharees returned is empty                                             # ShareesContext::thenListOfSharees()
    And "remotes" sharees returned is empty                                                   # ShareesContext::thenListOfSharees()

  ┌─ @BeforeScenario # ShareesContext::prepareParameters()
  │
  ╳  Failed asserting that 403 matches expected '200'.
  │
  Scenario: Search with exact match                # /var/www/core/build/integration/sharees_features/sharees_provisioningapiv2.feature:137
    Given As an "test"                             # ShareesContext::asAn()
    When getting sharees for                       # ShareesContext::whenGettingShareesFor()
      | search   | Sharee1 |
      | itemType | file    |
    Then the OCS status code should be "200"       # ShareesContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"       # ShareesContext::theHTTPStatusCodeShouldBe()
    Then "exact users" sharees returned are        # ShareesContext::thenListOfSharees()
      | Sharee1 | 0 | Sharee1 |
    Then "users" sharees returned is empty         # ShareesContext::thenListOfSharees()
    Then "exact groups" sharees returned is empty  # ShareesContext::thenListOfSharees()
    Then "groups" sharees returned is empty        # ShareesContext::thenListOfSharees()
    Then "exact remotes" sharees returned is empty # ShareesContext::thenListOfSharees()
    Then "remotes" sharees returned is empty       # ShareesContext::thenListOfSharees()

  ┌─ @BeforeScenario # ShareesContext::prepareParameters()
  │
  ╳  Failed asserting that 403 matches expected '200'.
  │
  Scenario: Search with exact match not-exact casing # /var/www/core/build/integration/sharees_features/sharees_provisioningapiv2.feature:152
    Given As an "test"                               # ShareesContext::asAn()
    When getting sharees for                         # ShareesContext::whenGettingShareesFor()
      | search   | sharee1 |
      | itemType | file    |
    Then the OCS status code should be "200"         # ShareesContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"         # ShareesContext::theHTTPStatusCodeShouldBe()
    Then "exact users" sharees returned are          # ShareesContext::thenListOfSharees()
      | Sharee1 | 0 | Sharee1 |
    Then "users" sharees returned is empty           # ShareesContext::thenListOfSharees()
    Then "exact groups" sharees returned is empty    # ShareesContext::thenListOfSharees()
    Then "groups" sharees returned is empty          # ShareesContext::thenListOfSharees()
    Then "exact remotes" sharees returned is empty   # ShareesContext::thenListOfSharees()
    Then "remotes" sharees returned is empty         # ShareesContext::thenListOfSharees()

  ┌─ @BeforeScenario # ShareesContext::prepareParameters()
  │
  ╳  Failed asserting that 403 matches expected '200'.
  │
  Scenario: Search with exact match not-exact casing group # /var/www/core/build/integration/sharees_features/sharees_provisioningapiv2.feature:167
    Given As an "test"                                     # ShareesContext::asAn()
    When getting sharees for                               # ShareesContext::whenGettingShareesFor()
      | search   | shareegroup |
      | itemType | file        |
    Then the OCS status code should be "200"               # ShareesContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"               # ShareesContext::theHTTPStatusCodeShouldBe()
    Then "exact users" sharees returned is empty           # ShareesContext::thenListOfSharees()
    Then "users" sharees returned is empty                 # ShareesContext::thenListOfSharees()
    Then "exact groups" sharees returned are               # ShareesContext::thenListOfSharees()
      | ShareeGroup | 1 | ShareeGroup |
    Then "groups" sharees returned is empty                # ShareesContext::thenListOfSharees()
    Then "exact remotes" sharees returned is empty         # ShareesContext::thenListOfSharees()
    Then "remotes" sharees returned is empty               # ShareesContext::thenListOfSharees()

  ┌─ @BeforeScenario # ShareesContext::prepareParameters()
  │
  ╳  Failed asserting that 403 matches expected '200'.
  │
  Scenario: Search with "self"                     # /var/www/core/build/integration/sharees_features/sharees_provisioningapiv2.feature:182
    Given As an "Sharee1"                          # ShareesContext::asAn()
    When getting sharees for                       # ShareesContext::whenGettingShareesFor()
      | search   | Sharee1 |
      | itemType | file    |
    Then the OCS status code should be "200"       # ShareesContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"       # ShareesContext::theHTTPStatusCodeShouldBe()
    Then "exact users" sharees returned are        # ShareesContext::thenListOfSharees()
      | Sharee1 | 0 | Sharee1 |
    Then "users" sharees returned is empty         # ShareesContext::thenListOfSharees()
    Then "exact groups" sharees returned is empty  # ShareesContext::thenListOfSharees()
    Then "groups" sharees returned is empty        # ShareesContext::thenListOfSharees()
    Then "exact remotes" sharees returned is empty # ShareesContext::thenListOfSharees()
    Then "remotes" sharees returned is empty       # ShareesContext::thenListOfSharees()

  ┌─ @BeforeScenario # ShareesContext::prepareParameters()
  │
  ╳  Failed asserting that 403 matches expected '200'.
  │
  Scenario: Remote sharee for files               # /var/www/core/build/integration/sharees_features/sharees_provisioningapiv2.feature:197
    Given As an "test"                            # ShareesContext::asAn()
    When getting sharees for                      # ShareesContext::whenGettingShareesFor()
      | search   | test@localhost |
      | itemType | file           |
    Then the OCS status code should be "200"      # ShareesContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"      # ShareesContext::theHTTPStatusCodeShouldBe()
    Then "exact users" sharees returned is empty  # ShareesContext::thenListOfSharees()
    Then "users" sharees returned is empty        # ShareesContext::thenListOfSharees()
    Then "exact groups" sharees returned is empty # ShareesContext::thenListOfSharees()
    Then "groups" sharees returned is empty       # ShareesContext::thenListOfSharees()
    Then "exact remotes" sharees returned are     # ShareesContext::thenListOfSharees()
      | test@localhost | 6 | test@localhost |
    Then "remotes" sharees returned is empty      # ShareesContext::thenListOfSharees()

  ┌─ @BeforeScenario # ShareesContext::prepareParameters()
  │
  ╳  Failed asserting that 403 matches expected '200'.
  │
  Scenario: Remote sharee for calendars not allowed # /var/www/core/build/integration/sharees_features/sharees_provisioningapiv2.feature:212
    Given As an "test"                              # ShareesContext::asAn()
    When getting sharees for                        # ShareesContext::whenGettingShareesFor()
      | search   | test@localhost |
      | itemType | calendar       |
    Then the OCS status code should be "200"        # ShareesContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"        # ShareesContext::theHTTPStatusCodeShouldBe()
    Then "exact users" sharees returned is empty    # ShareesContext::thenListOfSharees()
    Then "users" sharees returned is empty          # ShareesContext::thenListOfSharees()
    Then "exact groups" sharees returned is empty   # ShareesContext::thenListOfSharees()
    Then "groups" sharees returned is empty         # ShareesContext::thenListOfSharees()
    Then "exact remotes" sharees returned is empty  # ShareesContext::thenListOfSharees()
    Then "remotes" sharees returned is empty        # ShareesContext::thenListOfSharees()

  ┌─ @BeforeScenario # ShareesContext::prepareParameters()
  │
  ╳  Failed asserting that 403 matches expected '200'.
  │
  Scenario: Group sharees not returned when group sharing is disabled         # /var/www/core/build/integration/sharees_features/sharees_provisioningapiv2.feature:226
    Given As an "test"                                                        # ShareesContext::asAn()
    And parameter "shareapi_allow_group_sharing" of app "core" is set to "no" # ShareesContext::serverParameterIsSetTo()
    When getting sharees for                                                  # ShareesContext::whenGettingShareesFor()
      | search   | sharee |
      | itemType | file   |
    Then the OCS status code should be "200"                                  # ShareesContext::theOCSStatusCodeShouldBe()
    And the HTTP status code should be "200"                                  # ShareesContext::theHTTPStatusCodeShouldBe()
    And "exact users" sharees returned is empty                               # ShareesContext::thenListOfSharees()
    And "users" sharees returned are                                          # ShareesContext::thenListOfSharees()
      | Sharee1 | 0 | Sharee1 |
    And "exact groups" sharees returned is empty                              # ShareesContext::thenListOfSharees()
    And "groups" sharees returned is empty                                    # ShareesContext::thenListOfSharees()
    And "exact remotes" sharees returned is empty                             # ShareesContext::thenListOfSharees()
    And "remotes" sharees returned is empty                                   # ShareesContext::thenListOfSharees()

--- Skipped scenarios:

    /var/www/core/build/integration/capabilities_features/capabilities.feature:5
    /var/www/core/build/integration/capabilities_features/capabilities.feature:24
    /var/www/core/build/integration/capabilities_features/capabilities.feature:44
    /var/www/core/build/integration/capabilities_features/capabilities.feature:63
    /var/www/core/build/integration/capabilities_features/capabilities.feature:83
    /var/www/core/build/integration/capabilities_features/capabilities.feature:103
    /var/www/core/build/integration/capabilities_features/capabilities.feature:123
    /var/www/core/build/integration/capabilities_features/capabilities.feature:143
    /var/www/core/build/integration/capabilities_features/capabilities.feature:164
    /var/www/core/build/integration/capabilities_features/capabilities.feature:185
    /var/www/core/build/integration/capabilities_features/capabilities.feature:206
    /var/www/core/build/integration/capabilities_features/capabilities.feature:229
    /var/www/core/build/integration/sharees_features/sharees.feature:9
    /var/www/core/build/integration/sharees_features/sharees.feature:25
    /var/www/core/build/integration/sharees_features/sharees.feature:41
    /var/www/core/build/integration/sharees_features/sharees.feature:57
    /var/www/core/build/integration/sharees_features/sharees.feature:75
    /var/www/core/build/integration/sharees_features/sharees.feature:90
    /var/www/core/build/integration/sharees_features/sharees.feature:105
    /var/www/core/build/integration/sharees_features/sharees.feature:121
    /var/www/core/build/integration/sharees_features/sharees.feature:137
    /var/www/core/build/integration/sharees_features/sharees.feature:152
    /var/www/core/build/integration/sharees_features/sharees.feature:167
    /var/www/core/build/integration/sharees_features/sharees.feature:182
    /var/www/core/build/integration/sharees_features/sharees.feature:197
    /var/www/core/build/integration/sharees_features/sharees.feature:212
    /var/www/core/build/integration/sharees_features/sharees.feature:226
    /var/www/core/build/integration/sharees_features/sharees_provisioningapiv2.feature:9
    /var/www/core/build/integration/sharees_features/sharees_provisioningapiv2.feature:25
    /var/www/core/build/integration/sharees_features/sharees_provisioningapiv2.feature:41
    /var/www/core/build/integration/sharees_features/sharees_provisioningapiv2.feature:57
    /var/www/core/build/integration/sharees_features/sharees_provisioningapiv2.feature:75
    /var/www/core/build/integration/sharees_features/sharees_provisioningapiv2.feature:90
    /var/www/core/build/integration/sharees_features/sharees_provisioningapiv2.feature:105
    /var/www/core/build/integration/sharees_features/sharees_provisioningapiv2.feature:121
    /var/www/core/build/integration/sharees_features/sharees_provisioningapiv2.feature:137
    /var/www/core/build/integration/sharees_features/sharees_provisioningapiv2.feature:152
    /var/www/core/build/integration/sharees_features/sharees_provisioningapiv2.feature:167
    /var/www/core/build/integration/sharees_features/sharees_provisioningapiv2.feature:182
    /var/www/core/build/integration/sharees_features/sharees_provisioningapiv2.feature:197
    /var/www/core/build/integration/sharees_features/sharees_provisioningapiv2.feature:212
    /var/www/core/build/integration/sharees_features/sharees_provisioningapiv2.feature:226

--- Failed scenarios:

    /var/www/core/build/integration/features/auth.feature:10
    /var/www/core/build/integration/features/auth.feature:14
    /var/www/core/build/integration/features/auth.feature:18
    /var/www/core/build/integration/features/auth.feature:22
    /var/www/core/build/integration/features/auth.feature:26
    /var/www/core/build/integration/features/auth.feature:34
    /var/www/core/build/integration/features/auth.feature:38
    /var/www/core/build/integration/features/auth.feature:42
    /var/www/core/build/integration/features/auth.feature:51
    /var/www/core/build/integration/features/auth.feature:59
    /var/www/core/build/integration/features/auth.feature:63
    /var/www/core/build/integration/features/auth.feature:67
    /var/www/core/build/integration/features/auth.feature:71
    /var/www/core/build/integration/features/auth.feature:75
    /var/www/core/build/integration/features/caldav.feature:2
    /var/www/core/build/integration/features/caldav.feature:19
    /var/www/core/build/integration/features/carddav.feature:2
    /var/www/core/build/integration/features/carddav.feature:8
    /var/www/core/build/integration/features/carddav.feature:15
    /var/www/core/build/integration/features/carddav.feature:21
    /var/www/core/build/integration/features/checksums.feature:3
    /var/www/core/build/integration/features/checksums.feature:8
    /var/www/core/build/integration/features/checksums.feature:14
    /var/www/core/build/integration/features/checksums.feature:20
    /var/www/core/build/integration/features/checksums.feature:27
    /var/www/core/build/integration/features/checksums.feature:34
    /var/www/core/build/integration/features/checksums.feature:41
    /var/www/core/build/integration/features/checksums.feature:48
    /var/www/core/build/integration/features/checksums.feature:55
    /var/www/core/build/integration/features/checksums.feature:62
    /var/www/core/build/integration/features/checksums.feature:70
    /var/www/core/build/integration/features/comments.feature:2
    /var/www/core/build/integration/features/comments.feature:17
    /var/www/core/build/integration/features/comments.feature:36
    /var/www/core/build/integration/features/comments.feature:42
    /var/www/core/build/integration/features/comments.feature:48
    /var/www/core/build/integration/features/comments.feature:66
    /var/www/core/build/integration/features/comments.feature:89
    /var/www/core/build/integration/features/comments.feature:111
    /var/www/core/build/integration/features/comments.feature:134
    /var/www/core/build/integration/features/comments.feature:162
    /var/www/core/build/integration/features/comments.feature:191
    /var/www/core/build/integration/features/dav-v2.feature:5
    /var/www/core/build/integration/features/dav-v2.feature:12
    /var/www/core/build/integration/features/dav-v2.feature:20
    /var/www/core/build/integration/features/dav-v2.feature:35
    /var/www/core/build/integration/features/dav-v2.feature:41
    /var/www/core/build/integration/features/dav-v2.feature:47
    /var/www/core/build/integration/features/dav-v2.feature:52
    /var/www/core/build/integration/features/dav-v2.feature:57
    /var/www/core/build/integration/features/dav-v2.feature:66
    /var/www/core/build/integration/features/external-storage.feature:8
    /var/www/core/build/integration/features/external-storage.feature:29
    /var/www/core/build/integration/features/external-storage.feature:40
    /var/www/core/build/integration/features/favorites.feature:5
    /var/www/core/build/integration/features/favorites.feature:14
    /var/www/core/build/integration/features/favorites.feature:24
    /var/www/core/build/integration/features/favorites.feature:33
    /var/www/core/build/integration/features/favorites.feature:43
    /var/www/core/build/integration/features/favorites.feature:52
    /var/www/core/build/integration/features/favorites.feature:62
    /var/www/core/build/integration/features/favorites.feature:71
    /var/www/core/build/integration/features/favorites.feature:81
    /var/www/core/build/integration/features/favorites.feature:93
    /var/www/core/build/integration/features/favorites.feature:105
    /var/www/core/build/integration/features/favorites.feature:121
    /var/www/core/build/integration/features/favorites.feature:137
    /var/www/core/build/integration/features/provisioning-v1.feature:5
    /var/www/core/build/integration/features/provisioning-v1.feature:11
    /var/www/core/build/integration/features/provisioning-v1.feature:17
    /var/www/core/build/integration/features/provisioning-v1.feature:27
    /var/www/core/build/integration/features/provisioning-v1.feature:36
    /var/www/core/build/integration/features/provisioning-v1.feature:42
    /var/www/core/build/integration/features/provisioning-v1.feature:51
    /var/www/core/build/integration/features/provisioning-v1.feature:63
    /var/www/core/build/integration/features/provisioning-v1.feature:73
    /var/www/core/build/integration/features/provisioning-v1.feature:83
    /var/www/core/build/integration/features/provisioning-v1.feature:91
    /var/www/core/build/integration/features/provisioning-v1.feature:100
    /var/www/core/build/integration/features/provisioning-v1.feature:107
    /var/www/core/build/integration/features/provisioning-v1.feature:116
    /var/www/core/build/integration/features/provisioning-v1.feature:125
    /var/www/core/build/integration/features/provisioning-v1.feature:134
    /var/www/core/build/integration/features/provisioning-v1.feature:141
    /var/www/core/build/integration/features/provisioning-v1.feature:151
    /var/www/core/build/integration/features/provisioning-v1.feature:160
    /var/www/core/build/integration/features/provisioning-v1.feature:173
    /var/www/core/build/integration/features/provisioning-v1.feature:181
    /var/www/core/build/integration/features/provisioning-v1.feature:191
    /var/www/core/build/integration/features/provisioning-v1.feature:200
    /var/www/core/build/integration/features/provisioning-v1.feature:209
    /var/www/core/build/integration/features/provisioning-v1.feature:219
    /var/www/core/build/integration/features/provisioning-v1.feature:227
    /var/www/core/build/integration/features/provisioning-v1.feature:237
    /var/www/core/build/integration/features/provisioning-v1.feature:245
    /var/www/core/build/integration/features/provisioning-v1.feature:255
    /var/www/core/build/integration/features/provisioning-v1.feature:263
    /var/www/core/build/integration/features/provisioning-v1.feature:271
    /var/www/core/build/integration/features/provisioning-v1.feature:280
    /var/www/core/build/integration/features/provisioning-v1.feature:299
    /var/www/core/build/integration/features/provisioning-v1.feature:321
    /var/www/core/build/integration/features/provisioning-v1.feature:329
    /var/www/core/build/integration/features/provisioning-v1.feature:338
    /var/www/core/build/integration/features/provisioning-v1.feature:353
    /var/www/core/build/integration/features/provisioning-v1.feature:369
    /var/www/core/build/integration/features/provisioning-v1.feature:385
    /var/www/core/build/integration/features/provisioning-v1.feature:394
    /var/www/core/build/integration/features/provisioning-v1.feature:404
    /var/www/core/build/integration/features/provisioning-v1.feature:416
    /var/www/core/build/integration/features/provisioning-v1.feature:429
    /var/www/core/build/integration/features/provisioning-v1.feature:440
    /var/www/core/build/integration/features/provisioning-v1.feature:450
    /var/www/core/build/integration/features/provisioning-v1.feature:461
    /var/www/core/build/integration/features/provisioning-v1.feature:473
    /var/www/core/build/integration/features/provisioning-v1.feature:486
    /var/www/core/build/integration/features/provisioning-v1.feature:498
    /var/www/core/build/integration/features/provisioning-v1.feature:512
    /var/www/core/build/integration/features/provisioning-v1.feature:527
    /var/www/core/build/integration/features/provisioning-v1.feature:542
    /var/www/core/build/integration/features/provisioning-v1.feature:558
    /var/www/core/build/integration/features/provisioning-v1.feature:565
    /var/www/core/build/integration/features/provisioning-v2.feature:5
    /var/www/core/build/integration/features/sharing-v1.feature:6
    /var/www/core/build/integration/features/sharing-v1.feature:17
    /var/www/core/build/integration/features/sharing-v1.feature:29
    /var/www/core/build/integration/features/sharing-v1.feature:44
    /var/www/core/build/integration/features/sharing-v1.feature:54
    /var/www/core/build/integration/features/sharing-v1.feature:65
    /var/www/core/build/integration/features/sharing-v1.feature:85
    /var/www/core/build/integration/features/sharing-v1.feature:98
    /var/www/core/build/integration/features/sharing-v1.feature:129
    /var/www/core/build/integration/features/sharing-v1.feature:159
    /var/www/core/build/integration/features/sharing-v1.feature:189
    /var/www/core/build/integration/features/sharing-v1.feature:219
    /var/www/core/build/integration/features/sharing-v1.feature:230
    /var/www/core/build/integration/features/sharing-v1.feature:240
    /var/www/core/build/integration/features/sharing-v1.feature:255
    /var/www/core/build/integration/features/sharing-v1.feature:270
    /var/www/core/build/integration/features/sharing-v1.feature:285
    /var/www/core/build/integration/features/sharing-v1.feature:314
    /var/www/core/build/integration/features/sharing-v1.feature:345
    /var/www/core/build/integration/features/sharing-v1.feature:355
    /var/www/core/build/integration/features/sharing-v1.feature:366
    /var/www/core/build/integration/features/sharing-v1.feature:377
    /var/www/core/build/integration/features/sharing-v1.feature:390
    /var/www/core/build/integration/features/sharing-v1.feature:410
    /var/www/core/build/integration/features/sharing-v1.feature:430
    /var/www/core/build/integration/features/sharing-v1.feature:440
    /var/www/core/build/integration/features/sharing-v1.feature:456
    /var/www/core/build/integration/features/sharing-v1.feature:477
    /var/www/core/build/integration/features/sharing-v1.feature:497
    /var/www/core/build/integration/features/sharing-v1.feature:513
    /var/www/core/build/integration/features/sharing-v1.feature:522
    /var/www/core/build/integration/features/sharing-v1.feature:538
    /var/www/core/build/integration/features/sharing-v1.feature:549
    /var/www/core/build/integration/features/sharing-v1.feature:557
    /var/www/core/build/integration/features/sharing-v1.feature:569
    /var/www/core/build/integration/features/sharing-v1.feature:590
    /var/www/core/build/integration/features/sharing-v1.feature:602
    /var/www/core/build/integration/features/sharing-v1.feature:609
    /var/www/core/build/integration/features/sharing-v1.feature:618
    /var/www/core/build/integration/features/sharing-v1.feature:630
    /var/www/core/build/integration/features/sharing-v1.feature:642
    /var/www/core/build/integration/features/sharing-v1.feature:649
    /var/www/core/build/integration/features/sharing-v1.feature:658
    /var/www/core/build/integration/features/sharing-v1.feature:670
    /var/www/core/build/integration/features/sharing-v1.feature:682
    /var/www/core/build/integration/features/sharing-v1.feature:694
    /var/www/core/build/integration/features/sharing-v1.feature:706
    /var/www/core/build/integration/features/sharing-v1.feature:718
    /var/www/core/build/integration/features/sharing-v1.feature:731
    /var/www/core/build/integration/features/sharing-v1.feature:744
    /var/www/core/build/integration/features/sharing-v1.feature:758
    /var/www/core/build/integration/features/sharing-v1.feature:772
    /var/www/core/build/integration/features/sharing-v1.feature:788
    /var/www/core/build/integration/features/sharing-v1.feature:805
    /var/www/core/build/integration/features/sharing-v1.feature:815
    /var/www/core/build/integration/features/sharing-v1.feature:829
    /var/www/core/build/integration/features/sharing-v1.feature:845
    /var/www/core/build/integration/features/sharing-v1.feature:860
    /var/www/core/build/integration/features/sharing-v1.feature:875
    /var/www/core/build/integration/features/sharing-v1.feature:882
    /var/www/core/build/integration/features/sharing-v1.feature:893
    /var/www/core/build/integration/features/sharing-v1.feature:907
    /var/www/core/build/integration/features/sharing-v1.feature:924
    /var/www/core/build/integration/features/sharing-v1.feature:942
    /var/www/core/build/integration/features/sharing-v1.feature:967
    /var/www/core/build/integration/features/sharing-v1.feature:982
    /var/www/core/build/integration/features/sharing-v1.feature:999
    /var/www/core/build/integration/features/sharing-v1.feature:1016
    /var/www/core/build/integration/features/sharing-v1.feature:1033
    /var/www/core/build/integration/features/sharing-v1.feature:1050
    /var/www/core/build/integration/features/sharing-v1.feature:1067
    /var/www/core/build/integration/features/sharing-v1.feature:1082
    /var/www/core/build/integration/features/sharing-v1.feature:1097
    /var/www/core/build/integration/features/sharing-v1.feature:1110
    /var/www/core/build/integration/features/sharing-v1.feature:1126
    /var/www/core/build/integration/features/sharing-v1.feature:1136
    /var/www/core/build/integration/features/sharing-v1.feature:1149
    /var/www/core/build/integration/features/tags.feature:3
    /var/www/core/build/integration/features/tags.feature:12
    /var/www/core/build/integration/features/tags.feature:18
    /var/www/core/build/integration/features/tags.feature:24
    /var/www/core/build/integration/features/tags.feature:30
    /var/www/core/build/integration/features/tags.feature:36
    /var/www/core/build/integration/features/tags.feature:44
    /var/www/core/build/integration/features/tags.feature:52
    /var/www/core/build/integration/features/tags.feature:60
    /var/www/core/build/integration/features/tags.feature:67
    /var/www/core/build/integration/features/tags.feature:73
    /var/www/core/build/integration/features/tags.feature:80
    /var/www/core/build/integration/features/tags.feature:88
    /var/www/core/build/integration/features/tags.feature:96
    /var/www/core/build/integration/features/tags.feature:102
    /var/www/core/build/integration/features/tags.feature:108
    /var/www/core/build/integration/features/tags.feature:122
    /var/www/core/build/integration/features/tags.feature:134
    /var/www/core/build/integration/features/tags.feature:150
    /var/www/core/build/integration/features/tags.feature:167
    /var/www/core/build/integration/features/tags.feature:183
    /var/www/core/build/integration/features/tags.feature:201
    /var/www/core/build/integration/features/tags.feature:220
    /var/www/core/build/integration/features/tags.feature:237
    /var/www/core/build/integration/features/tags.feature:251
    /var/www/core/build/integration/features/tags.feature:275
    /var/www/core/build/integration/features/tags.feature:298
    /var/www/core/build/integration/features/tags.feature:318
    /var/www/core/build/integration/features/tags.feature:343
    /var/www/core/build/integration/features/tags.feature:366
    /var/www/core/build/integration/features/tags.feature:386
    /var/www/core/build/integration/features/tags.feature:392
    /var/www/core/build/integration/features/tags.feature:397
    /var/www/core/build/integration/features/tags.feature:402
    /var/www/core/build/integration/features/tags.feature:414
    /var/www/core/build/integration/features/tags.feature:422
    /var/www/core/build/integration/features/tags.feature:428
    /var/www/core/build/integration/features/transfer-ownership.feature:4
    /var/www/core/build/integration/features/transfer-ownership.feature:15
    /var/www/core/build/integration/features/transfer-ownership.feature:27
    /var/www/core/build/integration/features/transfer-ownership.feature:39
    /var/www/core/build/integration/features/transfer-ownership.feature:52
    /var/www/core/build/integration/features/transfer-ownership.feature:66
    /var/www/core/build/integration/features/transfer-ownership.feature:82
    /var/www/core/build/integration/features/transfer-ownership.feature:96
    /var/www/core/build/integration/features/transfer-ownership.feature:106
    /var/www/core/build/integration/features/transfer-ownership.feature:117
    /var/www/core/build/integration/features/transfer-ownership.feature:123
    /var/www/core/build/integration/features/trashbin.feature:8
    /var/www/core/build/integration/features/webdav-related.feature:5
    /var/www/core/build/integration/features/webdav-related.feature:13
    /var/www/core/build/integration/features/webdav-related.feature:21
    /var/www/core/build/integration/features/webdav-related.feature:30
    /var/www/core/build/integration/features/webdav-related.feature:39
    /var/www/core/build/integration/features/webdav-related.feature:57
    /var/www/core/build/integration/features/webdav-related.feature:75
    /var/www/core/build/integration/features/webdav-related.feature:84
    /var/www/core/build/integration/features/webdav-related.feature:93
    /var/www/core/build/integration/features/webdav-related.feature:111
    /var/www/core/build/integration/features/webdav-related.feature:129
    /var/www/core/build/integration/features/webdav-related.feature:135
    /var/www/core/build/integration/features/webdav-related.feature:143
    /var/www/core/build/integration/features/webdav-related.feature:152
    /var/www/core/build/integration/features/webdav-related.feature:161
    /var/www/core/build/integration/features/webdav-related.feature:179
    /var/www/core/build/integration/features/webdav-related.feature:197
    /var/www/core/build/integration/features/webdav-related.feature:207
    /var/www/core/build/integration/features/webdav-related.feature:219
    /var/www/core/build/integration/features/webdav-related.feature:228
    /var/www/core/build/integration/features/webdav-related.feature:237
    /var/www/core/build/integration/features/webdav-related.feature:252
    /var/www/core/build/integration/features/webdav-related.feature:258
    /var/www/core/build/integration/features/webdav-related.feature:264
    /var/www/core/build/integration/features/webdav-related.feature:269
    /var/www/core/build/integration/features/webdav-related.feature:274
    /var/www/core/build/integration/features/webdav-related.feature:283
    /var/www/core/build/integration/features/webdav-related.feature:292
    /var/www/core/build/integration/features/webdav-related.feature:301
    /var/www/core/build/integration/features/webdav-related.feature:308
    /var/www/core/build/integration/features/webdav-related.feature:322
    /var/www/core/build/integration/features/webdav-related.feature:336
    /var/www/core/build/integration/features/webdav-related.feature:348
    /var/www/core/build/integration/features/webdav-related.feature:374
    /var/www/core/build/integration/features/webdav-related.feature:386
    /var/www/core/build/integration/features/webdav-related.feature:398
    /var/www/core/build/integration/features/webdav-related.feature:410
    /var/www/core/build/integration/features/webdav-related.feature:417
    /var/www/core/build/integration/features/webdav-related.feature:425
    /var/www/core/build/integration/federation_features/federated.feature:5
    /var/www/core/build/integration/federation_features/federated.feature:31
    /var/www/core/build/integration/federation_features/federated.feature:57
    /var/www/core/build/integration/federation_features/federated.feature:79
    /var/www/core/build/integration/federation_features/federated.feature:89
    /var/www/core/build/integration/federation_features/federated.feature:123
    /var/www/core/build/integration/federation_features/federated.feature:139
    /var/www/core/build/integration/federation_features/federated.feature:155
    /var/www/core/build/integration/federation_features/federated.feature:171

339 scenarios (1 passed, 296 failed, 42 skipped)
3210 steps (493 passed, 296 failed, 2421 skipped)
0m36.13s (14.68Mb)
Console has to be executed with the user that owns the file config/config.php
Current user: root
Owner of config.php: www-data
Try adding 'sudo -u www-data ' to the beginning of the command (without the single quotes)
Console has to be executed with the user that owns the file config/config.php
Current user: root
Owner of config.php: www-data
Try adding 'sudo -u www-data ' to the beginning of the command (without the single quotes)
{"reqId":"YIm8na16BDgYukzhPDFx","level":3,"time":"2017-04-08T01:47:31+00:00","remoteAddr":"127.0.0.1","user":"--","app":"PHP","method":"GET","url":"\/core\/cron.php","message":"Undefined index: size at \/var\/www\/core\/lib\/private\/Files\/Cache\/Scanner.php#416"}
{"reqId":"YIm8na16BDgYukzhPDFx","level":3,"time":"2017-04-08T01:47:31+00:00","remoteAddr":"127.0.0.1","user":"--","app":"PHP","method":"GET","url":"\/core\/cron.php","message":"Undefined index: size at \/var\/www\/core\/lib\/private\/Files\/Cache\/Scanner.php#419"}
{"reqId":"YIm8na16BDgYukzhPDFx","level":3,"time":"2017-04-08T01:47:31+00:00","remoteAddr":"127.0.0.1","user":"--","app":"PHP","method":"GET","url":"\/core\/cron.php","message":"Undefined index: size at \/var\/www\/core\/lib\/private\/Files\/Cache\/Scanner.php#416"}
{"reqId":"YIm8na16BDgYukzhPDFx","level":3,"time":"2017-04-08T01:47:31+00:00","remoteAddr":"127.0.0.1","user":"--","app":"PHP","method":"GET","url":"\/core\/cron.php","message":"Undefined index: size at \/var\/www\/core\/lib\/private\/Files\/Cache\/Scanner.php#419"}
{"reqId":"YIm8na16BDgYukzhPDFx","level":3,"time":"2017-04-08T01:47:31+00:00","remoteAddr":"127.0.0.1","user":"--","app":"PHP","method":"GET","url":"\/core\/cron.php","message":"Undefined index: size at \/var\/www\/core\/lib\/private\/Files\/Cache\/Scanner.php#416"}
{"reqId":"YIm8na16BDgYukzhPDFx","level":3,"time":"2017-04-08T01:47:31+00:00","remoteAddr":"127.0.0.1","user":"--","app":"PHP","method":"GET","url":"\/core\/cron.php","message":"Undefined index: size at \/var\/www\/core\/lib\/private\/Files\/Cache\/Scanner.php#419"}
{"reqId":"YIm8na16BDgYukzhPDFx","level":3,"time":"2017-04-08T01:47:31+00:00","remoteAddr":"127.0.0.1","user":"--","app":"PHP","method":"GET","url":"\/core\/cron.php","message":"Undefined index: size at \/var\/www\/core\/lib\/private\/Files\/Cache\/Scanner.php#416"}
{"reqId":"YIm8na16BDgYukzhPDFx","level":3,"time":"2017-04-08T01:47:31+00:00","remoteAddr":"127.0.0.1","user":"--","app":"PHP","method":"GET","url":"\/core\/cron.php","message":"Undefined index: size at \/var\/www\/core\/lib\/private\/Files\/Cache\/Scanner.php#419"}
{"reqId":"YIm8na16BDgYukzhPDFx","level":3,"time":"2017-04-08T01:57:47+00:00","remoteAddr":"127.0.0.1","user":"--","app":"PHP","method":"GET","url":"\/core\/cron.php","message":"Undefined index: size at \/var\/www\/core\/lib\/private\/Files\/Cache\/Scanner.php#416"}
{"reqId":"YIm8na16BDgYukzhPDFx","level":3,"time":"2017-04-08T01:57:47+00:00","remoteAddr":"127.0.0.1","user":"--","app":"PHP","method":"GET","url":"\/core\/cron.php","message":"Undefined index: size at \/var\/www\/core\/lib\/private\/Files\/Cache\/Scanner.php#419"}
runsh: Exit code: 1
Makefile:25: recipe for target 'test' failed
make[1]: Leaving directory '/var/www/core/build/integration'
Makefile:193: recipe for target 'test-integration' failed
